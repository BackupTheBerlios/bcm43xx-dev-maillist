From mb at bu3sch.de  Wed Apr  1 01:01:44 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Wed, 1 Apr 2009 00:01:44 +0100
Subject: [PATCH] b43: Implement fullmac-mode support
Message-ID: <200904010101.44380.mb@bu3sch.de>

Recent work on the device firmware discovered a completely new hardware
mode for b43 devices.
All b43 devices have a bit in the MAC-control register to enable true
hardware-fullMAC support. In fullmac mode the MAC and PHY is completely serviced
by the firmware, so no driver support is required anymore.

Full hardware MAC support has advantages and disadvantages:

PRO:
- The b43 driver does support _all_ devices (also 802.11n) in STA and AP mode.
- The driver code is a lot simpler for the fullmac case. (It skips all of
  the software MAC and PHY init).
- People finally stop poking me to implement the N-PHY and LP-PHY code, yay.

CON:
- Packet injection is not supported in fullmac mode, yet. It's on
  the TODO list with deadline 1.4.2010.

The feature currently is disabled by default, because it isn't tested enough.
It can be enabled at modprobe time with the "fullmac=1" module parameter.

Signed-off-by: Michael Buesch <mb at bu3sch.de>

---

John, please queue this patch for 3.6.31.


Index: wireless-testing/drivers/net/wireless/b43/b43.h
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43/b43.h	2009-04-01 00:00:18.000000000 +0200
+++ wireless-testing/drivers/net/wireless/b43/b43.h	2009-04-01 00:00:20.000000000 +0200
@@ -347,6 +347,7 @@ enum {
 #define B43_MACCTL_ENABLED		0x00000001	/* MAC Enabled */
 #define B43_MACCTL_PSM_RUN		0x00000002	/* Run Microcode */
 #define B43_MACCTL_PSM_JMP0		0x00000004	/* Microcode jump to 0 */
+#define B43_MACCTL_FULLMAC		0x00000008	/* Enable hardware full-MAC support */
 #define B43_MACCTL_SHM_ENABLED		0x00000100	/* SHM Enabled */
 #define B43_MACCTL_SHM_UPPER		0x00000200	/* SHM Upper */
 #define B43_MACCTL_IHR_ENABLED		0x00000400	/* IHR Region Enabled */
Index: wireless-testing/drivers/net/wireless/b43/main.c
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43/main.c	2009-04-01 00:00:18.000000000 +0200
+++ wireless-testing/drivers/net/wireless/b43/main.c	2009-04-01 00:00:20.000000000 +0200
@@ -63,6 +63,10 @@ MODULE_LICENSE("GPL");
 MODULE_FIRMWARE(B43_SUPPORTED_FIRMWARE_ID);
 
 
+static int modparam_fullmac;
+module_param_named(fullmac, modparam_fullmac, int, 0444);
+MODULE_PARM_DESC(fullmac, "Switch the hardware into fullmac mode");
+
 static int modparam_bad_frames_preempt;
 module_param_named(bad_frames_preempt, modparam_bad_frames_preempt, int, 0444);
 MODULE_PARM_DESC(bad_frames_preempt,
@@ -4113,6 +4117,9 @@ static void b43_wireless_core_exit(struc
 		return;
 	b43_set_status(dev, B43_STAT_UNINIT);
 
+	if (modparam_fullmac)
+		goto ssb_disable;
+
 	/* Stop the microcode PSM. */
 	macctl = b43_read32(dev, B43_MMIO_MACCTL);
 	macctl &= ~B43_MACCTL_PSM_RUN;
@@ -4132,6 +4139,7 @@ static void b43_wireless_core_exit(struc
 		dev->wl->current_beacon = NULL;
 	}
 
+ssb_disable:
 	ssb_device_disable(dev->dev, 0);
 	ssb_bus_may_powerdown(dev->dev->bus);
 }
@@ -4157,6 +4165,14 @@ static int b43_wireless_core_init(struct
 		b43_wireless_core_reset(dev, tmp);
 	}
 
+	if (modparam_fullmac) {
+		b43_write32(dev, B43_MMIO_MACCTL,
+			    b43_read32(dev, B43_MMIO_MACCTL)
+			    | B43_MACCTL_FULLMAC);
+		err = 0;
+		goto out;
+	}
+
 	/* Reset all data structures. */
 	setup_struct_wldev_for_init(dev);
 	phy->ops->prepare_structs(dev);

-- 
Greetings, Michael.


From david at identd.dyndns.org  Wed Apr  1 03:36:45 2009
From: david at identd.dyndns.org (David Ellingsworth)
Date: Tue, 31 Mar 2009 21:36:45 -0400
Subject: [PATCH] b43: Implement fullmac-mode support
In-Reply-To: <200904010101.44380.mb@bu3sch.de>
References: <200904010101.44380.mb@bu3sch.de>
Message-ID: <49D2C52D.5030207@gmail.com>

Michael Buesch wrote:
> Recent work on the device firmware discovered a completely new hardware
> mode for b43 devices.
> All b43 devices have a bit in the MAC-control register to enable true
> hardware-fullMAC support. In fullmac mode the MAC and PHY is completely serviced
> by the firmware, so no driver support is required anymore.
>
> Full hardware MAC support has advantages and disadvantages:
>
> PRO:
> - The b43 driver does support _all_ devices (also 802.11n) in STA and AP mode.
> - The driver code is a lot simpler for the fullmac case. (It skips all of
>   the software MAC and PHY init).
> - People finally stop poking me to implement the N-PHY and LP-PHY code, yay.
>
> CON:
> - Packet injection is not supported in fullmac mode, yet. It's on
>   the TODO list with deadline 1.4.2010.
>
> The feature currently is disabled by default, because it isn't tested enough.
> It can be enabled at modprobe time with the "fullmac=1" module parameter.
>
> Signed-off-by: Michael Buesch <mb at bu3sch.de>
>
> ---
>
> John, please queue this patch for 3.6.31.
>
>
> Index: wireless-testing/drivers/net/wireless/b43/b43.h
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/b43.h	2009-04-01 00:00:18.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/b43.h	2009-04-01 00:00:20.000000000 +0200
> @@ -347,6 +347,7 @@ enum {
>  #define B43_MACCTL_ENABLED		0x00000001	/* MAC Enabled */
>  #define B43_MACCTL_PSM_RUN		0x00000002	/* Run Microcode */
>  #define B43_MACCTL_PSM_JMP0		0x00000004	/* Microcode jump to 0 */
> +#define B43_MACCTL_FULLMAC		0x00000008	/* Enable hardware full-MAC support */
>  #define B43_MACCTL_SHM_ENABLED		0x00000100	/* SHM Enabled */
>  #define B43_MACCTL_SHM_UPPER		0x00000200	/* SHM Upper */
>  #define B43_MACCTL_IHR_ENABLED		0x00000400	/* IHR Region Enabled */
> Index: wireless-testing/drivers/net/wireless/b43/main.c
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/main.c	2009-04-01 00:00:18.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/main.c	2009-04-01 00:00:20.000000000 +0200
> @@ -63,6 +63,10 @@ MODULE_LICENSE("GPL");
>  MODULE_FIRMWARE(B43_SUPPORTED_FIRMWARE_ID);
>  
>  
> +static int modparam_fullmac;
> +module_param_named(fullmac, modparam_fullmac, int, 0444);
> +MODULE_PARM_DESC(fullmac, "Switch the hardware into fullmac mode");
> +
>  static int modparam_bad_frames_preempt;
>  module_param_named(bad_frames_preempt, modparam_bad_frames_preempt, int, 0444);
>  MODULE_PARM_DESC(bad_frames_preempt,
> @@ -4113,6 +4117,9 @@ static void b43_wireless_core_exit(struc
>  		return;
>  	b43_set_status(dev, B43_STAT_UNINIT);
>  
> +	if (modparam_fullmac)
> +		goto ssb_disable;
> +
>  	/* Stop the microcode PSM. */
>  	macctl = b43_read32(dev, B43_MMIO_MACCTL);
>  	macctl &= ~B43_MACCTL_PSM_RUN;
> @@ -4132,6 +4139,7 @@ static void b43_wireless_core_exit(struc
>  		dev->wl->current_beacon = NULL;
>  	}
>  
> +ssb_disable:
>  	ssb_device_disable(dev->dev, 0);
>  	ssb_bus_may_powerdown(dev->dev->bus);
>  }
> @@ -4157,6 +4165,14 @@ static int b43_wireless_core_init(struct
>  		b43_wireless_core_reset(dev, tmp);
>  	}
>  
> +	if (modparam_fullmac) {
> +		b43_write32(dev, B43_MMIO_MACCTL,
> +			    b43_read32(dev, B43_MMIO_MACCTL)
> +			    | B43_MACCTL_FULLMAC);
> +		err = 0;
> +		goto out;
> +	}
> +
>  	/* Reset all data structures. */
>  	setup_struct_wldev_for_init(dev);
>  	phy->ops->prepare_structs(dev);
>
>   
Michael Buesch wrote:
> Recent work on the device firmware discovered a completely new hardware
> mode for b43 devices.
> All b43 devices have a bit in the MAC-control register to enable true
> hardware-fullMAC support. In fullmac mode the MAC and PHY is completely serviced
> by the firmware, so no driver support is required anymore.
>
> Full hardware MAC support has advantages and disadvantages:
>
> PRO:
> - The b43 driver does support _all_ devices (also 802.11n) in STA and AP mode.
> - The driver code is a lot simpler for the fullmac case. (It skips all of
>   the software MAC and PHY init).
> - People finally stop poking me to implement the N-PHY and LP-PHY code, yay.
>
> CON:
> - Packet injection is not supported in fullmac mode, yet. It's on
>   the TODO list with deadline 1.4.2010.
>
> The feature currently is disabled by default, because it isn't tested enough.
> It can be enabled at modprobe time with the "fullmac=1" module parameter.
>
> Signed-off-by: Michael Buesch <mb at bu3sch.de>
>
> ---
>
> John, please queue this patch for 3.6.31.
>
>
> Index: wireless-testing/drivers/net/wireless/b43/b43.h
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/b43.h	2009-04-01 00:00:18.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/b43.h	2009-04-01 00:00:20.000000000 +0200
> @@ -347,6 +347,7 @@ enum {
>  #define B43_MACCTL_ENABLED		0x00000001	/* MAC Enabled */
>  #define B43_MACCTL_PSM_RUN		0x00000002	/* Run Microcode */
>  #define B43_MACCTL_PSM_JMP0		0x00000004	/* Microcode jump to 0 */
> +#define B43_MACCTL_FULLMAC		0x00000008	/* Enable hardware full-MAC support */
>  #define B43_MACCTL_SHM_ENABLED		0x00000100	/* SHM Enabled */
>  #define B43_MACCTL_SHM_UPPER		0x00000200	/* SHM Upper */
>  #define B43_MACCTL_IHR_ENABLED		0x00000400	/* IHR Region Enabled */
> Index: wireless-testing/drivers/net/wireless/b43/main.c
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/main.c	2009-04-01 00:00:18.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/main.c	2009-04-01 00:00:20.000000000 +0200
> @@ -63,6 +63,10 @@ MODULE_LICENSE("GPL");
>  MODULE_FIRMWARE(B43_SUPPORTED_FIRMWARE_ID);
>  
>  
> +static int modparam_fullmac;
> +module_param_named(fullmac, modparam_fullmac, int, 0444);
> +MODULE_PARM_DESC(fullmac, "Switch the hardware into fullmac mode");
> +
>  static int modparam_bad_frames_preempt;
>  module_param_named(bad_frames_preempt, modparam_bad_frames_preempt, int, 0444);
>  MODULE_PARM_DESC(bad_frames_preempt,
> @@ -4113,6 +4117,9 @@ static void b43_wireless_core_exit(struc
>  		return;
>  	b43_set_status(dev, B43_STAT_UNINIT);
>  
> +	if (modparam_fullmac)
> +		goto ssb_disable;
> +
>  	/* Stop the microcode PSM. */
>  	macctl = b43_read32(dev, B43_MMIO_MACCTL);
>  	macctl &= ~B43_MACCTL_PSM_RUN;
> @@ -4132,6 +4139,7 @@ static void b43_wireless_core_exit(struc
>  		dev->wl->current_beacon = NULL;
>  	}
>  
> +ssb_disable:
>  	ssb_device_disable(dev->dev, 0);
>  	ssb_bus_may_powerdown(dev->dev->bus);
>  }
> @@ -4157,6 +4165,14 @@ static int b43_wireless_core_init(struct
>  		b43_wireless_core_reset(dev, tmp);
>  	}
>  
> +	if (modparam_fullmac) {
> +		b43_write32(dev, B43_MMIO_MACCTL,
> +			    b43_read32(dev, B43_MMIO_MACCTL)
> +			    | B43_MACCTL_FULLMAC);
> +		err = 0;
> +		goto out;
> +	}
> +
>  	/* Reset all data structures. */
>  	setup_struct_wldev_for_init(dev);
>  	phy->ops->prepare_structs(dev);
>
>   
Enabling the fullmac option causes the following oops while trying to 
bring up the interface as an AP using hostapd. This oops does not occur 
if the fullmac option is not set. The stack trace is as follows:

kernel: [  546.416409] Oops: 0000 [#1]
kernel: [  546.416493] last sysfs file: 
/sys/devices/virtual/input/input4/capabilities/sw
kernel: [  546.420045] Process phy1 (pid: 3581, ti=cdb62000 
task=cc5da810 task.ti=cdb62000)
kernel: [  546.420045] Stack:
kernel: [  546.420045]  cf44a00a cd135000 cf446fa9 cd135274 ccd3c720 
cf446ec3 00000000 c0127664
kernel: [  546.420045]  ccd3c720 c0127a29 ccd3c728 c0127ad6 00000000 
cc5da810 c012a29a cdb63fc4
kernel: [  546.420045] Call Trace:
kernel: [  546.420045]  [<cf444ab8>] b43_mac_suspend+0x1e/0xbf [b43]
kernel: [  546.420045]  [<cf44a00a>] b43_gphy_op_pwork_15sec+0xf/0x17 [b43]
kernel: [  546.420045]  [<cf446fa9>] 
b43_periodic_work_handler+0xe6/0x13c [b43]
kernel: [  546.420045]  [<cf446ec3>] b43_periodic_work_handler+0x0/0x13c 
[b43]
kernel: [  546.420045]  [<c0127664>] run_workqueue+0x74/0xec
kernel: [  546.420045]  [<c0127a29>] worker_thread+0x0/0xb8
kernel: [  546.420045]  [<c0127ad6>] worker_thread+0xad/0xb8
kernel: [  546.420045]  [<c012a29a>] autoremove_wake_function+0x0/0x2d
kernel: [  546.420045]  [<c0127a29>] worker_thread+0x0/0xb8
kernel: [  546.420045]  [<c0129eb7>] kthread+0x36/0x5a
kernel: [  546.420045]  [<c0129e81>] kthread+0x0/0x5a
kernel: [  546.420045]  [<c01038e7>] kernel_thread_helper+0x7/0x10
kernel: [  546.420045] Code: 89 1c 24 74 20 39 5f 58 0f 89 73 01 00 00 
89 f0 e8 c8 e9 ff ff 89 f0 31 d2 83 c4 10 5b 5e 5f 5d e9 4c fe ff ff 8b 
47 50 8d 58 f4 <8b> 43 0c c6 44 24 0f 00 83 e8 0c 89 44 24 08 8d 47 50 
89 44 24
kernel: [  546.420045] EIP: [<cf450872>] 
b43_lo_g_maintanance_work+0x55/0x1b3 [b43] SS:ESP 0068:cdb63f68

Relevant dmesg device info is as follows:
[    7.361106] b43-pci-bridge 0000:00:0f.0: enabling device (0000 -> 0002)
[    7.384831] b43-pci-bridge 0000:00:0f.0: PCI INT A -> Link[LNKC] -> 
GSI 10 (level, low) -> IRQ 10
[    9.697536] b43-phy0: Broadcom 4318 WLAN found (core revision 9)
[    9.744147] b43-phy0 debug: Found PHY: Analog 3, Type 2, Revision 7
[    9.744183] b43-phy0 debug: Found Radio: Manuf 0x17F, Version 0x2050, 
Revision 8
[   60.181642] input: b43-phy0 as /devices/virtual/input/input4
[   60.224169] b43 ssb0:0: firmware: requesting b43/ucode5.fw
[   60.309769] b43 ssb0:0: firmware: requesting b43/pcm5.fw
[   60.347726] b43 ssb0:0: firmware: requesting b43/b0g0initvals5.fw
[   60.377113] b43 ssb0:0: firmware: requesting b43/b0g0bsinitvals5.fw
[   60.520049] b43-phy0: Loading firmware version 410.2160 (2007-05-26 
15:32:10)

Regards,

David Ellingsworth


From david at identd.dyndns.org  Wed Apr  1 04:07:51 2009
From: david at identd.dyndns.org (David Ellingsworth)
Date: Tue, 31 Mar 2009 22:07:51 -0400
Subject: [PATCH] b43: Implement fullmac-mode support
In-Reply-To: <49D2C52D.5030207@gmail.com>
References: <200904010101.44380.mb@bu3sch.de> <49D2C52D.5030207@gmail.com>
Message-ID: <49D2CC77.808@gmail.com>

David Ellingsworth wrote:
> Michael Buesch wrote:
>> Recent work on the device firmware discovered a completely new hardware
>> mode for b43 devices.
>> All b43 devices have a bit in the MAC-control register to enable true
>> hardware-fullMAC support. In fullmac mode the MAC and PHY is 
>> completely serviced
>> by the firmware, so no driver support is required anymore.
>>
>> Full hardware MAC support has advantages and disadvantages:
>>
>> PRO:
>> - The b43 driver does support _all_ devices (also 802.11n) in STA and 
>> AP mode.
>> - The driver code is a lot simpler for the fullmac case. (It skips 
>> all of
>>   the software MAC and PHY init).
>> - People finally stop poking me to implement the N-PHY and LP-PHY 
>> code, yay.
>>
>> CON:
>> - Packet injection is not supported in fullmac mode, yet. It's on
>>   the TODO list with deadline 1.4.2010.
>>
>> The feature currently is disabled by default, because it isn't tested 
>> enough.
>> It can be enabled at modprobe time with the "fullmac=1" module 
>> parameter.
>>
>> Signed-off-by: Michael Buesch <mb at bu3sch.de>
>>
>> ---
>>
>> John, please queue this patch for 3.6.31.
>>
>>
>> Index: wireless-testing/drivers/net/wireless/b43/b43.h
>> ===================================================================
>> --- wireless-testing.orig/drivers/net/wireless/b43/b43.h    
>> 2009-04-01 00:00:18.000000000 +0200
>> +++ wireless-testing/drivers/net/wireless/b43/b43.h    2009-04-01 
>> 00:00:20.000000000 +0200
>> @@ -347,6 +347,7 @@ enum {
>>  #define B43_MACCTL_ENABLED        0x00000001    /* MAC Enabled */
>>  #define B43_MACCTL_PSM_RUN        0x00000002    /* Run Microcode */
>>  #define B43_MACCTL_PSM_JMP0        0x00000004    /* Microcode jump 
>> to 0 */
>> +#define B43_MACCTL_FULLMAC        0x00000008    /* Enable hardware 
>> full-MAC support */
>>  #define B43_MACCTL_SHM_ENABLED        0x00000100    /* SHM Enabled */
>>  #define B43_MACCTL_SHM_UPPER        0x00000200    /* SHM Upper */
>>  #define B43_MACCTL_IHR_ENABLED        0x00000400    /* IHR Region 
>> Enabled */
>> Index: wireless-testing/drivers/net/wireless/b43/main.c
>> ===================================================================
>> --- wireless-testing.orig/drivers/net/wireless/b43/main.c    
>> 2009-04-01 00:00:18.000000000 +0200
>> +++ wireless-testing/drivers/net/wireless/b43/main.c    2009-04-01 
>> 00:00:20.000000000 +0200
>> @@ -63,6 +63,10 @@ MODULE_LICENSE("GPL");
>>  MODULE_FIRMWARE(B43_SUPPORTED_FIRMWARE_ID);
>>  
>>  
>> +static int modparam_fullmac;
>> +module_param_named(fullmac, modparam_fullmac, int, 0444);
>> +MODULE_PARM_DESC(fullmac, "Switch the hardware into fullmac mode");
>> +
>>  static int modparam_bad_frames_preempt;
>>  module_param_named(bad_frames_preempt, modparam_bad_frames_preempt, 
>> int, 0444);
>>  MODULE_PARM_DESC(bad_frames_preempt,
>> @@ -4113,6 +4117,9 @@ static void b43_wireless_core_exit(struc
>>          return;
>>      b43_set_status(dev, B43_STAT_UNINIT);
>>  
>> +    if (modparam_fullmac)
>> +        goto ssb_disable;
>> +
>>      /* Stop the microcode PSM. */
>>      macctl = b43_read32(dev, B43_MMIO_MACCTL);
>>      macctl &= ~B43_MACCTL_PSM_RUN;
>> @@ -4132,6 +4139,7 @@ static void b43_wireless_core_exit(struc
>>          dev->wl->current_beacon = NULL;
>>      }
>>  
>> +ssb_disable:
>>      ssb_device_disable(dev->dev, 0);
>>      ssb_bus_may_powerdown(dev->dev->bus);
>>  }
>> @@ -4157,6 +4165,14 @@ static int b43_wireless_core_init(struct
>>          b43_wireless_core_reset(dev, tmp);
>>      }
>>  
>> +    if (modparam_fullmac) {
>> +        b43_write32(dev, B43_MMIO_MACCTL,
>> +                b43_read32(dev, B43_MMIO_MACCTL)
>> +                | B43_MACCTL_FULLMAC);
>> +        err = 0;
>> +        goto out;
>> +    }
>> +
>>      /* Reset all data structures. */
>>      setup_struct_wldev_for_init(dev);
>>      phy->ops->prepare_structs(dev);
>>
>>   
> Michael Buesch wrote:
>> Recent work on the device firmware discovered a completely new hardware
>> mode for b43 devices.
>> All b43 devices have a bit in the MAC-control register to enable true
>> hardware-fullMAC support. In fullmac mode the MAC and PHY is 
>> completely serviced
>> by the firmware, so no driver support is required anymore.
>>
>> Full hardware MAC support has advantages and disadvantages:
>>
>> PRO:
>> - The b43 driver does support _all_ devices (also 802.11n) in STA and 
>> AP mode.
>> - The driver code is a lot simpler for the fullmac case. (It skips 
>> all of
>>   the software MAC and PHY init).
>> - People finally stop poking me to implement the N-PHY and LP-PHY 
>> code, yay.
>>
>> CON:
>> - Packet injection is not supported in fullmac mode, yet. It's on
>>   the TODO list with deadline 1.4.2010.
>>
>> The feature currently is disabled by default, because it isn't tested 
>> enough.
>> It can be enabled at modprobe time with the "fullmac=1" module 
>> parameter.
>>
>> Signed-off-by: Michael Buesch <mb at bu3sch.de>
>>
>> ---
>>
>> John, please queue this patch for 3.6.31.
>>
>>
>> Index: wireless-testing/drivers/net/wireless/b43/b43.h
>> ===================================================================
>> --- wireless-testing.orig/drivers/net/wireless/b43/b43.h    
>> 2009-04-01 00:00:18.000000000 +0200
>> +++ wireless-testing/drivers/net/wireless/b43/b43.h    2009-04-01 
>> 00:00:20.000000000 +0200
>> @@ -347,6 +347,7 @@ enum {
>>  #define B43_MACCTL_ENABLED        0x00000001    /* MAC Enabled */
>>  #define B43_MACCTL_PSM_RUN        0x00000002    /* Run Microcode */
>>  #define B43_MACCTL_PSM_JMP0        0x00000004    /* Microcode jump 
>> to 0 */
>> +#define B43_MACCTL_FULLMAC        0x00000008    /* Enable hardware 
>> full-MAC support */
>>  #define B43_MACCTL_SHM_ENABLED        0x00000100    /* SHM Enabled */
>>  #define B43_MACCTL_SHM_UPPER        0x00000200    /* SHM Upper */
>>  #define B43_MACCTL_IHR_ENABLED        0x00000400    /* IHR Region 
>> Enabled */
>> Index: wireless-testing/drivers/net/wireless/b43/main.c
>> ===================================================================
>> --- wireless-testing.orig/drivers/net/wireless/b43/main.c    
>> 2009-04-01 00:00:18.000000000 +0200
>> +++ wireless-testing/drivers/net/wireless/b43/main.c    2009-04-01 
>> 00:00:20.000000000 +0200
>> @@ -63,6 +63,10 @@ MODULE_LICENSE("GPL");
>>  MODULE_FIRMWARE(B43_SUPPORTED_FIRMWARE_ID);
>>  
>>  
>> +static int modparam_fullmac;
>> +module_param_named(fullmac, modparam_fullmac, int, 0444);
>> +MODULE_PARM_DESC(fullmac, "Switch the hardware into fullmac mode");
>> +
>>  static int modparam_bad_frames_preempt;
>>  module_param_named(bad_frames_preempt, modparam_bad_frames_preempt, 
>> int, 0444);
>>  MODULE_PARM_DESC(bad_frames_preempt,
>> @@ -4113,6 +4117,9 @@ static void b43_wireless_core_exit(struc
>>          return;
>>      b43_set_status(dev, B43_STAT_UNINIT);
>>  
>> +    if (modparam_fullmac)
>> +        goto ssb_disable;
>> +
>>      /* Stop the microcode PSM. */
>>      macctl = b43_read32(dev, B43_MMIO_MACCTL);
>>      macctl &= ~B43_MACCTL_PSM_RUN;
>> @@ -4132,6 +4139,7 @@ static void b43_wireless_core_exit(struc
>>          dev->wl->current_beacon = NULL;
>>      }
>>  
>> +ssb_disable:
>>      ssb_device_disable(dev->dev, 0);
>>      ssb_bus_may_powerdown(dev->dev->bus);
>>  }
>> @@ -4157,6 +4165,14 @@ static int b43_wireless_core_init(struct
>>          b43_wireless_core_reset(dev, tmp);
>>      }
>>  
>> +    if (modparam_fullmac) {
>> +        b43_write32(dev, B43_MMIO_MACCTL,
>> +                b43_read32(dev, B43_MMIO_MACCTL)
>> +                | B43_MACCTL_FULLMAC);
>> +        err = 0;
>> +        goto out;
>> +    }
>> +
>>      /* Reset all data structures. */
>>      setup_struct_wldev_for_init(dev);
>>      phy->ops->prepare_structs(dev);
>>
>>   
> Enabling the fullmac option causes the following oops while trying to 
> bring up the interface as an AP using hostapd. This oops does not 
> occur if the fullmac option is not set. The stack trace is as follows:
>
> kernel: [  546.416409] Oops: 0000 [#1]
> kernel: [  546.416493] last sysfs file: 
> /sys/devices/virtual/input/input4/capabilities/sw
> kernel: [  546.420045] Process phy1 (pid: 3581, ti=cdb62000 
> task=cc5da810 task.ti=cdb62000)
> kernel: [  546.420045] Stack:
> kernel: [  546.420045]  cf44a00a cd135000 cf446fa9 cd135274 ccd3c720 
> cf446ec3 00000000 c0127664
> kernel: [  546.420045]  ccd3c720 c0127a29 ccd3c728 c0127ad6 00000000 
> cc5da810 c012a29a cdb63fc4
> kernel: [  546.420045] Call Trace:
> kernel: [  546.420045]  [<cf444ab8>] b43_mac_suspend+0x1e/0xbf [b43]
> kernel: [  546.420045]  [<cf44a00a>] b43_gphy_op_pwork_15sec+0xf/0x17 
> [b43]
> kernel: [  546.420045]  [<cf446fa9>] 
> b43_periodic_work_handler+0xe6/0x13c [b43]
> kernel: [  546.420045]  [<cf446ec3>] 
> b43_periodic_work_handler+0x0/0x13c [b43]
> kernel: [  546.420045]  [<c0127664>] run_workqueue+0x74/0xec
> kernel: [  546.420045]  [<c0127a29>] worker_thread+0x0/0xb8
> kernel: [  546.420045]  [<c0127ad6>] worker_thread+0xad/0xb8
> kernel: [  546.420045]  [<c012a29a>] autoremove_wake_function+0x0/0x2d
> kernel: [  546.420045]  [<c0127a29>] worker_thread+0x0/0xb8
> kernel: [  546.420045]  [<c0129eb7>] kthread+0x36/0x5a
> kernel: [  546.420045]  [<c0129e81>] kthread+0x0/0x5a
> kernel: [  546.420045]  [<c01038e7>] kernel_thread_helper+0x7/0x10
> kernel: [  546.420045] Code: 89 1c 24 74 20 39 5f 58 0f 89 73 01 00 00 
> 89 f0 e8 c8 e9 ff ff 89 f0 31 d2 83 c4 10 5b 5e 5f 5d e9 4c fe ff ff 
> 8b 47 50 8d 58 f4 <8b> 43 0c c6 44 24 0f 00 83 e8 0c 89 44 24 08 8d 47 
> 50 89 44 24
> kernel: [  546.420045] EIP: [<cf450872>] 
> b43_lo_g_maintanance_work+0x55/0x1b3 [b43] SS:ESP 0068:cdb63f68
>
> Relevant dmesg device info is as follows:
> [    7.361106] b43-pci-bridge 0000:00:0f.0: enabling device (0000 -> 
> 0002)
> [    7.384831] b43-pci-bridge 0000:00:0f.0: PCI INT A -> Link[LNKC] -> 
> GSI 10 (level, low) -> IRQ 10
> [    9.697536] b43-phy0: Broadcom 4318 WLAN found (core revision 9)
> [    9.744147] b43-phy0 debug: Found PHY: Analog 3, Type 2, Revision 7
> [    9.744183] b43-phy0 debug: Found Radio: Manuf 0x17F, Version 
> 0x2050, Revision 8
> [   60.181642] input: b43-phy0 as /devices/virtual/input/input4
> [   60.224169] b43 ssb0:0: firmware: requesting b43/ucode5.fw
> [   60.309769] b43 ssb0:0: firmware: requesting b43/pcm5.fw
> [   60.347726] b43 ssb0:0: firmware: requesting b43/b0g0initvals5.fw
> [   60.377113] b43 ssb0:0: firmware: requesting b43/b0g0bsinitvals5.fw
> [   60.520049] b43-phy0: Loading firmware version 410.2160 (2007-05-26 
> 15:32:10)
>
> Regards,
>
> David Ellingsworth
Hmm.. looks like there was a lot more to this than I last posted. Here's 
the complete output from an oops:

Mar 31 21:46:36 Source kernel: [ 1502.192145] WARNING: at 
drivers/net/wireless/b43/main.c:2571 b43_mac_suspend+0x1e/0xbf [b43]()
Mar 31 21:46:36 Source kernel: [ 1502.192215] Hardware name: 
Mocha/Moorea   
Mar 31 21:46:36 Source kernel: [ 1502.192266] Modules linked in: b43 
aes_i586 aes_generic rfkill_input ppdev lp xt_dscp xt_multiport xt_MARK 
xt_state ipt_REJECT iptable_filter ipt_MASQUERADE ipt_REDIRECT xt_tcpudp 
iptable_nat nfsd exportfs nfs lockd nfs_acl auth_rpcgss sunrpc cls_fw 
sch_sfq sch_htb ipv6 iptable_mangle ip_tables x_tables nf_nat_irc 
nf_conntrack_irc nf_nat_ftp nf_nat nf_conntrack_ipv4 nf_defrag_ipv4 
nf_conntrack_ftp nf_conntrack fuse psmouse arc4 ecb rfkill rng_core 
mac80211 cfg80211 led_class input_polldev snd_via82xx gameport 
snd_ac97_codec ac97_bus snd_pcm_oss snd_mixer_oss snd_pcm snd_page_alloc 
snd_mpu401_uart snd_seq_dummy snd_seq_oss snd_seq_midi snd_rawmidi 
snd_seq_midi_event snd_seq snd_timer snd_seq_device snd pcspkr evdev 
soundcore ssb via686a i2c_viapro i2c_core via_agp agpgart shpchp 
pci_hotplug parport_pc parport container button reiserfs dm_mirror 
dm_region_hash dm_log dm_snapshot dm_mod ide_cd_mod cdrom ide_gd_mod 
ata_generic libata scsi_mod ide_pci_generic uhci_hcd ehci_hcd via82
Mar 31 21:46:36 Source kernel: xxx 8139cp 8139too mii usbcore ide_core 
thermal processor fan thermal_sys [last unloaded: b43]
Mar 31 21:46:36 Source kernel: [ 1502.196263] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.196321] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.196378]  [<c011bb0c>] 
warn_slowpath+0x80/0xb5
Mar 31 21:46:36 Source kernel: [ 1502.196448]  [<c020831d>] 
extract_entropy+0x3e/0x84
Mar 31 21:46:36 Source kernel: [ 1502.197860]  [<c0208430>] 
get_random_bytes+0x12/0x15
Mar 31 21:46:36 Source kernel: [ 1502.197931]  [<c0257a74>] 
rt_cache_flush+0x19/0xae
Mar 31 21:46:36 Source kernel: [ 1502.198009]  [<cf4a1ab8>] 
b43_mac_suspend+0x1e/0xbf [b43]
Mar 31 21:46:36 Source kernel: [ 1502.198090]  [<cf4a3c64>] 
b43_op_config+0x20e/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.198182]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.198264]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.198327]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.198387]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.198442]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.198501]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.198558]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.198614]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.198671]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.198726]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.198782]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.198838]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.198895]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.198951]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.199006]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.199062]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.199119]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.199172] ---[ end trace 
9a27304ff7b46a2c ]---
Mar 31 21:46:36 Source kernel: [ 1502.231154] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.231178] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.231253] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.231378]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.231528]  [<cf4a7525>] 
b43_gphy_op_set_rx_antenna+0x3e/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.231603]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.231733]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.231819]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.231891]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.231963]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.232130]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.232200]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.232259]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.232314]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.232371]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.232435]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.232490]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.232547]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.232605]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.232671]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.232735]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.232791]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.232854]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.232913] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.232925] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.232982] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.233058]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.233138]  [<cf4a7548>] 
b43_gphy_op_set_rx_antenna+0x61/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.233215]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.233299]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.233381]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.233441]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.233500]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.233556]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.233613]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.233673]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.233727]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.233783]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.233838]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.233895]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.233952]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.234007]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.234060]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.234117]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.234174]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.234229]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.234283] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.234292] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.234348] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.234417]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.234495]  [<cf4a7558>] 
b43_gphy_op_set_rx_antenna+0x71/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.234570]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.234651]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.234733]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.234792]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.234853]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.234911]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.234968]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.235025]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.235080]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.235135]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.235190]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.235246]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.235302]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.235357]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.235412]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.235466]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.235523]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.235579]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.235633] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.235642] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.235701] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.235767]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.235845]  [<cf4a7575>] 
b43_gphy_op_set_rx_antenna+0x8e/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.235920]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.236000]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.236111]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.236171]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.236231]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.236286]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.236344]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.236401]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.236457]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.236512]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.236568]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.236623]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.236680]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.236734]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.236789]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.236844]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.236900]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.236956]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.237009] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.237018] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.237075] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.237141]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.237219]  [<cf4a7581>] 
b43_gphy_op_set_rx_antenna+0x9a/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.237293]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.237373]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.237455]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.237515]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.237574]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.237629]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.237687]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.237743]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.237798]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.237854]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.237909]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.237964]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.238021]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.238076]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.238131]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.238186]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.238242]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.238296]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.238351] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.238359] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.238417] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.238483]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.238561]  [<cf4a759d>] 
b43_gphy_op_set_rx_antenna+0xb6/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.238636]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.238716]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.238798]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.238858]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.238917]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.238976]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.239033]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.239090]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.239146]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.239201]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.239257]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.239312]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.239369]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.239423]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.239478]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.239533]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.239589]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.239645]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.239700] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.239708] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.239767] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.239832]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.239909]  [<cf4a75af>] 
b43_gphy_op_set_rx_antenna+0xc8/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.239984]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.240086]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.240169]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.240228]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.240287]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.240345]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.240403]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.240459]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.240515]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.240571]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.240628]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.240684]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.240740]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.240794]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.240851]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.240905]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.240962]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.241018]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.241074] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.241082] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.241139] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.241205]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.241285]  [<cf4a75c1>] 
b43_gphy_op_set_rx_antenna+0xda/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.242717]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.242798]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.242879]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.242938]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.242998]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.243053]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.243111]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.243169]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.243224]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.243279]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.243334]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.243391]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.243447]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.243503]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.243557]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.243613]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.243670]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.243725]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.243778] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.243786] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.243843] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.243909]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.243986]  [<cf4a75cd>] 
b43_gphy_op_set_rx_antenna+0xe6/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.244083]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.244165]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.244246]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.244306]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.244365]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.244420]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.244478]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.244537]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.244592]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.244648]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.244703]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.244759]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.244816]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.244871]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.244925]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.244982]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.245039]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.245094]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.245149] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.245157] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.245214] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.245282]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.245359]  [<cf4a75e4>] 
b43_gphy_op_set_rx_antenna+0xfd/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.245435]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.245516]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.245597]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.245657]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.245716]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.245774]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.245831]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.245887]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.245942]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.245998]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.246053]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.246108]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.246165]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.246220]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.246274]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.246329]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.246386]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.246441]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.246495] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.246503] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.246561] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.246627]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.246704]  [<cf4a75fb>] 
b43_gphy_op_set_rx_antenna+0x114/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.246779]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.246859]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.246941]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.247000]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.247059]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.247114]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.247172]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.247229]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.247284]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.247339]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.247396]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.247453]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.247509]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.247564]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.247619]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.247675]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.247732]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.247787]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.247841] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.247850] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.247907] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.247973]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.248073]  [<cf4a7612>] 
b43_gphy_op_set_rx_antenna+0x12b/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.248149]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.248230]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.248312]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.248371]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.248430]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.248486]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.248544]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.248603]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.248659]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.248715]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.248770]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.248826]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.248882]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.248937]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.248991]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.249047]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.249104]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.249159]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.249213] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.249221] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.249278] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.249346]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.249423]  [<cf4a7629>] 
b43_gphy_op_set_rx_antenna+0x142/0x156 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.249498]  [<cf4a3d15>] 
b43_op_config+0x2bf/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.249579]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.249660]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.249720]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.249780]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.249836]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.249894]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.249951]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.250006]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.250062]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.250117]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.250172]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.250229]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.250284]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.250339]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.250393]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.250450]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.250506]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.644105] b43-phy1 ERROR: MAC 
suspend failed
Mar 31 21:46:36 Source kernel: [ 1502.644236] b43-phy1: Radio turned on 
by software
Mar 31 21:46:36 Source kernel: [ 1502.644324] b43-phy1: The hardware 
RF-kill button still turns the radio physically off. Press the button to 
turn it on.
Mar 31 21:46:36 Source kernel: [ 1502.644496] ------------[ cut here 
]------------
Mar 31 21:46:36 Source kernel: [ 1502.644550] WARNING: at 
drivers/net/wireless/b43/main.c:2550 b43_mac_enable+0x64/0xc4 [b43]()
Mar 31 21:46:36 Source kernel: [ 1502.644622] Hardware name: 
Mocha/Moorea   
Mar 31 21:46:36 Source kernel: [ 1502.644674] Modules linked in: b43 
aes_i586 aes_generic rfkill_input ppdev lp xt_dscp xt_multiport xt_MARK 
xt_state ipt_REJECT iptable_filter ipt_MASQUERADE ipt_REDIRECT xt_tcpudp 
iptable_nat nfsd exportfs nfs lockd nfs_acl auth_rpcgss sunrpc cls_fw 
sch_sfq sch_htb ipv6 iptable_mangle ip_tables x_tables nf_nat_irc 
nf_conntrack_irc nf_nat_ftp nf_nat nf_conntrack_ipv4 nf_defrag_ipv4 
nf_conntrack_ftp nf_conntrack fuse psmouse arc4 ecb rfkill rng_core 
mac80211 cfg80211 led_class input_polldev snd_via82xx gameport 
snd_ac97_codec ac97_bus snd_pcm_oss snd_mixer_oss snd_pcm snd_page_alloc 
snd_mpu401_uart snd_seq_dummy snd_seq_oss snd_seq_midi snd_rawmidi 
snd_seq_midi_event snd_seq snd_timer snd_seq_device snd pcspkr evdev 
soundcore ssb via686a i2c_viapro i2c_core via_agp agpgart shpchp 
pci_hotplug parport_pc parport container button reiserfs dm_mirror 
dm_region_hash dm_log dm_snapshot dm_mod ide_cd_mod cdrom ide_gd_mod 
ata_generic libata scsi_mod ide_pci_generic uhci_hcd ehci_hcd via82
Mar 31 21:46:36 Source kernel: xxx 8139cp 8139too mii usbcore ide_core 
thermal processor fan thermal_sys [last unloaded: b43]
Mar 31 21:46:36 Source kernel: [ 1502.648754] Pid: 3816, comm: hostapd 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.648813] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.648888]  [<c011bb0c>] 
warn_slowpath+0x80/0xb5
Mar 31 21:46:36 Source kernel: [ 1502.648962]  [<c0290020>] 
unix_stream_sendmsg+0x2ae/0x2c7
Mar 31 21:46:36 Source kernel: [ 1502.649043]  [<cf4a213f>] 
b43info+0x5b/0x61 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.649113]  [<cf4a1d4a>] 
b43_mac_enable+0x64/0xc4 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.649189]  [<cf4a3df0>] 
b43_op_config+0x39a/0x3ad [b43]
Mar 31 21:46:36 Source kernel: [ 1502.649322]  [<ceb450e6>] 
ieee80211_hw_config+0x78/0x7e [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.649409]  [<ceb4f46e>] 
ieee80211_open+0x54b/0x643 [mac80211]
Mar 31 21:46:36 Source kernel: [ 1502.649483]  [<c0239296>] 
sys_recvmsg+0x146/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.649555]  [<c0243d76>] 
dev_open+0x67/0xa2
Mar 31 21:46:36 Source kernel: [ 1502.649612]  [<c0243836>] 
dev_change_flags+0xa2/0x153
Mar 31 21:46:36 Source kernel: [ 1502.649679]  [<c027aefa>] 
devinet_ioctl+0x22a/0x530
Mar 31 21:46:36 Source kernel: [ 1502.649736]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.649792]  [<c0237dc6>] 
sock_ioctl+0x1ad/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.649849]  [<c0237c19>] 
sock_ioctl+0x0/0x1d1
Mar 31 21:46:36 Source kernel: [ 1502.649912]  [<c017a17e>] 
vfs_ioctl+0x16/0x4a
Mar 31 21:46:36 Source kernel: [ 1502.649969]  [<c017a6b8>] 
do_vfs_ioctl+0x41f/0x461
Mar 31 21:46:36 Source kernel: [ 1502.650027]  [<c017c409>] d_kill+0x3e/0x43
Mar 31 21:46:36 Source kernel: [ 1502.650083]  [<c017c8cc>] dput+0x19/0xec
Mar 31 21:46:36 Source kernel: [ 1502.650149]  [<c0171475>] 
__fput+0x131/0x154
Mar 31 21:46:36 Source kernel: [ 1502.650211]  [<c0180cb6>] 
mntput_no_expire+0x16/0xa4
Mar 31 21:46:36 Source kernel: [ 1502.650268]  [<c017a73b>] 
sys_ioctl+0x41/0x58
Mar 31 21:46:36 Source kernel: [ 1502.650330]  [<c01032a6>] 
syscall_call+0x7/0xb
Mar 31 21:46:36 Source kernel: [ 1502.650386] ---[ end trace 
9a27304ff7b46a2d ]---
Mar 31 21:46:36 Source kernel: [ 1502.650464] ------------[ cut here 
]------------
Mar 31 21:46:36 Source kernel: [ 1502.650518] WARNING: at 
drivers/net/wireless/b43/main.c:2571 b43_mac_suspend+0x1e/0xbf [b43]()
Mar 31 21:46:36 Source kernel: [ 1502.650589] Hardware name: 
Mocha/Moorea   
Mar 31 21:46:36 Source kernel: [ 1502.650642] Modules linked in: b43 
aes_i586 aes_generic rfkill_input ppdev lp xt_dscp xt_multiport xt_MARK 
xt_state ipt_REJECT iptable_filter ipt_MASQUERADE ipt_REDIRECT xt_tcpudp 
iptable_nat nfsd exportfs nfs lockd nfs_acl auth_rpcgss sunrpc cls_fw 
sch_sfq sch_htb ipv6 iptable_mangle ip_tables x_tables nf_nat_irc 
nf_conntrack_irc nf_nat_ftp nf_nat nf_conntrack_ipv4 nf_defrag_ipv4 
nf_conntrack_ftp nf_conntrack fuse psmouse arc4 ecb rfkill rng_core 
mac80211 cfg80211 led_class input_polldev snd_via82xx gameport 
snd_ac97_codec ac97_bus snd_pcm_oss snd_mixer_oss snd_pcm snd_page_alloc 
snd_mpu401_uart snd_seq_dummy snd_seq_oss snd_seq_midi snd_rawmidi 
snd_seq_midi_event snd_seq snd_timer snd_seq_device snd pcspkr evdev 
soundcore ssb via686a i2c_viapro i2c_core via_agp agpgart shpchp 
pci_hotplug parport_pc parport container button reiserfs dm_mirror 
dm_region_hash dm_log dm_snapshot dm_mod ide_cd_mod cdrom ide_gd_mod 
ata_generi 1502.932619]  [<cf4a3f16>] b43_periodic_work_handler+0x5
Mar 31 21:46:36 Source kernel: /0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.932694]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.932754]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.932809]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.932864]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.932924]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.932984]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.933040]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.933094]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.933149]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.933207] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.933215] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.933271] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.933337]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.933415]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.933489]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.933564]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.933641]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.933715]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.933793]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.933853]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.933908]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.933963]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.934020]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.934077]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.934132]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.934189]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.934243]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.934298] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.934306] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.934362] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.934430]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.935850]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.935925]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.936000]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.936096]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.936171]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.936246]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.936305]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.936361]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.936416]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.936472]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.936530]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.936585]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.936640]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.936694]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.936749] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.936757] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.936814] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.936912]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.936989]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.937063]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.937139]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.937215]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.937289]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.937364]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.937423]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.937479]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.937534]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.937592]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.937652]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.937708]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.937762]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.937816]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.937874] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.937882] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.937938] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.938004]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.938081]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.938155]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.938231]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.938307]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.938381]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.938456]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.938516]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.938574]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.938629]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.938686]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.938744]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.938799]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.938853]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.938908]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.938963] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.938971] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.939027] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.939093]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.939169]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.939244]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.939322]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.939398]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.939472]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.939547]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.939606]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.939661]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.939718]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.939774]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.939831]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.939887]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.939941]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.939996]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.940074] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.940082] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.940139] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.940205]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.940281]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.940356]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.940431]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.940507]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.940582]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.940657]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.940717]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.940773]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.940831]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.940887]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.940945]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.941001]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.941055]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.941110]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.941165] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.941173] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.941229] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.941294]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.941372]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.941449]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.941524]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.941600]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.941674]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.941749]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.941809]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.941865]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.941920]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.941977]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.942037]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.942092]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.942147]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.942202]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.942258] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.942266] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.942322] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.942387]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.942463]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.942538]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.942613]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.942690]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.942764]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.942840]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.942900]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.942957]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.943013]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.943070]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.943128]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.943183]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.943240]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.943294]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.943350] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.943358] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.943415] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.943481]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.943558]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.943633]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.943708]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.943784]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.943862]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.943936]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.943996]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.944072]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.944127]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.944184]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.944241]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.944298]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.944354]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.944408]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.944463] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.944471] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.944528] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.944595]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.944673]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.944749]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.944824]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.944901]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.944976]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.945051]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.945111]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.945166]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.945221]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.945278]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.945338]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.945394]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.945448]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.945502]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.945560] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.945568] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.945624] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.945690]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.945768]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.945843]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.945919]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.945995]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.946068]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.946146]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.946205]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.946261]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.946317]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.946373]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.946431]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.946486]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.946544]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.946598]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.946653] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.946661] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.946717] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.946784]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.946860]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:36 Source kernel: [ 1502.946933]  [<cf4a5747>] 
b43_set_all_gains+0xc8/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.947008]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.947083]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.947159]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.947233]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.947307]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.947369]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.947424]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.947479]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.948893]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.948951]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.949006]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.949060]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.949115]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.949171] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.949179] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:36 Source kernel: [ 1502.949235] Call Trace:
Mar 31 21:46:36 Source kernel: [ 1502.949300]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.949378]  [<cf4a5747>] 
b43_set_all_gains+0xc8/0xfd [b43]
Mar 31 21:46:36 Source kernel: [ 1502.949454]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.949530]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.949606]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:36 Source kernel: [ 1502.949680]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.949755]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:36 Source kernel: [ 1502.949816]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:36 Source kernel: [ 1502.949871]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.949927]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.949984]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:36 Source kernel: [ 1502.950042]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:36 Source kernel: [ 1502.950097]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.950152]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:36 Source kernel: [ 1502.950206]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:36 Source kernel: [ 1502.950261] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:36 Source kernel: [ 1502.950269] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.950325] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.950391]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.950467]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1502.950540]  [<cf4a5759>] 
b43_set_all_gains+0xda/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.950615]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.950691]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.950767]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.950841]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.950915]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.950975]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.951030]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.951085]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.951142]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.951199]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.951254]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.951309]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.951363]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.951419] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.951427] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.951483] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.951549]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.951625]  [<cf4a5759>] 
b43_set_all_gains+0xda/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.951699]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.951774]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.951851]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.951927]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.952002]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.952080]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.952138]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.952193]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.952249]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.952306]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.952363]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.952418]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.952473]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.952528] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.952536] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.952593] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.952661]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.952737]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1502.952810]  [<cf4a576b>] 
b43_set_all_gains+0xec/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.952885]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.952960]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.953035]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.953109]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.953184]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.953245]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.953301]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.953355]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.953412]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.953471]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.953527]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.953581]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.953636]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.953692] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.953700] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.953756] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.953821]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.953901]  [<cf4a576b>] 
b43_set_all_gains+0xec/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.953975]  [<cf4b0018>] 
b43_dma_tx+0x5c8/0x735 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.954050]  [<cf4a6247>] 
b43_calc_nrssi_slope+0x956/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.954126]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.954200]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.954277]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.954337]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.954393]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.954449]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.954506]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.954563]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.954620]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.954676]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.954730]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.954898] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.954907] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.954963] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.955029]  [<cf4a4dd4>] 
b43_radio_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.955109]  [<cf4a4e41>] 
b43_radio_mask+0x11/0x22 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.955185]  [<cf4a6258>] 
b43_calc_nrssi_slope+0x967/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.955263]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.955337]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.955411]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.955472]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.955530]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.955585]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.955641]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.955700]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.955757]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.955811]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.955865]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.955922] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.955930] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.955987] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.956076]  [<cf4a4d97>] 
b43_radio_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.956156]  [<cf4a6258>] 
b43_calc_nrssi_slope+0x967/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.956232]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.956306]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.956381]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.956440]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.956496]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.956552]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.956608]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.956665]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.956721]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.956776]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.956830]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.956886] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.956894] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.956951] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.957017]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.957093]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1502.957172]  [<cf4a6272>] 
b43_calc_nrssi_slope+0x981/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.957248]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.957323]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.957398]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.957458]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.957514]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.957569]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.957626]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.957684]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.957740]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.957794]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.957851]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.957907] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.957915] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.957972] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.958038]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.958117]  [<cf4a6272>] 
b43_calc_nrssi_slope+0x981/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.958192]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.958266]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.958343]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.958403]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.958458]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.958514]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.958570]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.958628]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.958684]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.958742]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.958796]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.958851] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.958859] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.958916] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.958982]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.959058]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1502.959134]  [<cf4a6285>] 
b43_calc_nrssi_slope+0x994/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.959209]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.959284]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.959361]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.959420]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.959475]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.959534]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.959591]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.959648]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.959703]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.959758]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.959813]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.959869] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.959877] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.959933] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.960000]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.960099]  [<cf4a6285>] 
b43_calc_nrssi_slope+0x994/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.960176]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.960252]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.960326]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.960386]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.960441]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.960497]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.961908]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.961965]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.962021]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.962077]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.962132]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.962186] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.962195] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.962251] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.962316]  [<cf4a4dd4>] 
b43_radio_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.962392]  [<cf4a4e1f>] 
b43_radio_set+0x11/0x22 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.962468]  [<cf4a6298>] 
b43_calc_nrssi_slope+0x9a7/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.962543]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.962617]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.962694]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.962753]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.962810]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.962864]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.962921]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.962979]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.963034]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.963092]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.963147]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.963203] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.963211] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.963268] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.963333]  [<cf4a4d97>] 
b43_radio_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.963414]  [<cf4a6298>] 
b43_calc_nrssi_slope+0x9a7/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.963491]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.963565]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.963640]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.963700]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.963757]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.963812]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.963869]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.963926]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.963982]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.964057]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.964113]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.964190] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.964198] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.964255] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.964320]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.964398]  [<cf4a62ae>] 
b43_calc_nrssi_slope+0x9bd/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.964474]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.964548]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.964622]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.964682]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.964736]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.964791]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.964848]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.964906]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.964961]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.965016]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.965071]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.965127] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.965135] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.965191] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.965257]  [<cf4a4dd4>] 
b43_radio_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.965332]  [<cf4a4e41>] 
b43_radio_mask+0x11/0x22 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.965408]  [<cf4a62d2>] 
b43_calc_nrssi_slope+0x9e1/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.965484]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.965558]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.965632]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.965691]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.965747]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.965802]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.965859]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.965916]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.965971]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.966026]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.966081]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.966140] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.966148] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.966205] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.966271]  [<cf4a4d97>] 
b43_radio_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.966352]  [<cf4a62d2>] 
b43_calc_nrssi_slope+0x9e1/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.966428]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.966503]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.966577]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.966637]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.966692]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.966747]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.966805]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.966862]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.966918]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.966972]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.967029]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.967084] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.967092] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.967149] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.967215]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.967291]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1502.967368]  [<cf4a62eb>] 
b43_calc_nrssi_slope+0x9fa/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.967444]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.967521]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.967597]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.967656]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.967712]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.967767]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.967826]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.967886]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.967941]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.967996]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.968070]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.968126] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.968134] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.968190] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.968256]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.968335]  [<cf4a62eb>] 
b43_calc_nrssi_slope+0x9fa/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.968413]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.968487]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.968562]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.968623]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.968678]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.968733]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.968790]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.968847]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.968906]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.968960]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.969014]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.969070] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.969079] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.969136] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.969202]  [<cf4a4dd4>] 
b43_radio_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.969279]  [<cf4a4e1f>] 
b43_radio_set+0x11/0x22 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.969355]  [<cf4a631d>] 
b43_calc_nrssi_slope+0xa2c/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.969431]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.969505]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.969580]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.969640]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.969697]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.969753]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.969810]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.969867]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.969923]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.969978]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.970032]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.970088] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.970097] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.970154] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.970222]  [<cf4a4d97>] 
b43_radio_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.970301]  [<cf4a631d>] 
b43_calc_nrssi_slope+0xa2c/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.970377]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.970452]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.970526]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.970588]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.970643]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.970698]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.970755]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.970813]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.970868]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.970922]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.970977]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.971031] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.971039] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.971096] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.971162]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.971243]  [<cf4a632e>] 
b43_calc_nrssi_slope+0xa3d/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.971319]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.971395]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.971470]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.971529]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.971585]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.971640]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.971700]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.971759]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.971815]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.971870]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.971924]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.971981] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.971989] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.972066] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.972132]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.972208]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1502.972285]  [<cf4a6347>] 
b43_calc_nrssi_slope+0xa56/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.972361]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.972435]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.972512]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.972572]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.972628]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.972685]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.972741]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.972799]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.972855]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.972910]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.972966]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.973023] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.973031] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.973087] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.973153]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.973231]  [<cf4a6347>] 
b43_calc_nrssi_slope+0xa56/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.973307]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.974719]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.974795]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.974855]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.974910]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.974969]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.975026]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.975084]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.975139]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.975194]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.975248]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.975303] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.975311] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.975367] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.975433]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.975510]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1502.975587]  [<cf4a635a>] 
b43_calc_nrssi_slope+0xa69/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.975663]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.975737]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.975813]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.975872]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.975927]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.975986]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.976062]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.976121]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.976179]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.976234]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.976289]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.976344] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.976353] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.976409] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.976476]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.976554]  [<cf4a635a>] 
b43_calc_nrssi_slope+0xa69/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.976629]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.976705]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.976780]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.976840]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.976896]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.976951]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.977008]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.977067]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.977123]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.977178]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.977232]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.977289] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.977297] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.977354] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.977420]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.977498]  [<cf4a47e7>] 
b43_ofdmtab_write16+0x37/0x5b [b43]
Mar 31 21:46:37 Source kernel: [ 1502.977573]  [<cf4a56d2>] 
b43_set_all_gains+0x53/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.977646]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.977720]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.977796]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.977870]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.977945]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.978004]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.978060]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.978116]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.978172]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.978230]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.978285]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.978339]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.978394]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.978449] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.978457] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.978513] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.978579]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.978656]  [<cf4a56d2>] 
b43_set_all_gains+0x53/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.978729]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.978803]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.978878]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.978953]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.979029]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.979089]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.979144]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.979198]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.979255]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.979312]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.979368]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.979422]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.979477]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.979531] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.979539] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.979596] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.979661]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.979738]  [<cf4a56e1>] 
b43_set_all_gains+0x62/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.979811]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.979884]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.979960]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.980054]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.980130]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.980189]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.980244]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.980299]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.980356]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.980413]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.980469]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.980524]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.980578]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.980633] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.980641] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.980697] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.980763]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.980839]  [<cf4a56f0>] 
b43_set_all_gains+0x71/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.980912]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.980987]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.981063]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.981137]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.981212]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.981272]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.981327]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.981385]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.981442]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.981500]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.981555]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.981611]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.981665]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.981720] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.981728] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.981785] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.981851]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.981927]  [<cf4a56ff>] 
b43_set_all_gains+0x80/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.982000]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.982073]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.982148]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.982224]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.982299]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.982358]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.982414]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.982468]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.982525]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.982583]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.982639]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.982694]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.982752]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.982806] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.982814] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.982871] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.982936]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.983012]  [<cf4a47e7>] 
b43_ofdmtab_write16+0x37/0x5b [b43]
Mar 31 21:46:37 Source kernel: [ 1502.983086]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.983159]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.983233]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.983309]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.983383]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.983458]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.983517]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.983576]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.983631]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.983687]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.983745]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.983801]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.983855]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.983909]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.983964] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.983973] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.984049] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.984115]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.984192]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.984266]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.984339]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.984414]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.984488]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.984563]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.984625]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.984681]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.984736]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.984792]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.984850]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.984906]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.984960]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.985016]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.985071] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.985079] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.985135] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.985200]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.985278]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.985352]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.985425]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.985501]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.985577]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.985652]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.985712]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.985769]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.985825]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.985882]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.985939]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.985995]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.986049]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.986104]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.986159] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.986167] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.987571] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.987636]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.987714]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.987788]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.987861]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.987936]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.988011]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.988107]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.988167]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.988223]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.988280]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.988337]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.988394]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.988450]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.988505]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.988560]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.988615] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.988623] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.988680] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.988746]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.988823]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.988898]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.988972]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.989048]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.989122]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.989198]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.989258]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.989313]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.989369]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.989425]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.989484]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.989540]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.989594]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.989649]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.989707] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.989715] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.989771] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.989837]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.989916]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.989989]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.990063]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.990138]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.990213]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.990288]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.990348]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.990406]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.990461]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.990518]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.990575]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.990630]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.990686]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.990741]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.990796] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.990804] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.990861] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.990929]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.991005]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.991079]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.991153]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.991228]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.991303]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.991378]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.991438]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.991494]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.991549]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.991606]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.991663]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.991719]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.991774]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.991829]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.991884] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.991892] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.991948] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.992013]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.992110]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.992184]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.992257]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.992332]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.992406]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.992481]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.992540]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.992598]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.992653]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.992709]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.992767]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.992823]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.992877]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.992931]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.992986] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.992994] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.993051] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.993117]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.993193]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.993266]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.993339]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.993414]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.993489]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.993563]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.993623]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.993678]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.993733]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.993790]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.993847]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.993903]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.993957]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.994011]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.994067] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.994076] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.994132] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.994198]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.994275]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.994349]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.994422]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.994498]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.994572]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.994648]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.994708]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.994763]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.994820]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.994876]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.994933]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.994989]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.995044]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.995099]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.995155] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.995163] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.995219] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.995285]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.995361]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.995436]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.995508]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.995584]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.995660]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.995735]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.995795]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.995851]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.995906]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.995965]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.996045]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.996102]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.996157]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.996212]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.996267] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.996275] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.996331] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.996397]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.996474]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.996547]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.996620]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.996696]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.996773]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.996848]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.996908]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.996963]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.997018]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.997078]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.997138]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.997194]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.997248]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.997302]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.997360] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.997369] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.997425] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.997490]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.997567]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.997640]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.997714]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.997791]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.997865]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.997940]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.997999]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.998055]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.998110]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.998166]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1502.998224]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1502.998281]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.998336]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1502.998391]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1502.998446] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1502.998454] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1502.998510] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1502.998578]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.998654]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1502.998727]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.998801]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.998876]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1502.998950]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.999027]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1502.999086]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1502.999141]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.000568]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.000625]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.000682]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.000738]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.000793]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.000847]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.000902] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.000911] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.000967] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.001033]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.001111]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1503.001184]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.001258]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.001333]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.001410]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.001485]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.001544]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.001599]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.001654]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.001713]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.001770]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.001825]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.001880]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.001936]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.001991] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.001999] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.002059] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.002125]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.002201]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1503.002274]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.002347]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.002423]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.002497]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.002572]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.002633]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.002689]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.002744]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.002800]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.002857]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.002913]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.002967]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.003022]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.003077] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.003085] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.003141] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.003207]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.003285]  [<cf4a5714>] 
b43_set_all_gains+0x95/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1503.003359]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.003432]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.003509]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.003583]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.003658]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.003717]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.003775]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.003829]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.003886]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.003944]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.003999]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.004074]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.004130]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.004188] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.004196] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.004253] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.004318]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.004395]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1503.004469]  [<cf4a5747>] 
b43_set_all_gains+0xc8/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1503.004542]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.004616]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.004691]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.004766]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.004842]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.004901]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.004957]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.005013]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.005069]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.005126]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.005181]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.005239]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.005293]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.005349] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.005357] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.005413] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.005479]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.005557]  [<cf4a5747>] 
b43_set_all_gains+0xc8/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1503.005632]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.005706]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.005781]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.005857]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.005932]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.005991]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.006046]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.006102]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.006160]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.006217]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.006272]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.006327]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.006382]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.006437] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.006445] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.006503] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.006569]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.006645]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1503.006718]  [<cf4a5759>] 
b43_set_all_gains+0xda/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1503.006791]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.006864]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.006940]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.007014]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.007090]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.007150]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.007207]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.007261]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.007318]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.007375]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.007430]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.007484]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.007539]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.007595] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.007603] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.007660] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.007726]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.007802]  [<cf4a5759>] 
b43_set_all_gains+0xda/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1503.007875]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.007948]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.008045]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.008120]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.008195]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.008254]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.008309]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.008364]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.008420]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.008478]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.008533]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.008587]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.008641]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.008696] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.008704] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.008761] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.008827]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.008903]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1503.008976]  [<cf4a576b>] 
b43_set_all_gains+0xec/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1503.009050]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.009122]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.009198]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.009272]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.009349]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.009409]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.009464]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.009520]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.009576]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.009634]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.009690]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.009747]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.009802]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.009857] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.009865] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.009922] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.009987]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.010063]  [<cf4a576b>] 
b43_set_all_gains+0xec/0xfd [b43]
Mar 31 21:46:37 Source kernel: [ 1503.010136]  [<cf4a4cc0>] 
b43_phy_write+0x3c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.010209]  [<cf4a636c>] 
b43_calc_nrssi_slope+0xa7b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.010284]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.010360]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.010434]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.010493]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.010548]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.010605]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.010661]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.010718]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.010774]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.010828]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.010883]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.011050] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.011058] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.011114] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.011181]  [<cf4a4d97>] 
b43_radio_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.011260]  [<cf4a63be>] 
b43_calc_nrssi_slope+0xacd/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.011336]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.011412]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.011487]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.011547]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.011602]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.011657]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.011716]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.011774]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.011829]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.011884]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.011939]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.011994] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.012002] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.012080] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.012148]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.013567]  [<cf4a63cf>] 
b43_calc_nrssi_slope+0xade/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.013643]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.013717]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.013795]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.013854]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.013910]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.013964]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.014022]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.014079]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.014134]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.014191]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.014246]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.014301] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.014309] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.014365] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.014433]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.014510]  [<cf4a63e0>] 
b43_calc_nrssi_slope+0xaef/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.014586]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.014661]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.014737]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.014798]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.014855]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.014910]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.014966]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.015024]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.015082]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.015137]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.015191]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.015246] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.015256] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.015312] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.015378]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.015456]  [<cf4a63f1>] 
b43_calc_nrssi_slope+0xb00/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.015531]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.015606]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.015681]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.015741]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.015796]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.015851]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.015910]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.015969]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.016045]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.016102]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.016156]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.016230] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.016240] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.016296] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.016362]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.016439]  [<cf4a6407>] 
b43_calc_nrssi_slope+0xb16/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.016514]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.016590]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.016665]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.016725]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.016780]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.016835]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.016894]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.016952]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.017008]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.017063]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.017118]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.017176] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.017184] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.017241] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.017307]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.017383]  [<cf4a647c>] 
b43_calc_nrssi_slope+0xb8b/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.017459]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.017533]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.017609]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.017669]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.017725]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.017783]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.017839]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.017896]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.017953]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.018007]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.018062]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.018116] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.018124] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.018181] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.018246]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.018322]  [<cf4a648d>] 
b43_calc_nrssi_slope+0xb9c/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.018400]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.018474]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.018548]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.018609]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.018664]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.018719]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.018776]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.018833]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.018891]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.018945]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.019000]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.019054] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.019063] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.019119] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.019185]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.019263]  [<cf4a649e>] 
b43_calc_nrssi_slope+0xbad/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.019339]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.019415]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.019490]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.019549]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.019605]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.019660]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.019720]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.019777]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.019832]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.019887]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.019943]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.019997] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.020028] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.020085] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.020151]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.020228]  [<cf4a64af>] 
b43_calc_nrssi_slope+0xbbe/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.020303]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.020377]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.020452]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.020513]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.020569]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.020623]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.020680]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.020738]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.020794]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.020848]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.020902]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.020959] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.020967] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.021023] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.021089]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.021166]  [<cf4a4d5a>] 
b43_phy_mask+0x11/0x22 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.021238]  [<cf4a64c6>] 
b43_calc_nrssi_slope+0xbd5/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.021313]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.021390]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.021466]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.021525]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.021581]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.021635]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.021692]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.021749]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.021805]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.021860]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.021914]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.021969] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.021977] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.022034] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.022100]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.022177]  [<cf4a64c6>] 
b43_calc_nrssi_slope+0xbd5/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.022252]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.022327]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.022402]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.022461]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.022516]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.022571]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.022628]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.022685]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.022740]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.022794]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.022849]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.022903] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.022911] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.022968] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.023033]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.023109]  [<cf4a4d5a>] 
b43_phy_mask+0x11/0x22 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.023181]  [<cf4a64d7>] 
b43_calc_nrssi_slope+0xbe6/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.023258]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.023332]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.023407]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.023468]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.023523]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.023595]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.023653]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.023710]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.023766]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.023820]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.023875]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.023930] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.023939] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.023995] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.024082]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.024159]  [<cf4a64d7>] 
b43_calc_nrssi_slope+0xbe6/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.024234]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.024310]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.024385]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.024446]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.024501]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.024556]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.024615]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.024674]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.024731]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.024785]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.024839]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.024896] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.024904] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.026322] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.026388]  [<cf4a4d97>] 
b43_radio_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.026465]  [<cf4a64e8>] 
b43_calc_nrssi_slope+0xbf7/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.026541]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.026615]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.026691]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.026750]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.026806]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.026864]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.026920]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.026977]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.027033]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.027089]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.027144]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.027199] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.027207] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.027264] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.027330]  [<cf4a4d97>] 
b43_radio_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.027407]  [<cf4a64f9>] 
b43_calc_nrssi_slope+0xc08/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.027484]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.027558]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.027633]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.027693]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.027751]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.027806]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.027862]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.027919]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.027977]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.028051]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.028107]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.028163] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.028171] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.028229] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.028295]  [<cf4a4d97>] 
b43_radio_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.028373]  [<cf4a650a>] 
b43_calc_nrssi_slope+0xc19/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.028449]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.028524]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.028599]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.028659]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.028715]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.028771]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.028828]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.028885]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.028941]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.028996]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.029050]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.029105] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.029113] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.029170] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.029240]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.029318]  [<cf4a654e>] 
b43_calc_nrssi_slope+0xc5d/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.029394]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.029468]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.029542]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.029602]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.029661]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.029715]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.029772]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.029829]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.029885]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.029939]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.029994]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.030049] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.030058] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.030114] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.030183]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.030260]  [<cf4a655f>] 
b43_calc_nrssi_slope+0xc6e/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.030337]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.030412]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.030486]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.030548]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.030604]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.030659]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.030715]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.030773]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.030829]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.030883]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.030938]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.030993] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.031001] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.031058] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.031127]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.031206]  [<cf4a6570>] 
b43_calc_nrssi_slope+0xc7f/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.031282]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.031358]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.031433]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.031492]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.031547]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.031602]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.031662]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.031721]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.031776]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.031830]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.031884]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.031939] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.031947] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.032026] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.032097]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.032176]  [<cf4a6581>] 
b43_calc_nrssi_slope+0xc90/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.032253]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.032327]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.032401]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.032461]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.032519]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.032574]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.032630]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.032687]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.032744]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.032798]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.032853]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.032911] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.032919] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.032975] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.033043]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.033119]  [<cf4a4d38>] 
b43_phy_set+0x11/0x22 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.033194]  [<cf4a659d>] 
b43_calc_nrssi_slope+0xcac/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.033269]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.033344]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.033419]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.033478]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.033536]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.033591]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.033647]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.033705]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.033760]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.033814]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.033869]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.033925] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.033933] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.033989] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.034060]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.034138]  [<cf4a659d>] 
b43_calc_nrssi_slope+0xcac/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.034214]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.034288]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.034363]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.034424]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.034479]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.034535]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.034591]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.034648]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.034705]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.034759]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.034813]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.034869] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.034877] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.034933] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.034999]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.035078]  [<cf4a47e7>] 
b43_ofdmtab_write16+0x37/0x5b [b43]
Mar 31 21:46:37 Source kernel: [ 1503.035153]  [<cf4a57dc>] 
b43_set_original_gains+0x60/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.035230]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.035306]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.035381]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.035457]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.035517]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.035572]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.035630]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.035686]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.035743]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.035798]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.035853]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.035908]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.035962] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.035970] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.036046] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.036113]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.036190]  [<cf4a57dc>] 
b43_set_original_gains+0x60/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.036269]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.036344]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.036418]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.036494]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.036553]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.036608]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.036663]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.036719]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.036777]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.036832]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.036886]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.036941]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.036996] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.037004] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.037060] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.037126]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.037201]  [<cf4a57dc>] 
b43_set_original_gains+0x60/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.037278]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.037353]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.037428]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.037502]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.037562]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.037617]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.037672]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.037730]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.039130]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.039187]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.039242]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.039296]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.039353] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.039361] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.039417] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.039484]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.039560]  [<cf4a57dc>] 
b43_set_original_gains+0x60/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.039638]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.039713]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.039787]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.039861]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.039920]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.039978]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.040053]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.040113]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.040171]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.040227]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.040281]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.040336]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.040393] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.040402] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.040458] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.040524]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.040601]  [<cf4a57dc>] 
b43_set_original_gains+0x60/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.040679]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.040754]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.040828]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.040902]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.040961]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.041016]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.041072]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.041129]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.041189]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.041244]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.041299]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.041354]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.041412] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.041420] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.041476] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.041542]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.041621]  [<cf4a47e7>] 
b43_ofdmtab_write16+0x37/0x5b [b43]
Mar 31 21:46:37 Source kernel: [ 1503.041695]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.041773]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.041848]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.041922]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.041999]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.042059]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.042115]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.042173]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.042229]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.042286]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.042342]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.042398]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.042453]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.042508] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.042516] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.042572] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.042638]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.042714]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.042794]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.042870]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.042944]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.043018]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.043078]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.043133]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.043190]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.043246]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.043304]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.043359]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.043414]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.043468]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.043523] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.043531] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.043588] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.043653]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.043730]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.043810]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.043885]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.043959]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.044053]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.044114]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.044171]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.044226]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.044282]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.044340]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.044399]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.044454]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.044509]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.044564] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.044573] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.044629] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.044694]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.044770]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.044848]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.044924]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.044998]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.045073]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.045133]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.045192]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.045247]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.045336]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.045393]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.045449]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.045503]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.045557]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.045612] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.045620] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.045677] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.045745]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.045822]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.045899]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.045974]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.046048]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.046125]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.046184]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.046240]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.046295]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.046352]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.046410]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.046465]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.046522]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.046576]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.046631] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.046639] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.046695] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.046762]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.046839]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.046916]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.046992]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.047065]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.047142]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.047202]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.047257]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.047315]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.047372]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.047429]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.047484]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.047541]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.047595]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.047650] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.047658] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.047714] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.047780]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.047856]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.047934]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.048010]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.048104]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.048180]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.048241]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.048297]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.048352]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.048408]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.048466]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.048521]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.048576]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.048631]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.048686] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.048694] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.048750] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.048815]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.048893]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.048971]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.049046]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.049120]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.049194]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.049256]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.049311]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.049366]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.049423]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.049480]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.049535]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.049589]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.049644]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.049701] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.049709] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.049765] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.049831]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.049910]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.049988]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.050063]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.050137]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.050211]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.050270]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.050326]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.050381]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.050437]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.050495]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.050551]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.050606]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.051900]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.051955] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.051963] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.052039] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.052106]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.052182]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.052261]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.052337]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.052411]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.052486]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.052545]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.052600]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.052657]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.052715]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.052773]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.052828]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.052882]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.052939]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.052994] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.053002] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.053058] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.053124]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.053201]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.053278]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.053354]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.053429]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.053504]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.053564]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.053620]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.053675]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.053734]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.053793]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.053848]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.053903]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.053958]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.054013] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.054021] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.054080] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.054145]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.054222]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.054300]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.054376]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.054450]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.054524]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.054584]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.054639]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.054694]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.054751]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.054810]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.054866]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.054920]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.054974]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.055031] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.055039] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.055096] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.055162]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.055238]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.055315]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.055391]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.055465]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.055539]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.055599]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.055654]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.055709]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.055767]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.055826]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.055882]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.055936]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.055991]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.056068] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.056077] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.056133] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.056199]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.056276]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.056354]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.056430]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.056504]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.056579]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.056639]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.056694]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.056752]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.056808]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.056866]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.056921]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.056976]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.057031]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.057085] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.057093] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.057150] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.057215]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.057291]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.057369]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.057444]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.057518]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.057594]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.057654]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.057709]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.057767]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.057823]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.057881]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.057936]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.057992]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.058046]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.058100] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.058109] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.058165] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.058231]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.058307]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.058384]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.058460]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.058534]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.058610]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.058669]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.058725]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.058783]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.058840]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.058897]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.058952]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.059007]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.059061]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.059117] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.059125] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.059181] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.059247]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.059323]  [<cf4a57fc>] 
b43_set_original_gains+0x80/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.059402]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.059477]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.059551]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.059626]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.059685]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.059740]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.059798]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.059855]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.059912]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.059968]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.060044]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.060099]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.060153] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.060161] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.060217] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.060283]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.060362]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1503.060435]  [<cf4a581b>] 
b43_set_original_gains+0x9f/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.060513]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.060589]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.060663]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.060739]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.060799]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.060854]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.060912]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.060969]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.061026]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.061082]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.061137]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.061191]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.061248] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.061256] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.061312] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.061378]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.061455]  [<cf4a581b>] 
b43_set_original_gains+0x9f/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.061534]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.061609]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.061684]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.061758]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.061818]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.061874]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.061929]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.061986]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.062043]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.062099]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.062154]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.062208]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.062262] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.062271] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.062327] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.062392]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.062468]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1503.062541]  [<cf4a5831>] 
b43_set_original_gains+0xb5/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.062618]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.062693]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.062769]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.062843]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.062903]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.062958]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.063013]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.063071]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.063129]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.063185]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.063239]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.063294]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.063350] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.063358] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.064736] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.064804]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.064881]  [<cf4a5831>] 
b43_set_original_gains+0xb5/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.064960]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.065036]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.065111]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.065186]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.065245]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.065301]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.065356]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.065412]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.065470]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.065525]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.065580]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.065634]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.065689] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.065697] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.065753] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.065819]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.065895]  [<cf4a4d13>] 
b43_phy_maskset+0x16/0x2a [b43]
Mar 31 21:46:37 Source kernel: [ 1503.065969]  [<cf4a5847>] 
b43_set_original_gains+0xcb/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.066047]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.066122]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.066199]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.066274]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.066334]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.066390]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.066446]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.066503]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.066562]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.066617]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.066672]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.066727]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.066785] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.066793] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.066850] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.066916]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.066992]  [<cf4a5847>] 
b43_set_original_gains+0xcb/0xd9 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.067070]  [<cf4a65a4>] 
b43_calc_nrssi_slope+0xcb3/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.067146]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.067220]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.067294]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.067354]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.067409]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.067464]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.067521]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.067581]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.067637]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.067691]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.067745]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.067914] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.067923] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.067978] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.068064]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.068143]  [<cf4a4d38>] 
b43_phy_set+0x11/0x22 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.068218]  [<cf4a65b5>] 
b43_calc_nrssi_slope+0xcc4/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.068295]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.068369]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.068443]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.068504]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.068559]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.068615]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.068671]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.068728]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.068784]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.068838]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.068893]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.068949] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.068957] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.069013] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.069083]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.069161]  [<cf4a65b5>] 
b43_calc_nrssi_slope+0xcc4/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.069237]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.069313]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.069388]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.069447]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.069502]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.069557]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.069616]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.069675]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.069731]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.069785]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.069840]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.069896] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.069904] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.069961] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.070031]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.070110]  [<cf4a65cc>] 
b43_calc_nrssi_slope+0xcdb/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.070186]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.070262]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.070338]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.070397]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.070452]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.070507]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.070567]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.070624]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.070680]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.070734]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.070791]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.070847] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.070855] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.070914] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.070982]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.071063]  [<cf4a65dd>] 
b43_calc_nrssi_slope+0xcec/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.071139]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.071216]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.071291]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.071351]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.071406]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.071461]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.071519]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.071576]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.071632]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.071687]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.071742]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.071797] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.071805] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.071864] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.071933]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.072011]  [<cf4a65ee>] 
b43_calc_nrssi_slope+0xcfd/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.072107]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.072182]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.072257]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.072317]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.072373]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.072428]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.072484]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.072541]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.072600]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.072655]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.072709]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.072764] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.072774] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.072830] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.072901]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.072979]  [<cf4a65ff>] 
b43_calc_nrssi_slope+0xd0e/0xd71 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.073054]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.073128]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.073203]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.073264]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.073319]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.073374]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.073430]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.073489]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.073545]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.073599]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.073653]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.073716] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.073724] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.073780] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.073846]  [<cf4a4ced>] 
b43_phy_read+0x28/0x38 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.073922]  [<cf4a55d8>] 
b43_calc_nrssi_threshold+0x10b/0x149 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.073997]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.074073]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.074147]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.074206]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.074262]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.074317]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.074374]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.074431]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.074487]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.074541]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.074599]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.074655] b43-phy1 debug: PHY/RADIO 
register access with enabled MAC.
Mar 31 21:46:37 Source kernel: [ 1503.074663] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.074719] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.074784]  [<cf4a4cb0>] 
b43_phy_write+0x2c/0x41 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.074861]  [<cf4a6684>] 
b43_gphy_op_pwork_60sec+0x22/0x65 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.074936]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.075010]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.075071]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.075127]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.075182]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.075238]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.075298]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.075353]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.075408]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.075462]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.260151] ------------[ cut here 
]------------
Mar 31 21:46:37 Source kernel: [ 1503.260221] WARNING: at 
drivers/net/wireless/b43/main.c:2550 b43_mac_enable+0x64/0xc4 [b43]()
Mar 31 21:46:37 Source kernel: [ 1503.260292] Hardware name: 
Mocha/Moorea   
Mar 31 21:46:37 Source kernel: [ 1503.260344] Modules linked in: b43 
aes_i586 aes_generic rfkill_input ppdev lp xt_dscp xt_multiport xt_MARK 
xt_state ipt_REJECT iptable_filter ipt_MASQUERADE ipt_REDIRECT xt_tcpudp 
iptable_nat nfsd exportfs nfs lockd nfs_acl auth_rpcgss sunrpc cls_fw 
sch_sfq sch_htb ipv6 iptable_mangle ip_tables x_tables nf_nat_irc 
nf_conntrack_irc nf_nat_ftp nf_nat nf_conntrack_ipv4 nf_defrag_ipv4 
nf_conntrack_ftp nf_conntrack fuse psmouse arc4 ecb rfkill rng_core 
mac80211 cfg80211 led_class input_polldev snd_via82xx gameport 
snd_ac97_codec ac97_bus snd_pcm_oss snd_mixer_oss snd_pcm snd_page_alloc 
snd_mpu401_uart snd_seq_dummy snd_seq_oss snd_seq_midi snd_rawmidi 
snd_seq_midi_event snd_seq snd_timer snd_seq_device snd pcspkr evdev 
soundcore ssb via686a i2c_viapro i2c_core via_agp agpgart shpchp 
pci_hotplug parport_pc parport container button reiserfs dm_mirror 
dm_region_hash dm_log dm_snapshot dm_mod ide_cd_mod cdrom ide_gd_mod 
ata_generic libata scsi_mod ide_pci_generic uhci_hcd ehci_hcd via82
Mar 31 21:46:37 Source kernel: xxx 8139cp 8139too mii usbcore ide_core 
thermal processor fan thermal_sys [last unloaded: b43]
Mar 31 21:46:37 Source kernel: [ 1503.265719] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.265776] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.265848]  [<c011bb0c>] 
warn_slowpath+0x80/0xb5
Mar 31 21:46:37 Source kernel: [ 1503.265913]  [<c029adfc>] 
schedule_timeout+0x9a/0xaf
Mar 31 21:46:37 Source kernel: [ 1503.265978]  [<c01227f8>] 
process_timeout+0x0/0x5
Mar 31 21:46:37 Source kernel: [ 1503.266034]  [<c0122bdc>] msleep+0xd/0x12
Mar 31 21:46:37 Source kernel: [ 1503.266105]  [<cf4a1d4a>] 
b43_mac_enable+0x64/0xc4 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.266191]  [<cf4a3f16>] 
b43_periodic_work_handler+0x53/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.266266]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.266329]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.266385]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.266441]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.266506]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.266564]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.266620]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.266674]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.266736]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.266791] ---[ end trace 
9a27304ff7b46a37 ]---
Mar 31 21:46:37 Source kernel: [ 1503.266881] ------------[ cut here 
]------------
Mar 31 21:46:37 Source kernel: [ 1503.266936] WARNING: at 
drivers/net/wireless/b43/main.c:2571 b43_mac_suspend+0x1e/0xbf [b43]()
Mar 31 21:46:37 Source kernel: [ 1503.267006] Hardware name: 
Mocha/Moorea   
Mar 31 21:46:37 Source kernel: [ 1503.267058] Modules linked in: b43 
aes_i586 aes_generic rfkill_input ppdev lp xt_dscp xt_multiport xt_MARK 
xt_state ipt_REJECT iptable_filter ipt_MASQUERADE ipt_REDIRECT xt_tcpudp 
iptable_nat nfsd exportfs nfs lockd nfs_acl auth_rpcgss sunrpc cls_fw 
sch_sfq sch_htb ipv6 iptable_mangle ip_tables x_tables nf_nat_irc 
nf_conntrack_irc nf_nat_ftp nf_nat nf_conntrack_ipv4 nf_defrag_ipv4 
nf_conntrack_ftp nf_conntrack fuse psmouse arc4 ecb rfkill rng_core 
mac80211 cfg80211 led_class input_polldev snd_via82xx gameport 
snd_ac97_codec ac97_bus snd_pcm_oss snd_mixer_oss snd_pcm snd_page_alloc 
snd_mpu401_uart snd_seq_dummy snd_seq_oss snd_seq_midi snd_rawmidi 
snd_seq_midi_event snd_seq snd_timer snd_seq_device snd pcspkr evdev 
soundcore ssb via686a i2c_viapro i2c_core via_agp agpgart shpchp 
pci_hotplug parport_pc parport container button reiserfs dm_mirror 
dm_region_hash dm_log dm_snapshot dm_mod ide_cd_mod cdrom ide_gd_mod 
ata_generic libata scsi_mod ide_pci_generic uhci_hcd ehci_hcd via82
Mar 31 21:46:37 Source kernel: xxx 8139cp 8139too mii usbcore ide_core 
thermal processor fan thermal_sys [last unloaded: b43]
Mar 31 21:46:37 Source kernel: [ 1503.271044] Pid: 3793, comm: phy1 
Tainted: G        W  2.6.29-wl #6
Mar 31 21:46:37 Source kernel: [ 1503.271100] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.271152]  [<c011bb0c>] 
warn_slowpath+0x80/0xb5
Mar 31 21:46:37 Source kernel: [ 1503.271229]  [<cf49fc32>] 
__b43_shm_read32+0xac/0xb1 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.271304]  [<cf49f4f0>] 
__b43_shm_write16+0x91/0x97 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.271377]  [<cf4a1ab8>] 
b43_mac_suspend+0x1e/0xbf [b43]
Mar 31 21:46:37 Source kernel: [ 1503.271455]  [<cf4a7003>] 
b43_gphy_op_pwork_15sec+0x8/0x17 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.271530]  [<cf4a3fa9>] 
b43_periodic_work_handler+0xe6/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.271605]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.271666]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.271721]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.271776]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.271832]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.271890]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.271946]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.271999]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.272074]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.272130] ---[ end trace 
9a27304ff7b46a38 ]---
Mar 31 21:46:37 Source kernel: [ 1503.272207] BUG: unable to handle 
kernel NULL pointer dereference at (null)
Mar 31 21:46:37 Source kernel: [ 1503.272333] IP: [<cf4ad872>] 
b43_lo_g_maintanance_work+0x55/0x1b3 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.272447] *pde = 00000000
Mar 31 21:46:37 Source kernel: [ 1503.272532] Oops: 0000 [#1]
Mar 31 21:46:37 Source kernel: [ 1503.272617] last sysfs file: 
/sys/devices/virtual/input/input5/capabilities/sw
Mar 31 21:46:37 Source kernel: [ 1503.272686] Modules linked in: b43 
aes_i586 aes_generic rfkill_input ppdev lp xt_dscp xt_multiport xt_MARK 
xt_state ipt_REJECT iptable_filter ipt_MASQUERADE ipt_REDIRECT xt_tcpudp 
iptable_nat nfsd exportfs nfs lockd nfs_acl auth_rpcgss sunrpc cls_fw 
sch_sfq sch_htb ipv6 iptable_mangle ip_tables x_tables nf_nat_irc 
nf_conntrack_irc nf_nat_ftp nf_nat nf_conntrack_ipv4 nf_defrag_ipv4 
nf_conntrack_ftp nf_conntrack fuse psmouse arc4 ecb rfkill rng_core 
mac80211 cfg80211 led_class input_polldev snd_via82xx gameport 
snd_ac97_codec ac97_bus snd_pcm_oss snd_mixer_oss snd_pcm snd_page_alloc 
snd_mpu401_uart snd_seq_dummy snd_seq_oss snd_seq_midi snd_rawmidi 
snd_seq_midi_event snd_seq snd_timer snd_seq_device snd pcspkr evdev 
soundcore ssb via686a i2c_viapro i2c_core via_agp agpgart shpchp 
pci_hotplug parport_pc parport container button reiserfs dm_mirror 
dm_region_hash dm_log dm_snapshot dm_mod ide_cd_mod cdrom ide_gd_mod 
ata_generic libata scsi_mod ide_pci_generic uhci_hcd ehci_hcd via82
Mar 31 21:46:37 Source kernel: xxx 8139cp 8139too mii usbcore ide_core 
thermal processor fan thermal_sys [last unloaded: b43]
Mar 31 21:46:37 Source kernel: [ 1503.276059]
Mar 31 21:46:37 Source kernel: [ 1503.276059] Pid: 3793, comm: phy1 
Tainted: G        W  (2.6.29-wl #6) Mocha/Moorea   
Mar 31 21:46:37 Source kernel: [ 1503.276059] EIP: 0060:[<cf4ad872>] 
EFLAGS: 00010246 CPU: 0
Mar 31 21:46:37 Source kernel: [ 1503.276059] EIP is at 
b43_lo_g_maintanance_work+0x55/0x1b3 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.276059] EAX: 00000000 EBX: 
fffffff4 ECX: cdbb9e80 EDX: cc948000
Mar 31 21:46:37 Source kernel: [ 1503.276059] ESI: cc948000 EDI: 
cc86a3e0 EBP: cc94dc00 ESP: cdbb9f68
Mar 31 21:46:37 Source kernel: [ 1503.276059]  DS: 007b ES: 007b FS: 
0000 GS: 0000 SS: 0068
Mar 31 21:46:37 Source kernel: [ 1503.276059] Process phy1 (pid: 3793, 
ti=cdbb8000 task=cce56420 task.ti=cdbb8000)
Mar 31 21:46:37 Source kernel: [ 1503.276059] Stack:
Mar 31 21:46:37 Source kernel: [ 1503.276059]  00047bba cc948000 
cf4a1ab8 cf4b3ab0 cc948000 00000000 cce7f920 cce7f928
Mar 31 21:46:37 Source kernel: [ 1503.276059]  cf4a700a cc948000 
cf4a3fa9 cc948274 ccc25760 cf4a3ec3 00000000 c0127664
Mar 31 21:46:37 Source kernel: [ 1503.276059]  ccc25760 c0127a29 
ccc25768 c0127ad6 00000000 cce56420 c012a29a cdbb9fc4
Mar 31 21:46:37 Source kernel: [ 1503.276059] Call Trace:
Mar 31 21:46:37 Source kernel: [ 1503.276059]  [<cf4a1ab8>] 
b43_mac_suspend+0x1e/0xbf [b43]
Mar 31 21:46:37 Source kernel: [ 1503.276059]  [<cf4a700a>] 
b43_gphy_op_pwork_15sec+0xf/0x17 [b43]
Mar 31 21:46:37 Source kernel: [ 1503.276059]  [<cf4a3fa9>] 
b43_periodic_work_handler+0xe6/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.276059]  [<cf4a3ec3>] 
b43_periodic_work_handler+0x0/0x13c [b43]
Mar 31 21:46:37 Source kernel: [ 1503.276059]  [<c0127664>] 
run_workqueue+0x74/0xec
Mar 31 21:46:37 Source kernel: [ 1503.276059]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.276059]  [<c0127ad6>] 
worker_thread+0xad/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.276059]  [<c012a29a>] 
autoremove_wake_function+0x0/0x2d
Mar 31 21:46:37 Source kernel: [ 1503.276059]  [<c0127a29>] 
worker_thread+0x0/0xb8
Mar 31 21:46:37 Source kernel: [ 1503.276059]  [<c0129eb7>] 
kthread+0x36/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.276059]  [<c0129e81>] kthread+0x0/0x5a
Mar 31 21:46:37 Source kernel: [ 1503.276059]  [<c01038e7>] 
kernel_thread_helper+0x7/0x10
Mar 31 21:46:37 Source kernel: [ 1503.276059] Code: 89 1c 24 74 20 39 5f 
58 0f 89 73 01 00 00 89 f0 e8 c8 e9 ff ff 89 f0 31 d2 83 c4 10 5b 5e 5f 
5d e9 4c fe ff ff 8b 47 50 8d 58 f4 <8b> 43 0c c6 44 24 0f 00 83 e8 0c 
89 44 24 08 8d 47 50 89 44 24
Mar 31 21:46:37 Source kernel: [ 1503.276059] EIP: [<cf4ad872>] 
b43_lo_g_maintanance_work+0x55/0x1b3 [b43] SS:ESP 0068:cdbb9f68

Regards,

David Ellingsworth


From hs4233 at mail.mn-solutions.de  Wed Apr  1 08:50:30 2009
From: hs4233 at mail.mn-solutions.de (Holger Schurig)
Date: Wed, 1 Apr 2009 08:50:30 +0200
Subject: [PATCH] b43: Implement fullmac-mode support
In-Reply-To: <200904010101.44380.mb@bu3sch.de>
References: <200904010101.44380.mb@bu3sch.de>
Message-ID: <200904010850.30532.hs4233@mail.mn-solutions.de>

> +	if (modparam_fullmac)
> +		goto ssb_disable;
> +
...
> +ssb_disable:
>  	ssb_device_disable(dev->dev, 0);
>  	ssb_bus_may_powerdown(dev->dev->bus);
>  }


April April!


From Larry.Finger at lwfinger.net  Wed Apr  1 17:42:36 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Wed, 01 Apr 2009 10:42:36 -0500
Subject: [PATCH V3] b43legacy: Do not select HW_RANDOM
Message-ID: <49d38b6c.fMv3owVntV9WBh+h%Larry.Finger@lwfinger.net>

Auto-depend on HW_RANDOM, rather than "select"ing it.
This way the user has the choice to enable or disable HWRNG support.

Signed-off-by: Larry Finger <Larry.Finger at lwfinger.net>
---

John, please queue for 2.6.31.



Index: wireless-testing/drivers/net/wireless/b43legacy/Kconfig
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43legacy/Kconfig
+++ wireless-testing/drivers/net/wireless/b43legacy/Kconfig
@@ -3,7 +3,6 @@ config B43LEGACY
 	depends on SSB_POSSIBLE && MAC80211 && WLAN_80211 && HAS_DMA
 	select SSB
 	select FW_LOADER
-	select HW_RANDOM
 	---help---
 	  b43legacy is a driver for 802.11b devices from Broadcom (BCM4301 and
 	  BCM4303) and early model 802.11g chips (BCM4306 Ver. 2) used in the
@@ -51,6 +50,13 @@ config B43LEGACY_RFKILL
 	depends on B43LEGACY && (RFKILL = y || RFKILL = B43LEGACY) && RFKILL_INPUT && (INPUT_POLLDEV = y || INPUT_POLLDEV = B43LEGACY)
 	default y
 
+# This config option automatically enables b43 HW-RNG support,
+# if the HW-RNG core is enabled.
+config B43LEGACY_HWRNG
+	bool
+	depends on B43LEGACY && (HW_RANDOM = y || HW_RANDOM = B43LEGACY)
+	default y
+
 config B43LEGACY_DEBUG
 	bool "Broadcom 43xx-legacy debugging"
 	depends on B43LEGACY
Index: wireless-testing/drivers/net/wireless/b43legacy/b43legacy.h
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43legacy/b43legacy.h
+++ wireless-testing/drivers/net/wireless/b43legacy/b43legacy.h
@@ -596,9 +596,11 @@ struct b43legacy_wl {
 	/* Stats about the wireless interface */
 	struct ieee80211_low_level_stats ieee_stats;
 
+#ifdef CONFIG_B43LEGACY_HWRNG
 	struct hwrng rng;
 	u8 rng_initialized;
 	char rng_name[30 + 1];
+#endif
 
 	/* The RF-kill button */
 	struct b43legacy_rfkill rfkill;
Index: wireless-testing/drivers/net/wireless/b43legacy/main.c
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43legacy/main.c
+++ wireless-testing/drivers/net/wireless/b43legacy/main.c
@@ -2393,6 +2393,7 @@ static void b43legacy_security_init(stru
 				  dev->max_nr_keys - 8);
 }
 
+#ifdef CONFIG_B43LEGACY_HWRNG
 static int b43legacy_rng_read(struct hwrng *rng, u32 *data)
 {
 	struct b43legacy_wl *wl = (struct b43legacy_wl *)rng->priv;
@@ -2408,17 +2409,21 @@ static int b43legacy_rng_read(struct hwr
 
 	return (sizeof(u16));
 }
+#endif
 
 static void b43legacy_rng_exit(struct b43legacy_wl *wl)
 {
+#ifdef CONFIG_B43LEGACY_HWRNG
 	if (wl->rng_initialized)
 		hwrng_unregister(&wl->rng);
+#endif
 }
 
 static int b43legacy_rng_init(struct b43legacy_wl *wl)
 {
-	int err;
+	int err = 0;
 
+#ifdef CONFIG_B43LEGACY_HWRNG
 	snprintf(wl->rng_name, ARRAY_SIZE(wl->rng_name),
 		 "%s_%s", KBUILD_MODNAME, wiphy_name(wl->hw->wiphy));
 	wl->rng.name = wl->rng_name;
@@ -2432,6 +2437,7 @@ static int b43legacy_rng_init(struct b43
 		       "number generator (%d)\n", err);
 	}
 
+#endif
 	return err;
 }
 


From mb at bu3sch.de  Wed Apr  1 22:59:59 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Wed, 1 Apr 2009 22:59:59 +0200
Subject: [PATCH V3] b43legacy: Do not select HW_RANDOM
In-Reply-To: <49d38b6c.fMv3owVntV9WBh+h%Larry.Finger@lwfinger.net>
References: <49d38b6c.fMv3owVntV9WBh+h%Larry.Finger@lwfinger.net>
Message-ID: <200904012300.00024.mb@bu3sch.de>

On Wednesday 01 April 2009 17:42:36 Larry Finger wrote:
> Auto-depend on HW_RANDOM, rather than "select"ing it.
> This way the user has the choice to enable or disable HWRNG support.
> 
> Signed-off-by: Larry Finger <Larry.Finger at lwfinger.net>
> ---
> 
> John, please queue for 2.6.31.


ACK

> 
> 
> Index: wireless-testing/drivers/net/wireless/b43legacy/Kconfig
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43legacy/Kconfig
> +++ wireless-testing/drivers/net/wireless/b43legacy/Kconfig
> @@ -3,7 +3,6 @@ config B43LEGACY
>  	depends on SSB_POSSIBLE && MAC80211 && WLAN_80211 && HAS_DMA
>  	select SSB
>  	select FW_LOADER
> -	select HW_RANDOM
>  	---help---
>  	  b43legacy is a driver for 802.11b devices from Broadcom (BCM4301 and
>  	  BCM4303) and early model 802.11g chips (BCM4306 Ver. 2) used in the
> @@ -51,6 +50,13 @@ config B43LEGACY_RFKILL
>  	depends on B43LEGACY && (RFKILL = y || RFKILL = B43LEGACY) && RFKILL_INPUT && (INPUT_POLLDEV = y || INPUT_POLLDEV = B43LEGACY)
>  	default y
>  
> +# This config option automatically enables b43 HW-RNG support,
> +# if the HW-RNG core is enabled.
> +config B43LEGACY_HWRNG
> +	bool
> +	depends on B43LEGACY && (HW_RANDOM = y || HW_RANDOM = B43LEGACY)
> +	default y
> +
>  config B43LEGACY_DEBUG
>  	bool "Broadcom 43xx-legacy debugging"
>  	depends on B43LEGACY
> Index: wireless-testing/drivers/net/wireless/b43legacy/b43legacy.h
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43legacy/b43legacy.h
> +++ wireless-testing/drivers/net/wireless/b43legacy/b43legacy.h
> @@ -596,9 +596,11 @@ struct b43legacy_wl {
>  	/* Stats about the wireless interface */
>  	struct ieee80211_low_level_stats ieee_stats;
>  
> +#ifdef CONFIG_B43LEGACY_HWRNG
>  	struct hwrng rng;
>  	u8 rng_initialized;
>  	char rng_name[30 + 1];
> +#endif
>  
>  	/* The RF-kill button */
>  	struct b43legacy_rfkill rfkill;
> Index: wireless-testing/drivers/net/wireless/b43legacy/main.c
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43legacy/main.c
> +++ wireless-testing/drivers/net/wireless/b43legacy/main.c
> @@ -2393,6 +2393,7 @@ static void b43legacy_security_init(stru
>  				  dev->max_nr_keys - 8);
>  }
>  
> +#ifdef CONFIG_B43LEGACY_HWRNG
>  static int b43legacy_rng_read(struct hwrng *rng, u32 *data)
>  {
>  	struct b43legacy_wl *wl = (struct b43legacy_wl *)rng->priv;
> @@ -2408,17 +2409,21 @@ static int b43legacy_rng_read(struct hwr
>  
>  	return (sizeof(u16));
>  }
> +#endif
>  
>  static void b43legacy_rng_exit(struct b43legacy_wl *wl)
>  {
> +#ifdef CONFIG_B43LEGACY_HWRNG
>  	if (wl->rng_initialized)
>  		hwrng_unregister(&wl->rng);
> +#endif
>  }
>  
>  static int b43legacy_rng_init(struct b43legacy_wl *wl)
>  {
> -	int err;
> +	int err = 0;
>  
> +#ifdef CONFIG_B43LEGACY_HWRNG
>  	snprintf(wl->rng_name, ARRAY_SIZE(wl->rng_name),
>  		 "%s_%s", KBUILD_MODNAME, wiphy_name(wl->hw->wiphy));
>  	wl->rng.name = wl->rng_name;
> @@ -2432,6 +2437,7 @@ static int b43legacy_rng_init(struct b43
>  		       "number generator (%d)\n", err);
>  	}
>  
> +#endif
>  	return err;
>  }
>  
> _______________________________________________
> Bcm43xx-dev mailing list
> Bcm43xx-dev at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/bcm43xx-dev
> 
> 



-- 
Greetings, Michael.


From riesebie at lxtec.de  Sat Apr  4 10:54:01 2009
From: riesebie at lxtec.de (Elimar Riesebieter)
Date: Sat, 4 Apr 2009 10:54:01 +0200
Subject: [PATCH] b43: Mask PHY TX error interrupt, if not debugging
In-Reply-To: <200903191927.21868.mb@bu3sch.de>
References: <200903191927.21868.mb@bu3sch.de>
Message-ID: <20090404085401.GA14695@aragorn.home.lxtec.de>

* Michael Buesch [090319 19:27 +0100]
[...]
> !!! DISTRIBUTIONS !!!
> Disable CONFIG_B43_DEBUG!
> There is absolutely _no_ reason to enable it on a release kernel.
> There were valid reasons in the past, but there are none left anymore.
> So please _disable_ this option now, if you didn't do this already,
> because with CONFIG_B43_DEBUG enabled the PHY TX errors will still show.

I tried that at 2.6.29.1 and got:
drivers/net/wireless/b43/main.c: In function 'setup_struct_wldev_for_init':
drivers/net/wireless/b43/main.c:3904: error: 'b43_modparam_verbose' undeclared (first use in this function)
drivers/net/wireless/b43/main.c:3904: error: (Each undeclared identifier is reported only once
drivers/net/wireless/b43/main.c:3904: error: for each function it appears in.)
drivers/net/wireless/b43/main.c:3904: error: 'B43_VERBOSITY_DEBUG' undeclared (first use in this function)

Elimar

-- 
  "Talking much about oneself can also 
   be a means to conceal oneself."
         -Friedrich Nietzsche


From mb at bu3sch.de  Sat Apr  4 11:17:07 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Sat, 4 Apr 2009 11:17:07 +0200
Subject: [PATCH] b43: Mask PHY TX error interrupt, if not debugging
In-Reply-To: <20090404085401.GA14695@aragorn.home.lxtec.de>
References: <200903191927.21868.mb@bu3sch.de>
	<20090404085401.GA14695@aragorn.home.lxtec.de>
Message-ID: <200904041117.07516.mb@bu3sch.de>

On Saturday 04 April 2009 10:54:01 Elimar Riesebieter wrote:
> * Michael Buesch [090319 19:27 +0100]
> [...]
> > !!! DISTRIBUTIONS !!!
> > Disable CONFIG_B43_DEBUG!
> > There is absolutely _no_ reason to enable it on a release kernel.
> > There were valid reasons in the past, but there are none left anymore.
> > So please _disable_ this option now, if you didn't do this already,
> > because with CONFIG_B43_DEBUG enabled the PHY TX errors will still show.
> 
> I tried that at 2.6.29.1 and got:
> drivers/net/wireless/b43/main.c: In function 'setup_struct_wldev_for_init':
> drivers/net/wireless/b43/main.c:3904: error: 'b43_modparam_verbose' undeclared (first use in this function)
> drivers/net/wireless/b43/main.c:3904: error: (Each undeclared identifier is reported only once
> drivers/net/wireless/b43/main.c:3904: error: for each function it appears in.)
> drivers/net/wireless/b43/main.c:3904: error: 'B43_VERBOSITY_DEBUG' undeclared (first use in this function)
> 
> Elimar
> 

You're not supposed to apply this patch to 2.6.29

-- 
Greetings, Michael.


From francesco.gringoli at ing.unibs.it  Sun Apr  5 20:01:22 2009
From: francesco.gringoli at ing.unibs.it (Francesco Gringoli)
Date: Sun, 5 Apr 2009 20:01:22 +0200
Subject: [PATCH] b43: Refresh RX poison on buffer recycling
In-Reply-To: <C0D59D9C-FC8A-4C79-B777-AF2F166D9711@ing.unibs.it>
References: <200903280041.25265.mb@bu3sch.de>
	<C0D59D9C-FC8A-4C79-B777-AF2F166D9711@ing.unibs.it>
Message-ID: <6A0437BB-3D78-4BB9-AB76-F40C1BEF9CBF@ing.unibs.it>

On Mar 30, 2009, at 11:35 PM, Francesco Gringoli wrote:

>
> On Mar 28, 2009, at 12:41 AM, Michael Buesch wrote:
>
>> The RX buffer poison needs to be refreshed, if we recycle an RX
>> buffer,
>> because it might be (partially) overwritten by some DMA operations.
>>
>> Cc: stable at kernel.org
>> Cc: Francesco Gringoli <francesco.gringoli at ing.unibs.it>
>> Signed-off-by: Michael Buesch <mb at bu3sch.de>
>>
>> ---
>>
>> Francesco, please stresstest this on top of the other patch that
>> adds poisoning.
> Hi Michael,
>
> great work! No more crashes with the two patches. I will continue
> stress testing anyway but it seems stable.
Hi Michael,

I run the patched kernel for some time and, though it is stable and  
never crashes, there are still (few) some strange rx events. I will  
refer to them as Wrong Frame Type I, Type II, and III. Please note  
however, that we can observe them ONLY when the FCSFAIL bit is set in  
the mac_ctrl_high (at least in my setup).

- Type I: plcp length mismatch
These frames have a plcp that seems to be correct (I mean, the first  
two bytes appear to be taken from a valid plcp), the padding reported  
by the firmware in this cases is correct too (e.g. the padding always  
point to the byte where the valid plcp seems to start). HOWEVER, the  
length of such frames is different than the length encoded in their  
plcp. In all these frames the B43_RX_MAC_FCSERR bit is not set, though  
these frames will fail a crc check. We should check the plcp matches  
the skb length and manually set the RX_FLAG_FAILED_FCS_CRC bit in the  
status field so that mac80211 will skip these frames.

- Type II: fcs is wrong
These frames have a correct plcp that matches their skb length. Their  
FCS however is wrong! but the B43_RX_MAC_FCSERR is not set. Again we  
should manually set the RX_FLAG_FAILED_FCS_CRC bit in the status field  
so that mac80211 will skip these frames. I believe that these frames  
are nothing more than Type I but the broken length collided with their  
actual length.

- Type III: plcp is not a... plcp
These frames have a plcp that is not a plcp, in the sense that the  
first two bytes (with both padding 0 or 2) does not represent any  
possible plcp.

I attach a patch to correctly set the RX_FLAG_FAILED_FCS_CRC bit in  
the status field on such situations so that such frames are not passed  
to the upper layers.

Cheers,
-FG

Index: wireless-testing/drivers/net/wireless/b43/xmit.c
===================================================================
--- drivers/net/wireless/b43/xmit.c	2009-03-26 19:41:53.000000000 +0100
+++ drivers/net/wireless/b43/xmit.c	2009-03-27 20:55:31.000000000 +0100
@@ -27,6 +27,7 @@

  */

+#include <linux/crc32.h>
  #include "xmit.h"
  #include "phy_common.h"
  #include "dma.h"
@@ -560,6 +562,67 @@
  		goto drop;
  	}
  	plcp = (struct b43_plcp_hdr6 *)(skb->data + padding);
+
+	if ((dev->wl->filter_flags & FIF_FCSFAIL) && !(macstat &  
B43_RX_MAC_FCSERR)) {
+		int mismatch = 0;
+		int skb_len = skb->len - 6 - padding;
+		u8* plcp_data = (u8*) plcp;
+		if (phystat0 & B43_RX_PHYST0_OFDM) {
+			int pkt_len = plcp_data[0] |
+				plcp_data[1] <<  8 |
+				plcp_data[2] << 16 |
+				plcp_data[3] << 24;
+			pkt_len >>= 5;
+			pkt_len &= 0xFFF;
+			if(pkt_len != skb_len) {
+				mismatch = 1;
+			}
+		}
+		else {
+			int speed;
+			int len1 = (plcp_data[3] << 8) | plcp_data[2];
+			int len2;
+			switch(plcp_data[0]) {
+			case 0x0A:
+				speed = 2;
+				break;
+			case 0x14:
+				speed = 4;
+				break;
+			case 0x37:
+				speed = 11;
+				break;
+			case 0x6E:
+				speed = 22;
+				break;
+			default:
+				speed = 1;
+				break;
+			}
+			len2 = skb_len * 16 / speed;
+			if((skb_len * 16 % speed) > 0)
+				len2++;
+
+			if(len1 != len2) {
+				mismatch = 1;
+			}
+		}
+		if(mismatch) {
+			dev->wl->ieee_stats.dot11FCSErrorCount++;
+			macstat |= B43_RX_MAC_FCSERR;
+			status.flag |= RX_FLAG_FAILED_FCS_CRC;
+			plcp_data = (u8*) (struct b43_plcp_hdr6 *)(skb->data);
+			b43dbg(dev->wl, "RX: padding or plcp mismatch, setting FCSFAIL and  
keeping frame (" \
+				"%02X %02X %02X %02X padding = %d, len = %d)\n",
+				plcp_data[0],
+				plcp_data[1],
+				plcp_data[2],
+				plcp_data[3],
+				padding,
+				skb->len);
+		}
+        }
+
  	skb_pull(skb, sizeof(struct b43_plcp_hdr6) + padding);
  	/* The skb contains the Wireless Header + payload data now */
  	if (unlikely(skb->len < (2 + 2 + 6 /*minimum hdr */  + FCS_LEN))) {
@@ -569,6 +648,23 @@
  	wlhdr = (struct ieee80211_hdr *)(skb->data);
  	fctl = wlhdr->frame_control;

+	/* if we keep bad frames we should compute again the FCS as fw can  
skip marking */
+        if ((dev->wl->filter_flags & FIF_FCSFAIL) && !(macstat &  
B43_RX_MAC_FCSERR)) {
+		u32 fcs1, fcs2;
+		u8* fcs_ptr = skb->data + skb->len - FCS_LEN;
+		fcs1 = fcs_ptr[0] |
+			fcs_ptr[1] << 8  |
+			fcs_ptr[2] << 16 |
+			fcs_ptr[3] << 24;
+		fcs2 = ~ether_crc_le(skb->len - FCS_LEN, skb->data);
+		if(fcs1 != fcs2) {
+			b43dbg(dev->wl, "RX: FCS wrong not reported, setting FCSFAIL and  
keeping\n");
+			macstat |= B43_RX_MAC_FCSERR;
+			dev->wl->ieee_stats.dot11FCSErrorCount++;
+			status.flag |= RX_FLAG_FAILED_FCS_CRC;
+		}
+	}
+
  	if (macstat & B43_RX_MAC_DEC) {
  		unsigned int keyidx;
  		int wlhdr_len;
@@ -617,6 +721,10 @@
  		 * Drop the frame, if we are not interested in corrupted frames. */
  		if (!(dev->wl->filter_flags & FIF_PLCPFAIL))
  			goto drop;
+		else {
+			b43dbg(dev->wl, "RX: PLCP corrupted, discarding\n");
+			goto drop;
+		}
  	}
  	status.antenna = !!(phystat0 & B43_RX_PHYST0_ANT);




From david at identd.dyndns.org  Sun Apr  5 20:38:16 2009
From: david at identd.dyndns.org (David Ellingsworth)
Date: Sun, 5 Apr 2009 14:38:16 -0400
Subject: [PATCH] b43: Refresh RX poison on buffer recycling
In-Reply-To: <6A0437BB-3D78-4BB9-AB76-F40C1BEF9CBF@ing.unibs.it>
References: <200903280041.25265.mb@bu3sch.de>
	<C0D59D9C-FC8A-4C79-B777-AF2F166D9711@ing.unibs.it>
	<6A0437BB-3D78-4BB9-AB76-F40C1BEF9CBF@ing.unibs.it>
Message-ID: <30353c3d0904051138k313460f0p111282e3b279bd05@mail.gmail.com>

On Sun, Apr 5, 2009 at 2:01 PM, Francesco Gringoli
<francesco.gringoli at ing.unibs.it> wrote:
> On Mar 30, 2009, at 11:35 PM, Francesco Gringoli wrote:
>
>>
>> On Mar 28, 2009, at 12:41 AM, Michael Buesch wrote:
>>
>>> The RX buffer poison needs to be refreshed, if we recycle an RX
>>> buffer,
>>> because it might be (partially) overwritten by some DMA operations.
>>>
>>> Cc: stable at kernel.org
>>> Cc: Francesco Gringoli <francesco.gringoli at ing.unibs.it>
>>> Signed-off-by: Michael Buesch <mb at bu3sch.de>
>>>
>>> ---
>>>
>>> Francesco, please stresstest this on top of the other patch that
>>> adds poisoning.
>> Hi Michael,
>>
>> great work! No more crashes with the two patches. I will continue
>> stress testing anyway but it seems stable.
> Hi Michael,
>
> I run the patched kernel for some time and, though it is stable and
> never crashes, there are still (few) some strange rx events. I will
> refer to them as Wrong Frame Type I, Type II, and III. Please note
> however, that we can observe them ONLY when the FCSFAIL bit is set in
> the mac_ctrl_high (at least in my setup).
>
> - Type I: plcp length mismatch
> These frames have a plcp that seems to be correct (I mean, the first
> two bytes appear to be taken from a valid plcp), the padding reported
> by the firmware in this cases is correct too (e.g. the padding always
> point to the byte where the valid plcp seems to start). HOWEVER, the
> length of such frames is different than the length encoded in their
> plcp. In all these frames the B43_RX_MAC_FCSERR bit is not set, though
> these frames will fail a crc check. We should check the plcp matches
> the skb length and manually set the RX_FLAG_FAILED_FCS_CRC bit in the
> status field so that mac80211 will skip these frames.
>
> - Type II: fcs is wrong
> These frames have a correct plcp that matches their skb length. Their
> FCS however is wrong! but the B43_RX_MAC_FCSERR is not set. Again we
> should manually set the RX_FLAG_FAILED_FCS_CRC bit in the status field
> so that mac80211 will skip these frames. I believe that these frames
> are nothing more than Type I but the broken length collided with their
> actual length.
>
> - Type III: plcp is not a... plcp
> These frames have a plcp that is not a plcp, in the sense that the
> first two bytes (with both padding 0 or 2) does not represent any
> possible plcp.
>
> I attach a patch to correctly set the RX_FLAG_FAILED_FCS_CRC bit in
> the status field on such situations so that such frames are not passed
> to the upper layers.
>
> Cheers,
> -FG
>

Your patch was mangled by your email client. Maybe you should inline
your patches and attach a copy of it before sending in the future.

Regards,

David Ellingsworth


From mb at bu3sch.de  Sun Apr  5 20:58:00 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Sun, 5 Apr 2009 20:58:00 +0200
Subject: [PATCH] b43: Refresh RX poison on buffer recycling
In-Reply-To: <6A0437BB-3D78-4BB9-AB76-F40C1BEF9CBF@ing.unibs.it>
References: <200903280041.25265.mb@bu3sch.de>
	<C0D59D9C-FC8A-4C79-B777-AF2F166D9711@ing.unibs.it>
	<6A0437BB-3D78-4BB9-AB76-F40C1BEF9CBF@ing.unibs.it>
Message-ID: <200904052058.00856.mb@bu3sch.de>

On Sunday 05 April 2009 20:01:22 Francesco Gringoli wrote:
> On Mar 30, 2009, at 11:35 PM, Francesco Gringoli wrote:
> 
> >
> > On Mar 28, 2009, at 12:41 AM, Michael Buesch wrote:
> >
> >> The RX buffer poison needs to be refreshed, if we recycle an RX
> >> buffer,
> >> because it might be (partially) overwritten by some DMA operations.
> >>
> >> Cc: stable at kernel.org
> >> Cc: Francesco Gringoli <francesco.gringoli at ing.unibs.it>
> >> Signed-off-by: Michael Buesch <mb at bu3sch.de>
> >>
> >> ---
> >>
> >> Francesco, please stresstest this on top of the other patch that
> >> adds poisoning.
> > Hi Michael,
> >
> > great work! No more crashes with the two patches. I will continue
> > stress testing anyway but it seems stable.
> Hi Michael,
> 
> I run the patched kernel for some time and, though it is stable and  
> never crashes, there are still (few) some strange rx events. I will  
> refer to them as Wrong Frame Type I, Type II, and III. Please note  
> however, that we can observe them ONLY when the FCSFAIL bit is set in  
> the mac_ctrl_high (at least in my setup).
> 
> - Type I: plcp length mismatch
> These frames have a plcp that seems to be correct (I mean, the first  
> two bytes appear to be taken from a valid plcp), the padding reported  
> by the firmware in this cases is correct too (e.g. the padding always  
> point to the byte where the valid plcp seems to start). HOWEVER, the  
> length of such frames is different than the length encoded in their  
> plcp. In all these frames the B43_RX_MAC_FCSERR bit is not set, though  
> these frames will fail a crc check. We should check the plcp matches  
> the skb length and manually set the RX_FLAG_FAILED_FCS_CRC bit in the  
> status field so that mac80211 will skip these frames.
> 
> - Type II: fcs is wrong
> These frames have a correct plcp that matches their skb length. Their  
> FCS however is wrong! but the B43_RX_MAC_FCSERR is not set. Again we  
> should manually set the RX_FLAG_FAILED_FCS_CRC bit in the status field  
> so that mac80211 will skip these frames. I believe that these frames  
> are nothing more than Type I but the broken length collided with their  
> actual length.
> 
> - Type III: plcp is not a... plcp
> These frames have a plcp that is not a plcp, in the sense that the  
> first two bytes (with both padding 0 or 2) does not represent any  
> possible plcp.
> 
> I attach a patch to correctly set the RX_FLAG_FAILED_FCS_CRC bit in  
> the status field on such situations so that such frames are not passed  
> to the upper layers.
> 
> Cheers,
> -FG

I think this really is completely getting overengineered by now.

I'm not going to apply such a patch unless you tell me why it's needed.
Having such an incredible mechanism for an absolute corner case that happens
once in a billion frames but doesn't harm anybody is not really acceptable.

If you have FCSFAIL set, you're expected to receive crap. It's as simple as that.
If you don't want crap, don't set the bit.


> Index: wireless-testing/drivers/net/wireless/b43/xmit.c
> ===================================================================
> --- drivers/net/wireless/b43/xmit.c	2009-03-26 19:41:53.000000000 +0100
> +++ drivers/net/wireless/b43/xmit.c	2009-03-27 20:55:31.000000000 +0100
> @@ -27,6 +27,7 @@
> 
>   */
> 
> +#include <linux/crc32.h>
>   #include "xmit.h"
>   #include "phy_common.h"
>   #include "dma.h"
> @@ -560,6 +562,67 @@
>   		goto drop;
>   	}
>   	plcp = (struct b43_plcp_hdr6 *)(skb->data + padding);
> +
> +	if ((dev->wl->filter_flags & FIF_FCSFAIL) && !(macstat &  
> B43_RX_MAC_FCSERR)) {
> +		int mismatch = 0;
> +		int skb_len = skb->len - 6 - padding;
> +		u8* plcp_data = (u8*) plcp;
> +		if (phystat0 & B43_RX_PHYST0_OFDM) {
> +			int pkt_len = plcp_data[0] |
> +				plcp_data[1] <<  8 |
> +				plcp_data[2] << 16 |
> +				plcp_data[3] << 24;
> +			pkt_len >>= 5;
> +			pkt_len &= 0xFFF;
> +			if(pkt_len != skb_len) {
> +				mismatch = 1;
> +			}
> +		}
> +		else {
> +			int speed;
> +			int len1 = (plcp_data[3] << 8) | plcp_data[2];
> +			int len2;
> +			switch(plcp_data[0]) {
> +			case 0x0A:
> +				speed = 2;
> +				break;
> +			case 0x14:
> +				speed = 4;
> +				break;
> +			case 0x37:
> +				speed = 11;
> +				break;
> +			case 0x6E:
> +				speed = 22;
> +				break;
> +			default:
> +				speed = 1;
> +				break;
> +			}
> +			len2 = skb_len * 16 / speed;
> +			if((skb_len * 16 % speed) > 0)
> +				len2++;
> +
> +			if(len1 != len2) {
> +				mismatch = 1;
> +			}
> +		}
> +		if(mismatch) {
> +			dev->wl->ieee_stats.dot11FCSErrorCount++;
> +			macstat |= B43_RX_MAC_FCSERR;
> +			status.flag |= RX_FLAG_FAILED_FCS_CRC;
> +			plcp_data = (u8*) (struct b43_plcp_hdr6 *)(skb->data);
> +			b43dbg(dev->wl, "RX: padding or plcp mismatch, setting FCSFAIL and  
> keeping frame (" \
> +				"%02X %02X %02X %02X padding = %d, len = %d)\n",
> +				plcp_data[0],
> +				plcp_data[1],
> +				plcp_data[2],
> +				plcp_data[3],
> +				padding,
> +				skb->len);
> +		}
> +        }
> +
>   	skb_pull(skb, sizeof(struct b43_plcp_hdr6) + padding);
>   	/* The skb contains the Wireless Header + payload data now */
>   	if (unlikely(skb->len < (2 + 2 + 6 /*minimum hdr */  + FCS_LEN))) {
> @@ -569,6 +648,23 @@
>   	wlhdr = (struct ieee80211_hdr *)(skb->data);
>   	fctl = wlhdr->frame_control;
> 
> +	/* if we keep bad frames we should compute again the FCS as fw can  
> skip marking */
> +        if ((dev->wl->filter_flags & FIF_FCSFAIL) && !(macstat &  
> B43_RX_MAC_FCSERR)) {
> +		u32 fcs1, fcs2;
> +		u8* fcs_ptr = skb->data + skb->len - FCS_LEN;
> +		fcs1 = fcs_ptr[0] |
> +			fcs_ptr[1] << 8  |
> +			fcs_ptr[2] << 16 |
> +			fcs_ptr[3] << 24;
> +		fcs2 = ~ether_crc_le(skb->len - FCS_LEN, skb->data);
> +		if(fcs1 != fcs2) {
> +			b43dbg(dev->wl, "RX: FCS wrong not reported, setting FCSFAIL and  
> keeping\n");
> +			macstat |= B43_RX_MAC_FCSERR;
> +			dev->wl->ieee_stats.dot11FCSErrorCount++;
> +			status.flag |= RX_FLAG_FAILED_FCS_CRC;
> +		}
> +	}
> +
>   	if (macstat & B43_RX_MAC_DEC) {
>   		unsigned int keyidx;
>   		int wlhdr_len;
> @@ -617,6 +721,10 @@
>   		 * Drop the frame, if we are not interested in corrupted frames. */
>   		if (!(dev->wl->filter_flags & FIF_PLCPFAIL))
>   			goto drop;
> +		else {
> +			b43dbg(dev->wl, "RX: PLCP corrupted, discarding\n");
> +			goto drop;
> +		}
>   	}
>   	status.antenna = !!(phystat0 & B43_RX_PHYST0_ANT);
> 
> 
> 
> 



-- 
Greetings, Michael.


From francesco.gringoli at ing.unibs.it  Sun Apr  5 21:54:48 2009
From: francesco.gringoli at ing.unibs.it (Francesco Gringoli)
Date: Sun, 5 Apr 2009 21:54:48 +0200
Subject: [PATCH] b43: Refresh RX poison on buffer recycling
In-Reply-To: <200904052058.00856.mb@bu3sch.de>
References: <200903280041.25265.mb@bu3sch.de>
	<C0D59D9C-FC8A-4C79-B777-AF2F166D9711@ing.unibs.it>
	<6A0437BB-3D78-4BB9-AB76-F40C1BEF9CBF@ing.unibs.it>
	<200904052058.00856.mb@bu3sch.de>
Message-ID: <46762F98-C244-42C7-8F42-D206137385C3@ing.unibs.it>


On Apr 5, 2009, at 8:58 PM, Michael Buesch wrote:

> On Sunday 05 April 2009 20:01:22 Francesco Gringoli wrote:
>> On Mar 30, 2009, at 11:35 PM, Francesco Gringoli wrote:
>>
>>>
>>> On Mar 28, 2009, at 12:41 AM, Michael Buesch wrote:
>>>
>>>>
Hi Michael,

>
> I think this really is completely getting overengineered by now.
>
> I'm not going to apply such a patch unless you tell me why it's  
> needed.
> Having such an incredible mechanism for an absolute corner case that  
> happens
> once in a billion frames but doesn't harm anybody is not really  
> acceptable.
No problem :-) I simply sent the patch I'm using in my test  
environment where I get this behavior for the 0.1% of the received  
frames when FCSFAIL is set. Note that here we collect traces for  
experiments with 802.11 protocol, so we need this kind of patches.

I understand that very few of us are doing such kind of experiments  
and users are not, I simply sent a comment about these devices. It may  
improve knowledge about them.

Cheers,
-FG

>
>
> If you have FCSFAIL set, you're expected to receive crap. It's as  
> simple as that.
> If you don't want crap, don't set the bit.
>
>
>> Index: wireless-testing/drivers/net/wireless/b43/xmit.c
>> ===================================================================
>> --- drivers/net/wireless/b43/xmit.c	2009-03-26 19:41:53.000000000  
>> +0100
>> +++ drivers/net/wireless/b43/xmit.c	2009-03-27 20:55:31.000000000  
>> +0100
>> @@ -27,6 +27,7 @@
>>
>>  */
>>
>> +#include <linux/crc32.h>
>>  #include "xmit.h"
>>  #include "phy_common.h"
>>  #include "dma.h"
>> @@ -560,6 +562,67 @@
>>  		goto drop;
>>  	}
>>  	plcp = (struct b43_plcp_hdr6 *)(skb->data + padding);
>> +
>> +	if ((dev->wl->filter_flags & FIF_FCSFAIL) && !(macstat &
>> B43_RX_MAC_FCSERR)) {
>> +		int mismatch = 0;
>> +		int skb_len = skb->len - 6 - padding;
>> +		u8* plcp_data = (u8*) plcp;
>> +		if (phystat0 & B43_RX_PHYST0_OFDM) {
>> +			int pkt_len = plcp_data[0] |
>> +				plcp_data[1] <<  8 |
>> +				plcp_data[2] << 16 |
>> +				plcp_data[3] << 24;
>> +			pkt_len >>= 5;
>> +			pkt_len &= 0xFFF;
>> +			if(pkt_len != skb_len) {
>> +				mismatch = 1;
>> +			}
>> +		}
>> +		else {
>> +			int speed;
>> +			int len1 = (plcp_data[3] << 8) | plcp_data[2];
>> +			int len2;
>> +			switch(plcp_data[0]) {
>> +			case 0x0A:
>> +				speed = 2;
>> +				break;
>> +			case 0x14:
>> +				speed = 4;
>> +				break;
>> +			case 0x37:
>> +				speed = 11;
>> +				break;
>> +			case 0x6E:
>> +				speed = 22;
>> +				break;
>> +			default:
>> +				speed = 1;
>> +				break;
>> +			}
>> +			len2 = skb_len * 16 / speed;
>> +			if((skb_len * 16 % speed) > 0)
>> +				len2++;
>> +
>> +			if(len1 != len2) {
>> +				mismatch = 1;
>> +			}
>> +		}
>> +		if(mismatch) {
>> +			dev->wl->ieee_stats.dot11FCSErrorCount++;
>> +			macstat |= B43_RX_MAC_FCSERR;
>> +			status.flag |= RX_FLAG_FAILED_FCS_CRC;
>> +			plcp_data = (u8*) (struct b43_plcp_hdr6 *)(skb->data);
>> +			b43dbg(dev->wl, "RX: padding or plcp mismatch, setting FCSFAIL  
>> and
>> keeping frame (" \
>> +				"%02X %02X %02X %02X padding = %d, len = %d)\n",
>> +				plcp_data[0],
>> +				plcp_data[1],
>> +				plcp_data[2],
>> +				plcp_data[3],
>> +				padding,
>> +				skb->len);
>> +		}
>> +        }
>> +
>>  	skb_pull(skb, sizeof(struct b43_plcp_hdr6) + padding);
>>  	/* The skb contains the Wireless Header + payload data now */
>>  	if (unlikely(skb->len < (2 + 2 + 6 /*minimum hdr */  + FCS_LEN))) {
>> @@ -569,6 +648,23 @@
>>  	wlhdr = (struct ieee80211_hdr *)(skb->data);
>>  	fctl = wlhdr->frame_control;
>>
>> +	/* if we keep bad frames we should compute again the FCS as fw can
>> skip marking */
>> +        if ((dev->wl->filter_flags & FIF_FCSFAIL) && !(macstat &
>> B43_RX_MAC_FCSERR)) {
>> +		u32 fcs1, fcs2;
>> +		u8* fcs_ptr = skb->data + skb->len - FCS_LEN;
>> +		fcs1 = fcs_ptr[0] |
>> +			fcs_ptr[1] << 8  |
>> +			fcs_ptr[2] << 16 |
>> +			fcs_ptr[3] << 24;
>> +		fcs2 = ~ether_crc_le(skb->len - FCS_LEN, skb->data);
>> +		if(fcs1 != fcs2) {
>> +			b43dbg(dev->wl, "RX: FCS wrong not reported, setting FCSFAIL and
>> keeping\n");
>> +			macstat |= B43_RX_MAC_FCSERR;
>> +			dev->wl->ieee_stats.dot11FCSErrorCount++;
>> +			status.flag |= RX_FLAG_FAILED_FCS_CRC;
>> +		}
>> +	}
>> +
>>  	if (macstat & B43_RX_MAC_DEC) {
>>  		unsigned int keyidx;
>>  		int wlhdr_len;
>> @@ -617,6 +721,10 @@
>>  		 * Drop the frame, if we are not interested in corrupted frames.  
>> */
>>  		if (!(dev->wl->filter_flags & FIF_PLCPFAIL))
>>  			goto drop;
>> +		else {
>> +			b43dbg(dev->wl, "RX: PLCP corrupted, discarding\n");
>> +			goto drop;
>> +		}
>>  	}
>>  	status.antenna = !!(phystat0 & B43_RX_PHYST0_ANT);
>>
>>
>>
>>
>
>
>
> -- 
> Greetings, Michael.

-------

Francesco Gringoli, PhD - Assistant Professor
Dept. of Electrical Engineering for Automation
University of Brescia
via Branze, 38
25123 Brescia
ITALY

Ph:  ++39.030.3715843
FAX: ++39.030.380014
WWW: http://www.ing.unibs.it/~gringoli






From david at identd.dyndns.org  Sun Apr  5 22:19:03 2009
From: david at identd.dyndns.org (David Ellingsworth)
Date: Sun, 5 Apr 2009 16:19:03 -0400
Subject: [PATCH] b43: Refresh RX poison on buffer recycling
In-Reply-To: <46762F98-C244-42C7-8F42-D206137385C3@ing.unibs.it>
References: <200903280041.25265.mb@bu3sch.de>
	<C0D59D9C-FC8A-4C79-B777-AF2F166D9711@ing.unibs.it>
	<6A0437BB-3D78-4BB9-AB76-F40C1BEF9CBF@ing.unibs.it>
	<200904052058.00856.mb@bu3sch.de>
	<46762F98-C244-42C7-8F42-D206137385C3@ing.unibs.it>
Message-ID: <30353c3d0904051319t44af2d81i685d719204463b1@mail.gmail.com>

On Sun, Apr 5, 2009 at 3:54 PM, Francesco Gringoli
<francesco.gringoli at ing.unibs.it> wrote:
>
> On Apr 5, 2009, at 8:58 PM, Michael Buesch wrote:
>
>> On Sunday 05 April 2009 20:01:22 Francesco Gringoli wrote:
>>> On Mar 30, 2009, at 11:35 PM, Francesco Gringoli wrote:
>>>
>>>>
>>>> On Mar 28, 2009, at 12:41 AM, Michael Buesch wrote:
>>>>
>>>>>
> Hi Michael,
>
>>
>> I think this really is completely getting overengineered by now.
>>
>> I'm not going to apply such a patch unless you tell me why it's
>> needed.
>> Having such an incredible mechanism for an absolute corner case that
>> happens
>> once in a billion frames but doesn't harm anybody is not really
>> acceptable.
> No problem :-) I simply sent the patch I'm using in my test
> environment where I get this behavior for the 0.1% of the received
> frames when FCSFAIL is set. Note that here we collect traces for
> experiments with 802.11 protocol, so we need this kind of patches.
>
> I understand that very few of us are doing such kind of experiments
> and users are not, I simply sent a comment about these devices. It may
> improve knowledge about them.
>
> Cheers,
> -FG
>

While I more or less agree with Michael on this, I can also see that
these changes may be useful in some environments. Thus, rather than
always adding unneeded complexity to the driver, it might be better if
changes like these could be placed under a general network define
kernel option. Then users wishing to have strict frame checks when
FCSFAIL is set have the option to do so.

Regards,

David Ellingsworth


From david at identd.dyndns.org  Mon Apr  6 05:26:33 2009
From: david at identd.dyndns.org (David Ellingsworth)
Date: Sun, 5 Apr 2009 23:26:33 -0400
Subject: b43 Hostap Performance
Message-ID: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>

I've setup and configured hostapd with b43. For the most part I
followed the guide here: http://acx100.erley.org/git.html except that
I've used the latest wireless-testing branch. Airodump-ng shows the AP
to be beaconing well with an average signal of -49db, while my Windows
wireless client shows an average signal strength of -60db. Connecting
to the AP, however seems to be a bit problematic. When a connection is
established, the link is very unreliable and rather unresponsive.
While connecting from Windows XP I was only able to connect at 1Mb.
The stability of the connection is so bad that it usually dies within
minutes after connecting. Wpa_supplicant under Linux produces similar
results. Pings from the station to the AP show severe packet loss with
increasing delay for those that are successful (2000 - 4000ms). This
is all at a range of about 10ft from the AP while maintaining a clear
line of sight. I've found that enabling/disabling encryption doesn't
seem to help alleviate any of the issues. Running hostap with -ddd
occasionally shows the following output:

STA ca:fe:ba:be:d0:0d sent probe request for our SSID
MGMT (TX callback) fail
mgmt::proberesp cb

or a timeout between the station and the AP during the authentication process.

If there's anything I can do to help debug this issue, I'm more than
willing to help.

Regards,

David Ellingsworth


From peter at stuge.se  Mon Apr  6 10:28:26 2009
From: peter at stuge.se (Peter Stuge)
Date: Mon, 6 Apr 2009 10:28:26 +0200
Subject: b43 Hostap Performance
In-Reply-To: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
Message-ID: <20090406082826.14664.qmail@stuge.se>

David Ellingsworth wrote:
> This is all at a range of about 10ft from the AP while maintaining
> a clear line of sight.

Closer isn't neccessarily better. Could you check that the receivers
aren't being saturated by too strong transmissions?


> If there's anything I can do to help debug this issue, I'm more
> than willing to help.

Maybe try lowering txpower a bit, or move things further apart?


//Peter


From mb at bu3sch.de  Mon Apr  6 12:14:26 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Mon, 6 Apr 2009 12:14:26 +0200
Subject: b43 Hostap Performance
In-Reply-To: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
Message-ID: <200904061214.26604.mb@bu3sch.de>

On Monday 06 April 2009 05:26:33 David Ellingsworth wrote:
> I've setup and configured hostapd with b43. For the most part I
> followed the guide here: http://acx100.erley.org/git.html except that
> I've used the latest wireless-testing branch. Airodump-ng shows the AP
> to be beaconing well with an average signal of -49db, while my Windows
> wireless client shows an average signal strength of -60db. Connecting
> to the AP, however seems to be a bit problematic. When a connection is
> established, the link is very unreliable and rather unresponsive.
> While connecting from Windows XP I was only able to connect at 1Mb.
> The stability of the connection is so bad that it usually dies within
> minutes after connecting. Wpa_supplicant under Linux produces similar
> results. Pings from the station to the AP show severe packet loss with
> increasing delay for those that are successful (2000 - 4000ms). This
> is all at a range of about 10ft from the AP while maintaining a clear
> line of sight. I've found that enabling/disabling encryption doesn't
> seem to help alleviate any of the issues. Running hostap with -ddd
> occasionally shows the following output:
> 
> STA ca:fe:ba:be:d0:0d sent probe request for our SSID
> MGMT (TX callback) fail
> mgmt::proberesp cb
> 
> or a timeout between the station and the AP during the authentication process.
> 
> If there's anything I can do to help debug this issue, I'm more than
> willing to help.

Well, you know that lots of cards don't work correctly with b43.
I bet you're using a BCM4318 flavor.

-- 
Greetings, Michael.


From david at identd.dyndns.org  Mon Apr  6 16:03:11 2009
From: david at identd.dyndns.org (David Ellingsworth)
Date: Mon, 6 Apr 2009 10:03:11 -0400
Subject: b43 Hostap Performance
In-Reply-To: <200904061214.26604.mb@bu3sch.de>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
	<200904061214.26604.mb@bu3sch.de>
Message-ID: <30353c3d0904060703s6503828el384d8a8a237a7e59@mail.gmail.com>

On Mon, Apr 6, 2009 at 6:14 AM, Michael Buesch <mb at bu3sch.de> wrote:
> On Monday 06 April 2009 05:26:33 David Ellingsworth wrote:
>> I've setup and configured hostapd with b43. For the most part I
>> followed the guide here: http://acx100.erley.org/git.html except that
>> I've used the latest wireless-testing branch. Airodump-ng shows the AP
>> to be beaconing well with an average signal of -49db, while my Windows
>> wireless client shows an average signal strength of -60db. Connecting
>> to the AP, however seems to be a bit problematic. When a connection is
>> established, the link is very unreliable and rather unresponsive.
>> While connecting from Windows XP I was only able to connect at 1Mb.
>> The stability of the connection is so bad that it usually dies within
>> minutes after connecting. Wpa_supplicant under Linux produces similar
>> results. Pings from the station to the AP show severe packet loss with
>> increasing delay for those that are successful (2000 - 4000ms). This
>> is all at a range of about 10ft from the AP while maintaining a clear
>> line of sight. I've found that enabling/disabling encryption doesn't
>> seem to help alleviate any of the issues. Running hostap with -ddd
>> occasionally shows the following output:
>>
>> STA ca:fe:ba:be:d0:0d sent probe request for our SSID
>> MGMT (TX callback) fail
>> mgmt::proberesp cb
>>
>> or a timeout between the station and the AP during the authentication process.
>>
>> If there's anything I can do to help debug this issue, I'm more than
>> willing to help.
>
> Well, you know that lots of cards don't work correctly with b43.
> I bet you're using a BCM4318 flavor.
>

Sadly, yes, it is a BCM4318. I've tried moving further away from the
AP, as well as decreasing the txpower output.. neither seemed to help
any. I suspect something else may be the cause of the poor performance
that I'm seeing. I'll try to rule out the card as a problem tonight by
setting up an Ad-Hoc network under Windows XP. If I observe good
performance then maybe b43 is the issue... In which case.. I'll start
the painful process of comparing the Windows driver to b43. If I find
any discrepancies, I'll send them to the reverse engineers to be
posted with the rest of the specs. Then maybe you or someone else can
make the appropriate changes to b43.

Regards,

David Ellingsworth


From mb at bu3sch.de  Mon Apr  6 17:04:25 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Mon, 6 Apr 2009 17:04:25 +0200
Subject: b43 Hostap Performance
In-Reply-To: <30353c3d0904060703s6503828el384d8a8a237a7e59@mail.gmail.com>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
	<200904061214.26604.mb@bu3sch.de>
	<30353c3d0904060703s6503828el384d8a8a237a7e59@mail.gmail.com>
Message-ID: <200904061704.26078.mb@bu3sch.de>

On Monday 06 April 2009 16:03:11 David Ellingsworth wrote:
> On Mon, Apr 6, 2009 at 6:14 AM, Michael Buesch <mb at bu3sch.de> wrote:
> > On Monday 06 April 2009 05:26:33 David Ellingsworth wrote:
> >> I've setup and configured hostapd with b43. For the most part I
> >> followed the guide here: http://acx100.erley.org/git.html except that
> >> I've used the latest wireless-testing branch. Airodump-ng shows the AP
> >> to be beaconing well with an average signal of -49db, while my Windows
> >> wireless client shows an average signal strength of -60db. Connecting
> >> to the AP, however seems to be a bit problematic. When a connection is
> >> established, the link is very unreliable and rather unresponsive.
> >> While connecting from Windows XP I was only able to connect at 1Mb.
> >> The stability of the connection is so bad that it usually dies within
> >> minutes after connecting. Wpa_supplicant under Linux produces similar
> >> results. Pings from the station to the AP show severe packet loss with
> >> increasing delay for those that are successful (2000 - 4000ms). This
> >> is all at a range of about 10ft from the AP while maintaining a clear
> >> line of sight. I've found that enabling/disabling encryption doesn't
> >> seem to help alleviate any of the issues. Running hostap with -ddd
> >> occasionally shows the following output:
> >>
> >> STA ca:fe:ba:be:d0:0d sent probe request for our SSID
> >> MGMT (TX callback) fail
> >> mgmt::proberesp cb
> >>
> >> or a timeout between the station and the AP during the authentication process.
> >>
> >> If there's anything I can do to help debug this issue, I'm more than
> >> willing to help.
> >
> > Well, you know that lots of cards don't work correctly with b43.
> > I bet you're using a BCM4318 flavor.
> >
> 
> Sadly, yes, it is a BCM4318. I've tried moving further away from the
> AP, as well as decreasing the txpower output.. neither seemed to help
> any. I suspect something else may be the cause of the poor performance
> that I'm seeing. I'll try to rule out the card as a problem tonight by
> setting up an Ad-Hoc network under Windows XP. If I observe good
> performance then maybe b43 is the issue... In which case.. I'll start
> the painful process of comparing the Windows driver to b43. If I find
> any discrepancies, I'll send them to the reverse engineers to be
> posted with the rest of the specs. Then maybe you or someone else can
> make the appropriate changes to b43.

4318 currently is not usable in AP mode due to low but (for AP mode) significant
packet loss in high transmission rates.
I doubt this will change unless Broadcom releases some code.

I suggest you just buy another card instead of wasting months of time on trying
to get this to work.

-- 
Greetings, Michael.


From mb at bu3sch.de  Mon Apr  6 18:00:45 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Mon, 6 Apr 2009 18:00:45 +0200
Subject: firmware capabilities
Message-ID: <200904061800.45827.mb@bu3sch.de>

I'd like to ask you guys to look for an unused u32 field for use as firmware
capabilities field.

This will be used by the driver to check whether the fw supports a feature or not (QoS, crypto, etc...).
The field needs to be unused, so it defaults to all-zero even in older released versions.

Please tell me the SHM offset (byte or word offset).

-- 
Greetings, Michael.


From Larry.Finger at lwfinger.net  Mon Apr  6 19:28:24 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Mon, 06 Apr 2009 12:28:24 -0500
Subject: [PATCH] b43: Remove WARN_ON for rfkill not registered
Message-ID: <49da3bb8.wvkMslMpX/kpPqUV%Larry.Finger@lwfinger.net>

When the latest set of rfkill patches are applied, b43 hits a WARN_ON that
rfkill has not been registered. The test is needed, but not the warning.

Signed-off-by: Larry Finger <Larry.Finger at lwfinger.net>
---

John,

This is 2.6.31 material.

Larry
---

Index: wireless-testing/drivers/net/wireless/b43/rfkill.c
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43/rfkill.c
+++ wireless-testing/drivers/net/wireless/b43/rfkill.c
@@ -74,7 +74,7 @@ static int b43_rfkill_soft_set(void *dat
 	struct b43_wl *wl = dev->wl;
 	int err = -EINVAL;
 
-	if (WARN_ON(!wl->rfkill.registered))
+	if (!wl->rfkill.registered)
 		return -EINVAL;
 
 	mutex_lock(&wl->mutex);


From david at identd.dyndns.org  Mon Apr  6 22:16:57 2009
From: david at identd.dyndns.org (David Ellingsworth)
Date: Mon, 6 Apr 2009 16:16:57 -0400
Subject: b43 Hostap Performance
In-Reply-To: <200904061704.26078.mb@bu3sch.de>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
	<200904061214.26604.mb@bu3sch.de>
	<30353c3d0904060703s6503828el384d8a8a237a7e59@mail.gmail.com>
	<200904061704.26078.mb@bu3sch.de>
Message-ID: <30353c3d0904061316r59c13294md54d38e2b1ec8dc9@mail.gmail.com>

On Mon, Apr 6, 2009 at 11:04 AM, Michael Buesch <mb at bu3sch.de> wrote:
> On Monday 06 April 2009 16:03:11 David Ellingsworth wrote:
>> On Mon, Apr 6, 2009 at 6:14 AM, Michael Buesch <mb at bu3sch.de> wrote:
>> > On Monday 06 April 2009 05:26:33 David Ellingsworth wrote:
>> >> I've setup and configured hostapd with b43. For the most part I
>> >> followed the guide here: http://acx100.erley.org/git.html except that
>> >> I've used the latest wireless-testing branch. Airodump-ng shows the AP
>> >> to be beaconing well with an average signal of -49db, while my Windows
>> >> wireless client shows an average signal strength of -60db. Connecting
>> >> to the AP, however seems to be a bit problematic. When a connection is
>> >> established, the link is very unreliable and rather unresponsive.
>> >> While connecting from Windows XP I was only able to connect at 1Mb.
>> >> The stability of the connection is so bad that it usually dies within
>> >> minutes after connecting. Wpa_supplicant under Linux produces similar
>> >> results. Pings from the station to the AP show severe packet loss with
>> >> increasing delay for those that are successful (2000 - 4000ms). This
>> >> is all at a range of about 10ft from the AP while maintaining a clear
>> >> line of sight. I've found that enabling/disabling encryption doesn't
>> >> seem to help alleviate any of the issues. Running hostap with -ddd
>> >> occasionally shows the following output:
>> >>
>> >> STA ca:fe:ba:be:d0:0d sent probe request for our SSID
>> >> MGMT (TX callback) fail
>> >> mgmt::proberesp cb
>> >>
>> >> or a timeout between the station and the AP during the authentication process.
>> >>
>> >> If there's anything I can do to help debug this issue, I'm more than
>> >> willing to help.
>> >
>> > Well, you know that lots of cards don't work correctly with b43.
>> > I bet you're using a BCM4318 flavor.
>> >
>>
>> Sadly, yes, it is a BCM4318. I've tried moving further away from the
>> AP, as well as decreasing the txpower output.. neither seemed to help
>> any. I suspect something else may be the cause of the poor performance
>> that I'm seeing. I'll try to rule out the card as a problem tonight by
>> setting up an Ad-Hoc network under Windows XP. If I observe good
>> performance then maybe b43 is the issue... In which case.. I'll start
>> the painful process of comparing the Windows driver to b43. If I find
>> any discrepancies, I'll send them to the reverse engineers to be
>> posted with the rest of the specs. Then maybe you or someone else can
>> make the appropriate changes to b43.
>
> 4318 currently is not usable in AP mode due to low but (for AP mode) significant
> packet loss in high transmission rates.
> I doubt this will change unless Broadcom releases some code.
>
> I suggest you just buy another card instead of wasting months of time on trying
> to get this to work.
>

Running an AP isn't exactly high priority for me.. I'm willing to put
the effort into making b43 better if possible.

Regards,

David Ellingsworth


From francesco.gringoli at ing.unibs.it  Tue Apr  7 01:27:57 2009
From: francesco.gringoli at ing.unibs.it (Francesco Gringoli)
Date: Tue, 7 Apr 2009 01:27:57 +0200
Subject: firmware capabilities
In-Reply-To: <200904061800.45827.mb@bu3sch.de>
References: <200904061800.45827.mb@bu3sch.de>
Message-ID: <155D89F7-3CA6-4A06-9580-41676C1C5BB3@ing.unibs.it>

On Apr 6, 2009, at 6:00 PM, Michael Buesch wrote:

> I'd like to ask you guys to look for an unused u32 field for use as  
> firmware
> capabilities field.
>
> This will be used by the driver to check whether the fw supports a  
> feature or not (QoS, crypto, etc...).
> The field needs to be unused, so it defaults to all-zero even in  
> older released versions.
>
> Please tell me the SHM offset (byte or word offset).
Hi Michael,

I will check tomorrow with all ucodexx for a shm location that is  
never accessed.

Many thanks,
-FG

>
>
> -- 
> Greetings, Michael.

-------

Francesco Gringoli, PhD - Assistant Professor
Dept. of Electrical Engineering for Automation
University of Brescia
via Branze, 38
25123 Brescia
ITALY

Ph:  ++39.030.3715843
FAX: ++39.030.380014
WWW: http://www.ing.unibs.it/~gringoli






From david at identd.dyndns.org  Tue Apr  7 01:42:22 2009
From: david at identd.dyndns.org (David Ellingsworth)
Date: Mon, 6 Apr 2009 19:42:22 -0400
Subject: b43 Hostap Performance
In-Reply-To: <30353c3d0904061316r59c13294md54d38e2b1ec8dc9@mail.gmail.com>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
	<200904061214.26604.mb@bu3sch.de>
	<30353c3d0904060703s6503828el384d8a8a237a7e59@mail.gmail.com>
	<200904061704.26078.mb@bu3sch.de>
	<30353c3d0904061316r59c13294md54d38e2b1ec8dc9@mail.gmail.com>
Message-ID: <30353c3d0904061642w21fb479sb799072be524311f@mail.gmail.com>

On Mon, Apr 6, 2009 at 4:16 PM, David Ellingsworth
<david at identd.dyndns.org> wrote:
> On Mon, Apr 6, 2009 at 11:04 AM, Michael Buesch <mb at bu3sch.de> wrote:
>> On Monday 06 April 2009 16:03:11 David Ellingsworth wrote:
>>> On Mon, Apr 6, 2009 at 6:14 AM, Michael Buesch <mb at bu3sch.de> wrote:
>>> > On Monday 06 April 2009 05:26:33 David Ellingsworth wrote:
>>> >> I've setup and configured hostapd with b43. For the most part I
>>> >> followed the guide here: http://acx100.erley.org/git.html except that
>>> >> I've used the latest wireless-testing branch. Airodump-ng shows the AP
>>> >> to be beaconing well with an average signal of -49db, while my Windows
>>> >> wireless client shows an average signal strength of -60db. Connecting
>>> >> to the AP, however seems to be a bit problematic. When a connection is
>>> >> established, the link is very unreliable and rather unresponsive.
>>> >> While connecting from Windows XP I was only able to connect at 1Mb.
>>> >> The stability of the connection is so bad that it usually dies within
>>> >> minutes after connecting. Wpa_supplicant under Linux produces similar
>>> >> results. Pings from the station to the AP show severe packet loss with
>>> >> increasing delay for those that are successful (2000 - 4000ms). This
>>> >> is all at a range of about 10ft from the AP while maintaining a clear
>>> >> line of sight. I've found that enabling/disabling encryption doesn't
>>> >> seem to help alleviate any of the issues. Running hostap with -ddd
>>> >> occasionally shows the following output:
>>> >>
>>> >> STA ca:fe:ba:be:d0:0d sent probe request for our SSID
>>> >> MGMT (TX callback) fail
>>> >> mgmt::proberesp cb
>>> >>
>>> >> or a timeout between the station and the AP during the authentication process.
>>> >>
>>> >> If there's anything I can do to help debug this issue, I'm more than
>>> >> willing to help.
>>> >
>>> > Well, you know that lots of cards don't work correctly with b43.
>>> > I bet you're using a BCM4318 flavor.
>>> >
>>>
>>> Sadly, yes, it is a BCM4318. I've tried moving further away from the
>>> AP, as well as decreasing the txpower output.. neither seemed to help
>>> any. I suspect something else may be the cause of the poor performance
>>> that I'm seeing. I'll try to rule out the card as a problem tonight by
>>> setting up an Ad-Hoc network under Windows XP. If I observe good
>>> performance then maybe b43 is the issue... In which case.. I'll start
>>> the painful process of comparing the Windows driver to b43. If I find
>>> any discrepancies, I'll send them to the reverse engineers to be
>>> posted with the rest of the specs. Then maybe you or someone else can
>>> make the appropriate changes to b43.
>>
>> 4318 currently is not usable in AP mode due to low but (for AP mode) significant
>> packet loss in high transmission rates.
>> I doubt this will change unless Broadcom releases some code.
>>
>> I suggest you just buy another card instead of wasting months of time on trying
>> to get this to work.
>>
>
> Running an AP isn't exactly high priority for me.. I'm willing to put
> the effort into making b43 better if possible.
>

So.. it's starting to look like the card is at fault. While bridging
the card to my Ethernet adapter in Windows I was only able to achieve
0.08 Mb/s through the bridge on the speedtest.net speed test. Since I
have yet to experience a decent connection with this card, I think I'm
going to have to return it to Linksys as defective.

Regards,

David Ellingsworth


From mb at bu3sch.de  Tue Apr  7 20:24:41 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Tue, 7 Apr 2009 20:24:41 +0200
Subject: mac80211: changing number of queues in ops->start
Message-ID: <200904072024.41910.mb@bu3sch.de>

I'm wondering how to implement QoS capability runtime detection
in a mac80211 driver.

In b43 we don't know at ieee80211_register time whether the firmware does
support QoS or not, because it's not loaded yet. (Reasons for not loading
it that early are issues with builtin-b43, etc...).
So we don't know whether we are going to load opensource fw (no QoS) or
proprietary fw (QoS capable).
But it seems that mac80211 requires to set hw->queues before ieee80211_register.

So what I'd need is a way to change the number of possible queues from within
the ops->start handler.

Any ideas?

-- 
Greetings, Michael.


From johannes at sipsolutions.net  Tue Apr  7 21:29:27 2009
From: johannes at sipsolutions.net (Johannes Berg)
Date: Tue, 07 Apr 2009 21:29:27 +0200
Subject: mac80211: changing number of queues in ops->start
In-Reply-To: <200904072024.41910.mb@bu3sch.de>
References: <200904072024.41910.mb@bu3sch.de>
Message-ID: <1239132567.7187.1.camel@johannes.local>

On Tue, 2009-04-07 at 20:24 +0200, Michael Buesch wrote:
> I'm wondering how to implement QoS capability runtime detection
> in a mac80211 driver.
> 
> In b43 we don't know at ieee80211_register time whether the firmware does
> support QoS or not, because it's not loaded yet. (Reasons for not loading
> it that early are issues with builtin-b43, etc...).
> So we don't know whether we are going to load opensource fw (no QoS) or
> proprietary fw (QoS capable).
> But it seems that mac80211 requires to set hw->queues before ieee80211_register.
> 
> So what I'd need is a way to change the number of possible queues from within
> the ops->start handler.

Well, I suppose you could register with the max and later reduce and
stop the remaining queues you're not using... Or not stop them and drop
packets on them. That's somewhat fragile, gives people who look at tc a
wrong idea, and I can't imagine supporting it, but it should work.

johannes
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <https://lists.berlios.de/pipermail/bcm43xx-dev/attachments/20090407/8a98a844/attachment.pgp>

From mb at bu3sch.de  Tue Apr  7 21:33:21 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Tue, 7 Apr 2009 21:33:21 +0200
Subject: mac80211: changing number of queues in ops->start
In-Reply-To: <1239132567.7187.1.camel@johannes.local>
References: <200904072024.41910.mb@bu3sch.de>
	<1239132567.7187.1.camel@johannes.local>
Message-ID: <200904072133.21296.mb@bu3sch.de>

On Tuesday 07 April 2009 21:29:27 Johannes Berg wrote:
> On Tue, 2009-04-07 at 20:24 +0200, Michael Buesch wrote:
> > I'm wondering how to implement QoS capability runtime detection
> > in a mac80211 driver.
> > 
> > In b43 we don't know at ieee80211_register time whether the firmware does
> > support QoS or not, because it's not loaded yet. (Reasons for not loading
> > it that early are issues with builtin-b43, etc...).
> > So we don't know whether we are going to load opensource fw (no QoS) or
> > proprietary fw (QoS capable).
> > But it seems that mac80211 requires to set hw->queues before ieee80211_register.
> > 
> > So what I'd need is a way to change the number of possible queues from within
> > the ops->start handler.
> 
> Well, I suppose you could register with the max and later reduce and
> stop the remaining queues you're not using... Or not stop them and drop
> packets on them. That's somewhat fragile, gives people who look at tc a
> wrong idea, and I can't imagine supporting it, but it should work.

mkay, I'll try this. thanks :)

I wonder, however, will mac80211 try to queue packets on queues that are stopped?
And I think just dropping them is not an option, because this will cause breakage.

What about just queueing everything on a single queue, no matter what queue mac80211
puts the frame into? Would this cause ordering issues?
Or the other way around, is there anything that _depends_ on the higher priority queues
to get sent before the higher priority queues?

-- 
Greetings, Michael.


From johannes at sipsolutions.net  Tue Apr  7 21:37:58 2009
From: johannes at sipsolutions.net (Johannes Berg)
Date: Tue, 07 Apr 2009 21:37:58 +0200
Subject: mac80211: changing number of queues in ops->start
In-Reply-To: <200904072133.21296.mb@bu3sch.de>
References: <200904072024.41910.mb@bu3sch.de>
	<1239132567.7187.1.camel@johannes.local>
	<200904072133.21296.mb@bu3sch.de>
Message-ID: <1239133078.7187.3.camel@johannes.local>

On Tue, 2009-04-07 at 21:33 +0200, Michael Buesch wrote:

> > Well, I suppose you could register with the max and later reduce and
> > stop the remaining queues you're not using... Or not stop them and drop
> > packets on them. That's somewhat fragile, gives people who look at tc a
> > wrong idea, and I can't imagine supporting it, but it should work.
> 
> mkay, I'll try this. thanks :)
> 
> I wonder, however, will mac80211 try to queue packets on queues that are stopped?
> And I think just dropping them is not an option, because this will cause breakage.
> 
> What about just queueing everything on a single queue, no matter what queue mac80211
> puts the frame into? Would this cause ordering issues?
> Or the other way around, is there anything that _depends_ on the higher priority queues
> to get sent before the higher priority queues?

mac80211 won't try to select a queue higher than hw->queues at
select_queue time, so it shouldn't try to put packets onto that queue,
look in wme.c.

johannes
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <https://lists.berlios.de/pipermail/bcm43xx-dev/attachments/20090407/ead44683/attachment.pgp>

From mb at bu3sch.de  Tue Apr  7 21:40:23 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Tue, 7 Apr 2009 21:40:23 +0200
Subject: mac80211: changing number of queues in ops->start
In-Reply-To: <1239133078.7187.3.camel@johannes.local>
References: <200904072024.41910.mb@bu3sch.de> <200904072133.21296.mb@bu3sch.de>
	<1239133078.7187.3.camel@johannes.local>
Message-ID: <200904072140.23318.mb@bu3sch.de>

On Tuesday 07 April 2009 21:37:58 Johannes Berg wrote:
> On Tue, 2009-04-07 at 21:33 +0200, Michael Buesch wrote:
> 
> > > Well, I suppose you could register with the max and later reduce and
> > > stop the remaining queues you're not using... Or not stop them and drop
> > > packets on them. That's somewhat fragile, gives people who look at tc a
> > > wrong idea, and I can't imagine supporting it, but it should work.
> > 
> > mkay, I'll try this. thanks :)
> > 
> > I wonder, however, will mac80211 try to queue packets on queues that are stopped?
> > And I think just dropping them is not an option, because this will cause breakage.
> > 
> > What about just queueing everything on a single queue, no matter what queue mac80211
> > puts the frame into? Would this cause ordering issues?
> > Or the other way around, is there anything that _depends_ on the higher priority queues
> > to get sent before the higher priority queues?
> 
> mac80211 won't try to select a queue higher than hw->queues at
> select_queue time, so it shouldn't try to put packets onto that queue,
> look in wme.c.

Ok I see. So you say it's OK to lower hw->queues after ieee80211_register.
Should I reset hw->queues back to the value ieee80211_register was called with, before
I call unregister/free? Are there resources allocated by the number of queues?

-- 
Greetings, Michael.


From johannes at sipsolutions.net  Tue Apr  7 21:46:29 2009
From: johannes at sipsolutions.net (Johannes Berg)
Date: Tue, 07 Apr 2009 21:46:29 +0200
Subject: mac80211: changing number of queues in ops->start
In-Reply-To: <200904072140.23318.mb@bu3sch.de>
References: <200904072024.41910.mb@bu3sch.de> <200904072133.21296.mb@bu3sch.de>
	<1239133078.7187.3.camel@johannes.local>
	<200904072140.23318.mb@bu3sch.de>
Message-ID: <1239133589.7475.3.camel@johannes.local>

On Tue, 2009-04-07 at 21:40 +0200, Michael Buesch wrote:

> Ok I see. So you say it's OK to lower hw->queues after ieee80211_register.

Let's say it's acceptable ;)

> Should I reset hw->queues back to the value ieee80211_register was called with, before
> I call unregister/free? Are there resources allocated by the number of queues?

There are resources allocated, notably the qdiscs etc. in
alloc_ether_mq() or whatever it's called in register_hw(). But the
networking core should keep track of those so it shouldn't matter what
the value is. OTOH if it can switch back and forth the pending packets
are done per queue... for example ieee80211_clear_tx_pending will be
called at unregister times, so if it's possible to be up with 4 queues,
and later be up with 1, you will want to unregister with 4.

johannes
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <https://lists.berlios.de/pipermail/bcm43xx-dev/attachments/20090407/cd33adac/attachment.pgp>

From mb at bu3sch.de  Tue Apr  7 21:51:15 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Tue, 7 Apr 2009 21:51:15 +0200
Subject: mac80211: changing number of queues in ops->start
In-Reply-To: <1239133589.7475.3.camel@johannes.local>
References: <200904072024.41910.mb@bu3sch.de> <200904072140.23318.mb@bu3sch.de>
	<1239133589.7475.3.camel@johannes.local>
Message-ID: <200904072151.15583.mb@bu3sch.de>

On Tuesday 07 April 2009 21:46:29 Johannes Berg wrote:
> On Tue, 2009-04-07 at 21:40 +0200, Michael Buesch wrote:
> 
> > Ok I see. So you say it's OK to lower hw->queues after ieee80211_register.
> 
> Let's say it's acceptable ;)
> 
> > Should I reset hw->queues back to the value ieee80211_register was called with, before
> > I call unregister/free? Are there resources allocated by the number of queues?
> 
> There are resources allocated, notably the qdiscs etc. in
> alloc_ether_mq() or whatever it's called in register_hw(). But the
> networking core should keep track of those so it shouldn't matter what
> the value is. OTOH if it can switch back and forth the pending packets
> are done per queue... for example ieee80211_clear_tx_pending will be
> called at unregister times, so if it's possible to be up with 4 queues,
> and later be up with 1, you will want to unregister with 4.

Ok, sounds like a huge hack to me. :) I'll think about it.

-- 
Greetings, Michael.


From mb at bu3sch.de  Wed Apr  8 02:11:16 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Wed, 8 Apr 2009 02:11:16 +0200
Subject: [PATCH, RFC] b44: Add fw capabilities
Message-ID: <200904080211.16298.mb@bu3sch.de>

Completely untested patch to implement firmware capabilities
and automagic QoS-disabling.


Index: wireless-testing/drivers/net/wireless/b43/b43.h
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43/b43.h	2009-04-07 19:52:34.000000000 +0200
+++ wireless-testing/drivers/net/wireless/b43/b43.h	2009-04-08 01:57:58.000000000 +0200
@@ -163,6 +163,7 @@ enum {
 #define B43_SHM_SH_WLCOREREV		0x0016	/* 802.11 core revision */
 #define B43_SHM_SH_PCTLWDPOS		0x0008
 #define B43_SHM_SH_RXPADOFF		0x0034	/* RX Padding data offset (PIO only) */
+#define B43_SHM_SH_FWCAPA		0x0042	/* Firmware capabilities (Opensource firmware only) */
 #define B43_SHM_SH_PHYVER		0x0050	/* PHY version */
 #define B43_SHM_SH_PHYTYPE		0x0052	/* PHY type */
 #define B43_SHM_SH_ANTSWAP		0x005C	/* Antenna swap threshold */
@@ -297,6 +298,10 @@ enum {
 #define B43_HF_MLADVW		0x001000000000ULL /* N PHY ML ADV workaround (rev >= 13 only) */
 #define B43_HF_PR45960W		0x080000000000ULL /* PR 45960 workaround (rev >= 13 only) */
 
+/* Firmware capabilities field in SHM (Opensource firmware only) */
+#define B43_FWCAPA_HWCRYPTO	0x0001
+#define B43_FWCAPA_QOS		0x0002
+
 /* MacFilter offsets. */
 #define B43_MACFILTER_SELF		0x0000
 #define B43_MACFILTER_BSSID		0x0003
@@ -596,6 +601,13 @@ struct b43_wl {
 	/* Pointer to the ieee80211 hardware data structure */
 	struct ieee80211_hw *hw;
 
+	/* The number of queues that were registered with the mac80211 subsystem
+	 * initially. This is a backup copy of hw->queues in case hw->queues has
+	 * to be dynamically lowered at runtime (Firmware does not support QoS).
+	 * hw->queues has to be restored to the original value before unregistering
+	 * from the mac80211 subsystem. */
+	u16 mac80211_initially_registered_queues;
+
 	struct mutex mutex;
 	spinlock_t irq_lock;
 	/* R/W lock for data transmission.
@@ -752,6 +764,8 @@ struct b43_wldev {
 	bool dfq_valid;		/* Directed frame queue valid (IBSS PS mode, ATIM) */
 	bool radio_hw_enable;	/* saved state of radio hardware enabled state */
 	bool suspend_in_progress;	/* TRUE, if we are in a suspend/resume cycle */
+	bool qos_enabled;		/* TRUE, if QoS is used. */
+	bool hwcrypto_enabled;		/* TRUE, if HW crypto acceleration is enabled. */
 
 	/* PHY/Radio device. */
 	struct b43_phy phy;
Index: wireless-testing/drivers/net/wireless/b43/dma.c
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43/dma.c	2009-04-07 19:58:22.000000000 +0200
+++ wireless-testing/drivers/net/wireless/b43/dma.c	2009-04-08 01:53:56.000000000 +0200
@@ -1285,7 +1285,7 @@ static struct b43_dmaring *select_ring_b
 {
 	struct b43_dmaring *ring;
 
-	if (b43_modparam_qos) {
+	if (dev->qos_enabled) {
 		/* 0 = highest priority */
 		switch (queue_prio) {
 		default:
Index: wireless-testing/drivers/net/wireless/b43/main.c
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43/main.c	2009-04-07 19:55:03.000000000 +0200
+++ wireless-testing/drivers/net/wireless/b43/main.c	2009-04-08 02:02:19.000000000 +0200
@@ -80,8 +80,8 @@ static int modparam_nohwcrypt;
 module_param_named(nohwcrypt, modparam_nohwcrypt, int, 0444);
 MODULE_PARM_DESC(nohwcrypt, "Disable hardware encryption.");
 
-int b43_modparam_qos = 1;
-module_param_named(qos, b43_modparam_qos, int, 0444);
+static int modparam_qos = 1;
+module_param_named(qos, modparam_qos, int, 0444);
 MODULE_PARM_DESC(qos, "Enable QOS support (default on)");
 
 static int modparam_btcoex = 1;
@@ -538,6 +538,13 @@ void b43_hf_write(struct b43_wldev *dev,
 	b43_shm_write16(dev, B43_SHM_SHARED, B43_SHM_SH_HOSTFHI, hi);
 }
 
+/* Read the firmware capabilities bitmask (Opensource firmware only) */
+static u16 b43_fwcapa_read(struct b43_wldev *dev)
+{
+	B43_WARN_ON(!dev->fw.opensource);
+	return b43_shm_read16(dev, B43_SHM_SHARED, B43_SHM_SH_FWCAPA);
+}
+
 void b43_tsf_read(struct b43_wldev *dev, u64 *tsf)
 {
 	u32 low, high;
@@ -2330,12 +2337,34 @@ static int b43_upload_microcode(struct b
 	dev->fw.patch = fwpatch;
 	dev->fw.opensource = (fwdate == 0xFFFF);
 
+	/* Default to use-all-queues. */
+	dev->wl->hw->queues = dev->wl->mac80211_initially_registered_queues;
+	dev->qos_enabled = !!modparam_qos;
+	/* Default to firmware/hardware crypto acceleration. */
+	dev->hwcrypto_enabled = 1;
+
 	if (dev->fw.opensource) {
+		u16 fwcapa;
+
 		/* Patchlevel info is encoded in the "time" field. */
 		dev->fw.patch = fwtime;
-		b43info(dev->wl, "Loading OpenSource firmware version %u.%u%s\n",
-			dev->fw.rev, dev->fw.patch,
-			dev->fw.pcm_request_failed ? " (Hardware crypto not supported)" : "");
+		b43info(dev->wl, "Loading OpenSource firmware version %u.%u\n",
+			dev->fw.rev, dev->fw.patch);
+
+		fwcapa = b43_fwcapa_read(dev);
+		if (!(fwcapa & B43_FWCAPA_HWCRYPTO) || dev->fw.pcm_request_failed) {
+			b43info(dev->wl, "Hardware crypto acceleration not supported by firmware\n");
+			/* Disable hardware crypto and fall back to software crypto. */
+			dev->hwcrypto_enabled = 0;
+		}
+		if (!(fwcapa & B43_FWCAPA_QOS)) {
+			b43info(dev->wl, "QoS not supported by firmware\n");
+			/* Disable QoS. Tweak hw->queues to 1. It will be restored before
+			 * ieee80211_unregister to make sure the networking core can
+			 * properly free possible resources. */
+			dev->wl->hw->queues = 1;
+			dev->qos_enabled = 0;
+		}
 	} else {
 		b43info(dev->wl, "Loading firmware version %u.%u "
 			"(20%.2i-%.2i-%.2i %.2i:%.2i:%.2i)\n",
@@ -3626,7 +3655,7 @@ static int b43_op_set_key(struct ieee802
 	if (!dev || b43_status(dev) < B43_STAT_INITIALIZED)
 		goto out_unlock;
 
-	if (dev->fw.pcm_request_failed) {
+	if (dev->fw.pcm_request_failed || !dev->hwcrypto_enabled) {
 		/* We don't have firmware for the crypto engine.
 		 * Must use software-crypto. */
 		err = -EOPNOTSUPP;
@@ -4770,6 +4799,7 @@ static int b43_wireless_init(struct ssb_
 		b43err(NULL, "Could not allocate ieee80211 device\n");
 		goto out;
 	}
+	wl = hw_to_b43_wl(hw);
 
 	/* fill hw info */
 	hw->flags = IEEE80211_HW_RX_INCLUDES_FCS |
@@ -4783,7 +4813,8 @@ static int b43_wireless_init(struct ssb_
 		BIT(NL80211_IFTYPE_WDS) |
 		BIT(NL80211_IFTYPE_ADHOC);
 
-	hw->queues = b43_modparam_qos ? 4 : 1;
+	hw->queues = modparam_qos ? 4 : 1;
+	wl->mac80211_initially_registered_queues = hw->queues;
 	hw->max_rates = 2;
 	SET_IEEE80211_DEV(hw, dev->dev);
 	if (is_valid_ether_addr(sprom->et1mac))
@@ -4791,9 +4822,7 @@ static int b43_wireless_init(struct ssb_
 	else
 		SET_IEEE80211_PERM_ADDR(hw, sprom->il0mac);
 
-	/* Get and initialize struct b43_wl */
-	wl = hw_to_b43_wl(hw);
-	memset(wl, 0, sizeof(*wl));
+	/* Initialize struct b43_wl */
 	wl->hw = hw;
 	spin_lock_init(&wl->irq_lock);
 	rwlock_init(&wl->tx_lock);
@@ -4859,8 +4888,13 @@ static void b43_remove(struct ssb_device
 	cancel_work_sync(&wldev->restart_work);
 
 	B43_WARN_ON(!wl);
-	if (wl->current_dev == wldev)
+	if (wl->current_dev == wldev) {
+		/* Restore the queues count before unregistering, because firmware detect
+		 * might have modified it. Restoring is important, so the networking
+		 * stack can properly free resources. */
+		wl->hw->queues = wl->mac80211_initially_registered_queues;
 		ieee80211_unregister_hw(wl->hw);
+	}
 
 	b43_one_core_detach(dev);
 
Index: wireless-testing/drivers/net/wireless/b43/main.h
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43/main.h	2009-04-08 01:53:15.000000000 +0200
+++ wireless-testing/drivers/net/wireless/b43/main.h	2009-04-08 01:53:20.000000000 +0200
@@ -39,7 +39,6 @@
 #define PAD_BYTES(nr_bytes)		P4D_BYTES( __LINE__ , (nr_bytes))
 
 
-extern int b43_modparam_qos;
 extern int b43_modparam_verbose;
 
 /* Logmessage verbosity levels. Update the b43_modparam_verbose helptext, if
Index: wireless-testing/drivers/net/wireless/b43/pio.c
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43/pio.c	2009-04-08 02:10:23.000000000 +0200
+++ wireless-testing/drivers/net/wireless/b43/pio.c	2009-04-08 02:10:38.000000000 +0200
@@ -313,7 +313,7 @@ static struct b43_pio_txqueue *select_qu
 {
 	struct b43_pio_txqueue *q;
 
-	if (b43_modparam_qos) {
+	if (dev->qos_enabled) {
 		/* 0 = highest priority */
 		switch (queue_prio) {
 		default:


-- 
Greetings, Michael.


From netrolller.3d at gmail.com  Wed Apr  8 14:30:06 2009
From: netrolller.3d at gmail.com (=?ISO-8859-1?Q?G=E1bor_Stefanik?=)
Date: Wed, 8 Apr 2009 14:30:06 +0200
Subject: [PATCH, RFC] b44: Add fw capabilities
In-Reply-To: <200904080211.16298.mb@bu3sch.de>
References: <200904080211.16298.mb@bu3sch.de>
Message-ID: <69e28c910904080530j10cdd69co5232cc1121090ca4@mail.gmail.com>

I assume "b44" in the title is a typo.

On Wed, Apr 8, 2009 at 2:11 AM, Michael Buesch <mb at bu3sch.de> wrote:
> Completely untested patch to implement firmware capabilities
> and automagic QoS-disabling.
>
>
> Index: wireless-testing/drivers/net/wireless/b43/b43.h
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/b43.h ? ? ? ?2009-04-07 19:52:34.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/b43.h ? ? 2009-04-08 01:57:58.000000000 +0200
> @@ -163,6 +163,7 @@ enum {
> ?#define B43_SHM_SH_WLCOREREV ? ? ? ? ? 0x0016 ?/* 802.11 core revision */
> ?#define B43_SHM_SH_PCTLWDPOS ? ? ? ? ? 0x0008
> ?#define B43_SHM_SH_RXPADOFF ? ? ? ? ? ?0x0034 ?/* RX Padding data offset (PIO only) */
> +#define B43_SHM_SH_FWCAPA ? ? ? ? ? ? ?0x0042 ?/* Firmware capabilities (Opensource firmware only) */
> ?#define B43_SHM_SH_PHYVER ? ? ? ? ? ? ?0x0050 ?/* PHY version */
> ?#define B43_SHM_SH_PHYTYPE ? ? ? ? ? ? 0x0052 ?/* PHY type */
> ?#define B43_SHM_SH_ANTSWAP ? ? ? ? ? ? 0x005C ?/* Antenna swap threshold */
> @@ -297,6 +298,10 @@ enum {
> ?#define B43_HF_MLADVW ? ? ? ? ?0x001000000000ULL /* N PHY ML ADV workaround (rev >= 13 only) */
> ?#define B43_HF_PR45960W ? ? ? ? ? ? ? ?0x080000000000ULL /* PR 45960 workaround (rev >= 13 only) */
>
> +/* Firmware capabilities field in SHM (Opensource firmware only) */
> +#define B43_FWCAPA_HWCRYPTO ? ?0x0001
> +#define B43_FWCAPA_QOS ? ? ? ? 0x0002
> +
> ?/* MacFilter offsets. */
> ?#define B43_MACFILTER_SELF ? ? ? ? ? ? 0x0000
> ?#define B43_MACFILTER_BSSID ? ? ? ? ? ?0x0003
> @@ -596,6 +601,13 @@ struct b43_wl {
> ? ? ? ?/* Pointer to the ieee80211 hardware data structure */
> ? ? ? ?struct ieee80211_hw *hw;
>
> + ? ? ? /* The number of queues that were registered with the mac80211 subsystem
> + ? ? ? ?* initially. This is a backup copy of hw->queues in case hw->queues has
> + ? ? ? ?* to be dynamically lowered at runtime (Firmware does not support QoS).
> + ? ? ? ?* hw->queues has to be restored to the original value before unregistering
> + ? ? ? ?* from the mac80211 subsystem. */
> + ? ? ? u16 mac80211_initially_registered_queues;
> +
> ? ? ? ?struct mutex mutex;
> ? ? ? ?spinlock_t irq_lock;
> ? ? ? ?/* R/W lock for data transmission.
> @@ -752,6 +764,8 @@ struct b43_wldev {
> ? ? ? ?bool dfq_valid; ? ? ? ? /* Directed frame queue valid (IBSS PS mode, ATIM) */
> ? ? ? ?bool radio_hw_enable; ? /* saved state of radio hardware enabled state */
> ? ? ? ?bool suspend_in_progress; ? ? ? /* TRUE, if we are in a suspend/resume cycle */
> + ? ? ? bool qos_enabled; ? ? ? ? ? ? ? /* TRUE, if QoS is used. */
> + ? ? ? bool hwcrypto_enabled; ? ? ? ? ?/* TRUE, if HW crypto acceleration is enabled. */
>
> ? ? ? ?/* PHY/Radio device. */
> ? ? ? ?struct b43_phy phy;
> Index: wireless-testing/drivers/net/wireless/b43/dma.c
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/dma.c ? ? ? ?2009-04-07 19:58:22.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/dma.c ? ? 2009-04-08 01:53:56.000000000 +0200
> @@ -1285,7 +1285,7 @@ static struct b43_dmaring *select_ring_b
> ?{
> ? ? ? ?struct b43_dmaring *ring;
>
> - ? ? ? if (b43_modparam_qos) {
> + ? ? ? if (dev->qos_enabled) {
> ? ? ? ? ? ? ? ?/* 0 = highest priority */
> ? ? ? ? ? ? ? ?switch (queue_prio) {
> ? ? ? ? ? ? ? ?default:
> Index: wireless-testing/drivers/net/wireless/b43/main.c
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/main.c ? ? ? 2009-04-07 19:55:03.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/main.c ? ?2009-04-08 02:02:19.000000000 +0200
> @@ -80,8 +80,8 @@ static int modparam_nohwcrypt;
> ?module_param_named(nohwcrypt, modparam_nohwcrypt, int, 0444);
> ?MODULE_PARM_DESC(nohwcrypt, "Disable hardware encryption.");
>
> -int b43_modparam_qos = 1;
> -module_param_named(qos, b43_modparam_qos, int, 0444);
> +static int modparam_qos = 1;
> +module_param_named(qos, modparam_qos, int, 0444);
> ?MODULE_PARM_DESC(qos, "Enable QOS support (default on)");
>
> ?static int modparam_btcoex = 1;
> @@ -538,6 +538,13 @@ void b43_hf_write(struct b43_wldev *dev,
> ? ? ? ?b43_shm_write16(dev, B43_SHM_SHARED, B43_SHM_SH_HOSTFHI, hi);
> ?}
>
> +/* Read the firmware capabilities bitmask (Opensource firmware only) */
> +static u16 b43_fwcapa_read(struct b43_wldev *dev)
> +{
> + ? ? ? B43_WARN_ON(!dev->fw.opensource);
> + ? ? ? return b43_shm_read16(dev, B43_SHM_SHARED, B43_SHM_SH_FWCAPA);
> +}
> +
> ?void b43_tsf_read(struct b43_wldev *dev, u64 *tsf)
> ?{
> ? ? ? ?u32 low, high;
> @@ -2330,12 +2337,34 @@ static int b43_upload_microcode(struct b
> ? ? ? ?dev->fw.patch = fwpatch;
> ? ? ? ?dev->fw.opensource = (fwdate == 0xFFFF);
>
> + ? ? ? /* Default to use-all-queues. */
> + ? ? ? dev->wl->hw->queues = dev->wl->mac80211_initially_registered_queues;
> + ? ? ? dev->qos_enabled = !!modparam_qos;
> + ? ? ? /* Default to firmware/hardware crypto acceleration. */
> + ? ? ? dev->hwcrypto_enabled = 1;
> +
> ? ? ? ?if (dev->fw.opensource) {
> + ? ? ? ? ? ? ? u16 fwcapa;
> +
> ? ? ? ? ? ? ? ?/* Patchlevel info is encoded in the "time" field. */
> ? ? ? ? ? ? ? ?dev->fw.patch = fwtime;
> - ? ? ? ? ? ? ? b43info(dev->wl, "Loading OpenSource firmware version %u.%u%s\n",
> - ? ? ? ? ? ? ? ? ? ? ? dev->fw.rev, dev->fw.patch,
> - ? ? ? ? ? ? ? ? ? ? ? dev->fw.pcm_request_failed ? " (Hardware crypto not supported)" : "");
> + ? ? ? ? ? ? ? b43info(dev->wl, "Loading OpenSource firmware version %u.%u\n",
> + ? ? ? ? ? ? ? ? ? ? ? dev->fw.rev, dev->fw.patch);
> +
> + ? ? ? ? ? ? ? fwcapa = b43_fwcapa_read(dev);
> + ? ? ? ? ? ? ? if (!(fwcapa & B43_FWCAPA_HWCRYPTO) || dev->fw.pcm_request_failed) {
> + ? ? ? ? ? ? ? ? ? ? ? b43info(dev->wl, "Hardware crypto acceleration not supported by firmware\n");
> + ? ? ? ? ? ? ? ? ? ? ? /* Disable hardware crypto and fall back to software crypto. */
> + ? ? ? ? ? ? ? ? ? ? ? dev->hwcrypto_enabled = 0;
> + ? ? ? ? ? ? ? }
> + ? ? ? ? ? ? ? if (!(fwcapa & B43_FWCAPA_QOS)) {
> + ? ? ? ? ? ? ? ? ? ? ? b43info(dev->wl, "QoS not supported by firmware\n");
> + ? ? ? ? ? ? ? ? ? ? ? /* Disable QoS. Tweak hw->queues to 1. It will be restored before
> + ? ? ? ? ? ? ? ? ? ? ? ?* ieee80211_unregister to make sure the networking core can
> + ? ? ? ? ? ? ? ? ? ? ? ?* properly free possible resources. */
> + ? ? ? ? ? ? ? ? ? ? ? dev->wl->hw->queues = 1;
> + ? ? ? ? ? ? ? ? ? ? ? dev->qos_enabled = 0;
> + ? ? ? ? ? ? ? }
> ? ? ? ?} else {
> ? ? ? ? ? ? ? ?b43info(dev->wl, "Loading firmware version %u.%u "
> ? ? ? ? ? ? ? ? ? ? ? ?"(20%.2i-%.2i-%.2i %.2i:%.2i:%.2i)\n",
> @@ -3626,7 +3655,7 @@ static int b43_op_set_key(struct ieee802
> ? ? ? ?if (!dev || b43_status(dev) < B43_STAT_INITIALIZED)
> ? ? ? ? ? ? ? ?goto out_unlock;
>
> - ? ? ? if (dev->fw.pcm_request_failed) {
> + ? ? ? if (dev->fw.pcm_request_failed || !dev->hwcrypto_enabled) {
> ? ? ? ? ? ? ? ?/* We don't have firmware for the crypto engine.
> ? ? ? ? ? ? ? ? * Must use software-crypto. */
> ? ? ? ? ? ? ? ?err = -EOPNOTSUPP;
> @@ -4770,6 +4799,7 @@ static int b43_wireless_init(struct ssb_
> ? ? ? ? ? ? ? ?b43err(NULL, "Could not allocate ieee80211 device\n");
> ? ? ? ? ? ? ? ?goto out;
> ? ? ? ?}
> + ? ? ? wl = hw_to_b43_wl(hw);
>
> ? ? ? ?/* fill hw info */
> ? ? ? ?hw->flags = IEEE80211_HW_RX_INCLUDES_FCS |
> @@ -4783,7 +4813,8 @@ static int b43_wireless_init(struct ssb_
> ? ? ? ? ? ? ? ?BIT(NL80211_IFTYPE_WDS) |
> ? ? ? ? ? ? ? ?BIT(NL80211_IFTYPE_ADHOC);
>
> - ? ? ? hw->queues = b43_modparam_qos ? 4 : 1;
> + ? ? ? hw->queues = modparam_qos ? 4 : 1;
> + ? ? ? wl->mac80211_initially_registered_queues = hw->queues;
> ? ? ? ?hw->max_rates = 2;
> ? ? ? ?SET_IEEE80211_DEV(hw, dev->dev);
> ? ? ? ?if (is_valid_ether_addr(sprom->et1mac))
> @@ -4791,9 +4822,7 @@ static int b43_wireless_init(struct ssb_
> ? ? ? ?else
> ? ? ? ? ? ? ? ?SET_IEEE80211_PERM_ADDR(hw, sprom->il0mac);
>
> - ? ? ? /* Get and initialize struct b43_wl */
> - ? ? ? wl = hw_to_b43_wl(hw);
> - ? ? ? memset(wl, 0, sizeof(*wl));
> + ? ? ? /* Initialize struct b43_wl */
> ? ? ? ?wl->hw = hw;
> ? ? ? ?spin_lock_init(&wl->irq_lock);
> ? ? ? ?rwlock_init(&wl->tx_lock);
> @@ -4859,8 +4888,13 @@ static void b43_remove(struct ssb_device
> ? ? ? ?cancel_work_sync(&wldev->restart_work);
>
> ? ? ? ?B43_WARN_ON(!wl);
> - ? ? ? if (wl->current_dev == wldev)
> + ? ? ? if (wl->current_dev == wldev) {
> + ? ? ? ? ? ? ? /* Restore the queues count before unregistering, because firmware detect
> + ? ? ? ? ? ? ? ?* might have modified it. Restoring is important, so the networking
> + ? ? ? ? ? ? ? ?* stack can properly free resources. */
> + ? ? ? ? ? ? ? wl->hw->queues = wl->mac80211_initially_registered_queues;
> ? ? ? ? ? ? ? ?ieee80211_unregister_hw(wl->hw);
> + ? ? ? }
>
> ? ? ? ?b43_one_core_detach(dev);
>
> Index: wireless-testing/drivers/net/wireless/b43/main.h
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/main.h ? ? ? 2009-04-08 01:53:15.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/main.h ? ?2009-04-08 01:53:20.000000000 +0200
> @@ -39,7 +39,6 @@
> ?#define PAD_BYTES(nr_bytes) ? ? ? ? ? ?P4D_BYTES( __LINE__ , (nr_bytes))
>
>
> -extern int b43_modparam_qos;
> ?extern int b43_modparam_verbose;
>
> ?/* Logmessage verbosity levels. Update the b43_modparam_verbose helptext, if
> Index: wireless-testing/drivers/net/wireless/b43/pio.c
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/pio.c ? ? ? ?2009-04-08 02:10:23.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/pio.c ? ? 2009-04-08 02:10:38.000000000 +0200
> @@ -313,7 +313,7 @@ static struct b43_pio_txqueue *select_qu
> ?{
> ? ? ? ?struct b43_pio_txqueue *q;
>
> - ? ? ? if (b43_modparam_qos) {
> + ? ? ? if (dev->qos_enabled) {
> ? ? ? ? ? ? ? ?/* 0 = highest priority */
> ? ? ? ? ? ? ? ?switch (queue_prio) {
> ? ? ? ? ? ? ? ?default:
>
>
> --
> Greetings, Michael.
> _______________________________________________
> Bcm43xx-dev mailing list
> Bcm43xx-dev at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/bcm43xx-dev
>



-- 
Vista: [V]iruses, [I]ntruders, [S]pyware, [T]rojans and [A]dware. :-)


From mb at bu3sch.de  Wed Apr  8 14:31:57 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Wed, 8 Apr 2009 14:31:57 +0200
Subject: [PATCH, RFC] b44: Add fw capabilities
In-Reply-To: <69e28c910904080530j10cdd69co5232cc1121090ca4@mail.gmail.com>
References: <200904080211.16298.mb@bu3sch.de>
	<69e28c910904080530j10cdd69co5232cc1121090ca4@mail.gmail.com>
Message-ID: <200904081431.57547.mb@bu3sch.de>

On Wednesday 08 April 2009 14:30:06 G?bor Stefanik wrote:
> I assume "b44" in the title is a typo.

I assume you're right ;)

-- 
Greetings, Michael.


From riesebie at lxtec.de  Wed Apr  8 20:20:21 2009
From: riesebie at lxtec.de (Elimar Riesebieter)
Date: Wed, 8 Apr 2009 20:20:21 +0200
Subject: 2.6.30-rc1
Message-ID: <20090408182021.GA4112@aragorn.home.lxtec.de>

Hi all,

b43 is loaded but:
Apr  8 19:47:05 samweis kernel: b43: probe of ssb0:0 failed with error -2

Any sugestions?

Elimar


-- 
  Learned men are the cisterns of knowledge, 
  not the fountainheads ;-)


From mb at bu3sch.de  Wed Apr  8 20:49:59 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Wed, 8 Apr 2009 20:49:59 +0200
Subject: 2.6.30-rc1
In-Reply-To: <20090408182021.GA4112@aragorn.home.lxtec.de>
References: <20090408182021.GA4112@aragorn.home.lxtec.de>
Message-ID: <200904082050.00327.mb@bu3sch.de>

On Wednesday 08 April 2009 20:20:21 Elimar Riesebieter wrote:
> Hi all,
> 
> b43 is loaded but:
> Apr  8 19:47:05 samweis kernel: b43: probe of ssb0:0 failed with error -2
> 
> Any sugestions?


Downgrade the kernel. This is a known bug in the kernelmodule subsystem.

-- 
Greetings, Michael.


From Larry.Finger at lwfinger.net  Wed Apr  8 21:04:23 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Wed, 08 Apr 2009 14:04:23 -0500
Subject: 2.6.30-rc1
In-Reply-To: <200904082050.00327.mb@bu3sch.de>
References: <20090408182021.GA4112@aragorn.home.lxtec.de>
	<200904082050.00327.mb@bu3sch.de>
Message-ID: <49DCF537.8000702@lwfinger.net>

Michael Buesch wrote:
> On Wednesday 08 April 2009 20:20:21 Elimar Riesebieter wrote:
>> Hi all,
>>
>> b43 is loaded but:
>> Apr  8 19:47:05 samweis kernel: b43: probe of ssb0:0 failed with error -2
>>
>> Any sugestions?
> 
> 
> Downgrade the kernel. This is a known bug in the kernelmodule subsystem.

You can also 'sudo modprobe -rv b43 ; sudo modprobe -v b43' to make it work.

Larry


From riesebie at lxtec.de  Wed Apr  8 21:18:59 2009
From: riesebie at lxtec.de (Elimar Riesebieter)
Date: Wed, 8 Apr 2009 21:18:59 +0200
Subject: 2.6.30-rc1
In-Reply-To: <200904082050.00327.mb@bu3sch.de>
References: <20090408182021.GA4112@aragorn.home.lxtec.de>
	<200904082050.00327.mb@bu3sch.de>
Message-ID: <20090408191859.GA3717@samweis.home.lxtec.de>

* Michael Buesch [090408 20:49 +0200]
> On Wednesday 08 April 2009 20:20:21 Elimar Riesebieter wrote:
> > Hi all,
> > 
> > b43 is loaded but:
> > Apr  8 19:47:05 samweis kernel: b43: probe of ssb0:0 failed with error -2
> > 
> > Any sugestions?
> 
> 
> Downgrade the kernel. This is a known bug in the kernelmodule subsystem.

Thanks for the hint ;)

Elimar

-- 
  Alles was viel bedacht wird ist bedenklich!
         Friedrich Nietzsche


From riesebie at lxtec.de  Wed Apr  8 21:26:34 2009
From: riesebie at lxtec.de (Elimar Riesebieter)
Date: Wed, 8 Apr 2009 21:26:34 +0200
Subject: 2.6.30-rc1
In-Reply-To: <49DCF537.8000702@lwfinger.net>
References: <20090408182021.GA4112@aragorn.home.lxtec.de>
	<200904082050.00327.mb@bu3sch.de> <49DCF537.8000702@lwfinger.net>
Message-ID: <20090408192634.GB3717@samweis.home.lxtec.de>

* Larry Finger [090408 14:04 -0500]
> Michael Buesch wrote:
> > On Wednesday 08 April 2009 20:20:21 Elimar Riesebieter wrote:
> >> Hi all,
> >>
> >> b43 is loaded but:
> >> Apr  8 19:47:05 samweis kernel: b43: probe of ssb0:0 failed with error -2
> >>
> >> Any sugestions?
> > 
> > 
> > Downgrade the kernel. This is a known bug in the kernelmodule subsystem.
> 
> You can also 'sudo modprobe -rv b43 ; sudo modprobe -v b43' to make it work.

I am loading nis at boottime. If there is no net net available,
nis's broadcasting slows down my powerbook to an unusable
system.....  I'll test it in a none lan environment.

Thanks
Elimar

-- 
  The path to source is always uphill!
                                -unknown-


From mb at bu3sch.de  Wed Apr  8 21:26:27 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Wed, 8 Apr 2009 21:26:27 +0200
Subject: [PATCH] b43: Remove unnecessary MMIO in interrupt hotpath
Message-ID: <200904082126.27572.mb@bu3sch.de>

This removes unnecessary MMIO accesses in the interrupt hotpath.

Signed-off-by: Michael Buesch <mb at bu3sch.de>

---

John, please queue for the next feature round.

Index: compat-wireless-2009-03-31/drivers/net/wireless/b43/b43.h
===================================================================
--- compat-wireless-2009-03-31.orig/drivers/net/wireless/b43/b43.h	2009-04-08 20:27:37.000000000 +0200
+++ compat-wireless-2009-03-31/drivers/net/wireless/b43/b43.h	2009-04-08 20:28:14.000000000 +0200
@@ -778,8 +778,8 @@ struct b43_wldev {
 	/* Reason code of the last interrupt. */
 	u32 irq_reason;
 	u32 dma_reason[6];
-	/* saved irq enable/disable state bitfield. */
-	u32 irq_savedstate;
+	/* The currently active generic-interrupt mask. */
+	u32 irq_mask;
 	/* Link Quality calculation context. */
 	struct b43_noise_calculation noisecalc;
 	/* if > 0 MAC is suspended. if == 0 MAC is enabled. */
Index: compat-wireless-2009-03-31/drivers/net/wireless/b43/main.c
===================================================================
--- compat-wireless-2009-03-31.orig/drivers/net/wireless/b43/main.c	2009-04-08 20:22:24.000000000 +0200
+++ compat-wireless-2009-03-31/drivers/net/wireless/b43/main.c	2009-04-08 20:41:43.000000000 +0200
@@ -673,32 +673,6 @@ static void b43_short_slot_timing_disabl
 	b43_set_slot_time(dev, 20);
 }
 
-/* Enable a Generic IRQ. "mask" is the mask of which IRQs to enable.
- * Returns the _previously_ enabled IRQ mask.
- */
-static inline u32 b43_interrupt_enable(struct b43_wldev *dev, u32 mask)
-{
-	u32 old_mask;
-
-	old_mask = b43_read32(dev, B43_MMIO_GEN_IRQ_MASK);
-	b43_write32(dev, B43_MMIO_GEN_IRQ_MASK, old_mask | mask);
-
-	return old_mask;
-}
-
-/* Disable a Generic IRQ. "mask" is the mask of which IRQs to disable.
- * Returns the _previously_ enabled IRQ mask.
- */
-static inline u32 b43_interrupt_disable(struct b43_wldev *dev, u32 mask)
-{
-	u32 old_mask;
-
-	old_mask = b43_read32(dev, B43_MMIO_GEN_IRQ_MASK);
-	b43_write32(dev, B43_MMIO_GEN_IRQ_MASK, old_mask & ~mask);
-
-	return old_mask;
-}
-
 /* Synchronize IRQ top- and bottom-half.
  * IRQs must be masked before calling this.
  * This must not be called with the irq_lock held.
@@ -1593,7 +1567,7 @@ static void handle_irq_beacon(struct b43
 	/* This is the bottom half of the asynchronous beacon update. */
 
 	/* Ignore interrupt in the future. */
-	dev->irq_savedstate &= ~B43_IRQ_BEACON;
+	dev->irq_mask &= ~B43_IRQ_BEACON;
 
 	cmd = b43_read32(dev, B43_MMIO_MACCMD);
 	beacon0_valid = (cmd & B43_MACCMD_BEACON0_VALID);
@@ -1602,7 +1576,7 @@ static void handle_irq_beacon(struct b43
 	/* Schedule interrupt manually, if busy. */
 	if (beacon0_valid && beacon1_valid) {
 		b43_write32(dev, B43_MMIO_GEN_IRQ_REASON, B43_IRQ_BEACON);
-		dev->irq_savedstate |= B43_IRQ_BEACON;
+		dev->irq_mask |= B43_IRQ_BEACON;
 		return;
 	}
 
@@ -1641,11 +1615,9 @@ static void b43_beacon_update_trigger_wo
 	if (likely(dev && (b43_status(dev) >= B43_STAT_INITIALIZED))) {
 		spin_lock_irq(&wl->irq_lock);
 		/* update beacon right away or defer to irq */
-		dev->irq_savedstate = b43_read32(dev, B43_MMIO_GEN_IRQ_MASK);
 		handle_irq_beacon(dev);
 		/* The handler might have updated the IRQ mask. */
-		b43_write32(dev, B43_MMIO_GEN_IRQ_MASK,
-			    dev->irq_savedstate);
+		b43_write32(dev, B43_MMIO_GEN_IRQ_MASK, dev->irq_mask);
 		mmiowb();
 		spin_unlock_irq(&wl->irq_lock);
 	}
@@ -1879,7 +1851,7 @@ static void b43_interrupt_tasklet(struct
 	if (reason & B43_IRQ_TX_OK)
 		handle_irq_transmit_status(dev);
 
-	b43_interrupt_enable(dev, dev->irq_savedstate);
+	b43_write32(dev, B43_MMIO_GEN_IRQ_MASK, dev->irq_mask);
 	mmiowb();
 	spin_unlock_irqrestore(&dev->wl->irq_lock, flags);
 }
@@ -1893,7 +1865,9 @@ static void b43_interrupt_ack(struct b43
 	b43_write32(dev, B43_MMIO_DMA2_REASON, dev->dma_reason[2]);
 	b43_write32(dev, B43_MMIO_DMA3_REASON, dev->dma_reason[3]);
 	b43_write32(dev, B43_MMIO_DMA4_REASON, dev->dma_reason[4]);
+/* Unused ring
 	b43_write32(dev, B43_MMIO_DMA5_REASON, dev->dma_reason[5]);
+*/
 }
 
 /* Interrupt handler top-half */
@@ -1903,18 +1877,19 @@ static irqreturn_t b43_interrupt_handler
 	struct b43_wldev *dev = dev_id;
 	u32 reason;
 
-	if (!dev)
-		return IRQ_NONE;
+	B43_WARN_ON(!dev);
 
 	spin_lock(&dev->wl->irq_lock);
 
-	if (b43_status(dev) < B43_STAT_STARTED)
+	if (unlikely(b43_status(dev) < B43_STAT_STARTED)) {
+		/* This can only happen on shared IRQ lines. */
 		goto out;
+	}
 	reason = b43_read32(dev, B43_MMIO_GEN_IRQ_REASON);
 	if (reason == 0xffffffff)	/* shared IRQ */
 		goto out;
 	ret = IRQ_HANDLED;
-	reason &= b43_read32(dev, B43_MMIO_GEN_IRQ_MASK);
+	reason &= dev->irq_mask;
 	if (!reason)
 		goto out;
 
@@ -1928,16 +1903,18 @@ static irqreturn_t b43_interrupt_handler
 	    & 0x0001DC00;
 	dev->dma_reason[4] = b43_read32(dev, B43_MMIO_DMA4_REASON)
 	    & 0x0000DC00;
+/* Unused ring
 	dev->dma_reason[5] = b43_read32(dev, B43_MMIO_DMA5_REASON)
 	    & 0x0000DC00;
+*/
 
 	b43_interrupt_ack(dev, reason);
 	/* disable all IRQs. They are enabled again in the bottom half. */
-	dev->irq_savedstate = b43_interrupt_disable(dev, B43_IRQ_ALL);
+	b43_write32(dev, B43_MMIO_GEN_IRQ_MASK, 0);
 	/* save the reason code and call our bottom half. */
 	dev->irq_reason = reason;
 	tasklet_schedule(&dev->isr_tasklet);
-      out:
+out:
 	mmiowb();
 	spin_unlock(&dev->wl->irq_lock);
 
@@ -3799,7 +3776,7 @@ static void b43_wireless_core_stop(struc
 	 * setting the status to INITIALIZED, as the interrupt handler
 	 * won't care about IRQs then. */
 	spin_lock_irqsave(&wl->irq_lock, flags);
-	dev->irq_savedstate = b43_interrupt_disable(dev, B43_IRQ_ALL);
+	b43_write32(dev, B43_MMIO_GEN_IRQ_MASK, 0);
 	b43_read32(dev, B43_MMIO_GEN_IRQ_MASK);	/* flush */
 	spin_unlock_irqrestore(&wl->irq_lock, flags);
 	b43_synchronize_irq(dev);
@@ -3840,7 +3817,7 @@ static int b43_wireless_core_start(struc
 
 	/* Start data flow (TX/RX). */
 	b43_mac_enable(dev);
-	b43_interrupt_enable(dev, dev->irq_savedstate);
+	b43_write32(dev, B43_MMIO_GEN_IRQ_MASK, dev->irq_mask);
 
 	/* Start maintainance work */
 	b43_periodic_tasks_setup(dev);
@@ -3998,9 +3975,9 @@ static void setup_struct_wldev_for_init(
 	/* IRQ related flags */
 	dev->irq_reason = 0;
 	memset(dev->dma_reason, 0, sizeof(dev->dma_reason));
-	dev->irq_savedstate = B43_IRQ_MASKTEMPLATE;
+	dev->irq_mask = B43_IRQ_MASKTEMPLATE;
 	if (b43_modparam_verbose < B43_VERBOSITY_DEBUG)
-		dev->irq_savedstate &= ~B43_IRQ_PHY_TXERR;
+		dev->irq_mask &= ~B43_IRQ_PHY_TXERR;
 
 	dev->mac_suspended = 1;
 

-- 
Greetings, Michael.


From Larry.Finger at lwfinger.net  Wed Apr  8 23:18:19 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Wed, 08 Apr 2009 16:18:19 -0500
Subject: Problems with 2.6.30-rc1
In-Reply-To: <20090408192634.GB3717@samweis.home.lxtec.de>
References: <20090408182021.GA4112@aragorn.home.lxtec.de>	<200904082050.00327.mb@bu3sch.de>
	<49DCF537.8000702@lwfinger.net>
	<20090408192634.GB3717@samweis.home.lxtec.de>
Message-ID: <49DD149B.2060300@lwfinger.net>


If you are having problems with wireless networking using 2.6.30-rc1 from
Linus's Linux-2.6 git tree, the fix is the following (Note: This is _NOT_ needed
for wireless-testing!!!):

---
Fix try_then_request_module to use waiting __request_module again.

Signed-off-by: Andreas Schwab <schwab at linux-m68k.org>
---
 include/linux/kmod.h |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

Index: linux-2.6.30-rc1/include/linux/kmod.h
===================================================================
--- linux-2.6.30-rc1.orig/include/linux/kmod.h	2009-04-08 12:47:54.000000000 +0200
+++ linux-2.6.30-rc1/include/linux/kmod.h	2009-04-08 17:39:35.000000000 +0200
@@ -34,7 +34,7 @@ extern int __request_module(bool wait, c
 #define request_module(mod...) __request_module(true, mod)
 #define request_module_nowait(mod...) __request_module(false, mod)
 #define try_then_request_module(x, mod...) \
-	((x) ?: (__request_module(false, mod), (x)))
+	((x) ?: (__request_module(true, mod), (x)))
 #else
 static inline int request_module(const char *name, ...) { return -ENOSYS; }
 static inline int request_module_nowait(const char *name, ...) { return -ENOSYS; }

-- 


From gavron at wetwork.net  Thu Apr  9 05:59:34 2009
From: gavron at wetwork.net (gavron at wetwork.net)
Date: Wed, 08 Apr 2009 20:59:34 -0700
Subject: Problems with 2.6.30-rc1
In-Reply-To: <49DD149B.2060300@lwfinger.net>
References: <20090408182021.GA4112@aragorn.home.lxtec.de>
	<200904082050.00327.mb@bu3sch.de> <49DCF537.8000702@lwfinger.net>
	<20090408192634.GB3717@samweis.home.lxtec.de>
	<49DD149B.2060300@lwfinger.net>
Message-ID: <49DD72A6.7060002@wetwork.net>

I had the same problem on my iwlagn notebook.  This patch successfully 
fixed that as well!

Thanks, Larry :)

Ehud

Larry Finger wrote:
> If you are having problems with wireless networking using 2.6.30-rc1 from
> Linus's Linux-2.6 git tree, the fix is the following (Note: This is _NOT_ needed
> for wireless-testing!!!):
>
> ---
> Fix try_then_request_module to use waiting __request_module again.
>
> Signed-off-by: Andreas Schwab <schwab at linux-m68k.org>
> ---
>  include/linux/kmod.h |    2 +-
>  1 file changed, 1 insertion(+), 1 deletion(-)
>
> Index: linux-2.6.30-rc1/include/linux/kmod.h
> ===================================================================
> --- linux-2.6.30-rc1.orig/include/linux/kmod.h	2009-04-08 12:47:54.000000000 +0200
> +++ linux-2.6.30-rc1/include/linux/kmod.h	2009-04-08 17:39:35.000000000 +0200
> @@ -34,7 +34,7 @@ extern int __request_module(bool wait, c
>  #define request_module(mod...) __request_module(true, mod)
>  #define request_module_nowait(mod...) __request_module(false, mod)
>  #define try_then_request_module(x, mod...) \
> -	((x) ?: (__request_module(false, mod), (x)))
> +	((x) ?: (__request_module(true, mod), (x)))
>  #else
>  static inline int request_module(const char *name, ...) { return -ENOSYS; }
>  static inline int request_module_nowait(const char *name, ...) { return -ENOSYS; }
>
>   

-- 
Legal Disclaimer that you are now contractually bound to under all laws with no recourse:
http://attrition.org/security/rants/z/disclaimers.html



From mb at bu3sch.de  Thu Apr  9 12:18:39 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Thu, 9 Apr 2009 12:18:39 +0200
Subject: [PATCH, RFC] b44: Add fw capabilities
In-Reply-To: <200904080211.16298.mb@bu3sch.de>
References: <200904080211.16298.mb@bu3sch.de>
Message-ID: <200904091218.39468.mb@bu3sch.de>

On Wednesday 08 April 2009 02:11:16 Michael Buesch wrote:
> Completely untested patch to implement firmware capabilities
> and automagic QoS-disabling.
> 

So could somebody who uses opensource fw test this?

Module parameter qos=0 should not be needed anymore. So please test opensource fw
with qos=1.


> Index: wireless-testing/drivers/net/wireless/b43/b43.h
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/b43.h	2009-04-07 19:52:34.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/b43.h	2009-04-08 01:57:58.000000000 +0200
> @@ -163,6 +163,7 @@ enum {
>  #define B43_SHM_SH_WLCOREREV		0x0016	/* 802.11 core revision */
>  #define B43_SHM_SH_PCTLWDPOS		0x0008
>  #define B43_SHM_SH_RXPADOFF		0x0034	/* RX Padding data offset (PIO only) */
> +#define B43_SHM_SH_FWCAPA		0x0042	/* Firmware capabilities (Opensource firmware only) */
>  #define B43_SHM_SH_PHYVER		0x0050	/* PHY version */
>  #define B43_SHM_SH_PHYTYPE		0x0052	/* PHY type */
>  #define B43_SHM_SH_ANTSWAP		0x005C	/* Antenna swap threshold */
> @@ -297,6 +298,10 @@ enum {
>  #define B43_HF_MLADVW		0x001000000000ULL /* N PHY ML ADV workaround (rev >= 13 only) */
>  #define B43_HF_PR45960W		0x080000000000ULL /* PR 45960 workaround (rev >= 13 only) */
>  
> +/* Firmware capabilities field in SHM (Opensource firmware only) */
> +#define B43_FWCAPA_HWCRYPTO	0x0001
> +#define B43_FWCAPA_QOS		0x0002
> +
>  /* MacFilter offsets. */
>  #define B43_MACFILTER_SELF		0x0000
>  #define B43_MACFILTER_BSSID		0x0003
> @@ -596,6 +601,13 @@ struct b43_wl {
>  	/* Pointer to the ieee80211 hardware data structure */
>  	struct ieee80211_hw *hw;
>  
> +	/* The number of queues that were registered with the mac80211 subsystem
> +	 * initially. This is a backup copy of hw->queues in case hw->queues has
> +	 * to be dynamically lowered at runtime (Firmware does not support QoS).
> +	 * hw->queues has to be restored to the original value before unregistering
> +	 * from the mac80211 subsystem. */
> +	u16 mac80211_initially_registered_queues;
> +
>  	struct mutex mutex;
>  	spinlock_t irq_lock;
>  	/* R/W lock for data transmission.
> @@ -752,6 +764,8 @@ struct b43_wldev {
>  	bool dfq_valid;		/* Directed frame queue valid (IBSS PS mode, ATIM) */
>  	bool radio_hw_enable;	/* saved state of radio hardware enabled state */
>  	bool suspend_in_progress;	/* TRUE, if we are in a suspend/resume cycle */
> +	bool qos_enabled;		/* TRUE, if QoS is used. */
> +	bool hwcrypto_enabled;		/* TRUE, if HW crypto acceleration is enabled. */
>  
>  	/* PHY/Radio device. */
>  	struct b43_phy phy;
> Index: wireless-testing/drivers/net/wireless/b43/dma.c
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/dma.c	2009-04-07 19:58:22.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/dma.c	2009-04-08 01:53:56.000000000 +0200
> @@ -1285,7 +1285,7 @@ static struct b43_dmaring *select_ring_b
>  {
>  	struct b43_dmaring *ring;
>  
> -	if (b43_modparam_qos) {
> +	if (dev->qos_enabled) {
>  		/* 0 = highest priority */
>  		switch (queue_prio) {
>  		default:
> Index: wireless-testing/drivers/net/wireless/b43/main.c
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/main.c	2009-04-07 19:55:03.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/main.c	2009-04-08 02:02:19.000000000 +0200
> @@ -80,8 +80,8 @@ static int modparam_nohwcrypt;
>  module_param_named(nohwcrypt, modparam_nohwcrypt, int, 0444);
>  MODULE_PARM_DESC(nohwcrypt, "Disable hardware encryption.");
>  
> -int b43_modparam_qos = 1;
> -module_param_named(qos, b43_modparam_qos, int, 0444);
> +static int modparam_qos = 1;
> +module_param_named(qos, modparam_qos, int, 0444);
>  MODULE_PARM_DESC(qos, "Enable QOS support (default on)");
>  
>  static int modparam_btcoex = 1;
> @@ -538,6 +538,13 @@ void b43_hf_write(struct b43_wldev *dev,
>  	b43_shm_write16(dev, B43_SHM_SHARED, B43_SHM_SH_HOSTFHI, hi);
>  }
>  
> +/* Read the firmware capabilities bitmask (Opensource firmware only) */
> +static u16 b43_fwcapa_read(struct b43_wldev *dev)
> +{
> +	B43_WARN_ON(!dev->fw.opensource);
> +	return b43_shm_read16(dev, B43_SHM_SHARED, B43_SHM_SH_FWCAPA);
> +}
> +
>  void b43_tsf_read(struct b43_wldev *dev, u64 *tsf)
>  {
>  	u32 low, high;
> @@ -2330,12 +2337,34 @@ static int b43_upload_microcode(struct b
>  	dev->fw.patch = fwpatch;
>  	dev->fw.opensource = (fwdate == 0xFFFF);
>  
> +	/* Default to use-all-queues. */
> +	dev->wl->hw->queues = dev->wl->mac80211_initially_registered_queues;
> +	dev->qos_enabled = !!modparam_qos;
> +	/* Default to firmware/hardware crypto acceleration. */
> +	dev->hwcrypto_enabled = 1;
> +
>  	if (dev->fw.opensource) {
> +		u16 fwcapa;
> +
>  		/* Patchlevel info is encoded in the "time" field. */
>  		dev->fw.patch = fwtime;
> -		b43info(dev->wl, "Loading OpenSource firmware version %u.%u%s\n",
> -			dev->fw.rev, dev->fw.patch,
> -			dev->fw.pcm_request_failed ? " (Hardware crypto not supported)" : "");
> +		b43info(dev->wl, "Loading OpenSource firmware version %u.%u\n",
> +			dev->fw.rev, dev->fw.patch);
> +
> +		fwcapa = b43_fwcapa_read(dev);
> +		if (!(fwcapa & B43_FWCAPA_HWCRYPTO) || dev->fw.pcm_request_failed) {
> +			b43info(dev->wl, "Hardware crypto acceleration not supported by firmware\n");
> +			/* Disable hardware crypto and fall back to software crypto. */
> +			dev->hwcrypto_enabled = 0;
> +		}
> +		if (!(fwcapa & B43_FWCAPA_QOS)) {
> +			b43info(dev->wl, "QoS not supported by firmware\n");
> +			/* Disable QoS. Tweak hw->queues to 1. It will be restored before
> +			 * ieee80211_unregister to make sure the networking core can
> +			 * properly free possible resources. */
> +			dev->wl->hw->queues = 1;
> +			dev->qos_enabled = 0;
> +		}
>  	} else {
>  		b43info(dev->wl, "Loading firmware version %u.%u "
>  			"(20%.2i-%.2i-%.2i %.2i:%.2i:%.2i)\n",
> @@ -3626,7 +3655,7 @@ static int b43_op_set_key(struct ieee802
>  	if (!dev || b43_status(dev) < B43_STAT_INITIALIZED)
>  		goto out_unlock;
>  
> -	if (dev->fw.pcm_request_failed) {
> +	if (dev->fw.pcm_request_failed || !dev->hwcrypto_enabled) {
>  		/* We don't have firmware for the crypto engine.
>  		 * Must use software-crypto. */
>  		err = -EOPNOTSUPP;
> @@ -4770,6 +4799,7 @@ static int b43_wireless_init(struct ssb_
>  		b43err(NULL, "Could not allocate ieee80211 device\n");
>  		goto out;
>  	}
> +	wl = hw_to_b43_wl(hw);
>  
>  	/* fill hw info */
>  	hw->flags = IEEE80211_HW_RX_INCLUDES_FCS |
> @@ -4783,7 +4813,8 @@ static int b43_wireless_init(struct ssb_
>  		BIT(NL80211_IFTYPE_WDS) |
>  		BIT(NL80211_IFTYPE_ADHOC);
>  
> -	hw->queues = b43_modparam_qos ? 4 : 1;
> +	hw->queues = modparam_qos ? 4 : 1;
> +	wl->mac80211_initially_registered_queues = hw->queues;
>  	hw->max_rates = 2;
>  	SET_IEEE80211_DEV(hw, dev->dev);
>  	if (is_valid_ether_addr(sprom->et1mac))
> @@ -4791,9 +4822,7 @@ static int b43_wireless_init(struct ssb_
>  	else
>  		SET_IEEE80211_PERM_ADDR(hw, sprom->il0mac);
>  
> -	/* Get and initialize struct b43_wl */
> -	wl = hw_to_b43_wl(hw);
> -	memset(wl, 0, sizeof(*wl));
> +	/* Initialize struct b43_wl */
>  	wl->hw = hw;
>  	spin_lock_init(&wl->irq_lock);
>  	rwlock_init(&wl->tx_lock);
> @@ -4859,8 +4888,13 @@ static void b43_remove(struct ssb_device
>  	cancel_work_sync(&wldev->restart_work);
>  
>  	B43_WARN_ON(!wl);
> -	if (wl->current_dev == wldev)
> +	if (wl->current_dev == wldev) {
> +		/* Restore the queues count before unregistering, because firmware detect
> +		 * might have modified it. Restoring is important, so the networking
> +		 * stack can properly free resources. */
> +		wl->hw->queues = wl->mac80211_initially_registered_queues;
>  		ieee80211_unregister_hw(wl->hw);
> +	}
>  
>  	b43_one_core_detach(dev);
>  
> Index: wireless-testing/drivers/net/wireless/b43/main.h
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/main.h	2009-04-08 01:53:15.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/main.h	2009-04-08 01:53:20.000000000 +0200
> @@ -39,7 +39,6 @@
>  #define PAD_BYTES(nr_bytes)		P4D_BYTES( __LINE__ , (nr_bytes))
>  
>  
> -extern int b43_modparam_qos;
>  extern int b43_modparam_verbose;
>  
>  /* Logmessage verbosity levels. Update the b43_modparam_verbose helptext, if
> Index: wireless-testing/drivers/net/wireless/b43/pio.c
> ===================================================================
> --- wireless-testing.orig/drivers/net/wireless/b43/pio.c	2009-04-08 02:10:23.000000000 +0200
> +++ wireless-testing/drivers/net/wireless/b43/pio.c	2009-04-08 02:10:38.000000000 +0200
> @@ -313,7 +313,7 @@ static struct b43_pio_txqueue *select_qu
>  {
>  	struct b43_pio_txqueue *q;
>  
> -	if (b43_modparam_qos) {
> +	if (dev->qos_enabled) {
>  		/* 0 = highest priority */
>  		switch (queue_prio) {
>  		default:
> 
> 



-- 
Greetings, Michael.


From francesco.gringoli at ing.unibs.it  Thu Apr  9 12:36:42 2009
From: francesco.gringoli at ing.unibs.it (Francesco Gringoli)
Date: Thu, 9 Apr 2009 12:36:42 +0200
Subject: [PATCH, RFC] b44: Add fw capabilities
In-Reply-To: <200904091218.39468.mb@bu3sch.de>
References: <200904080211.16298.mb@bu3sch.de> <200904091218.39468.mb@bu3sch.de>
Message-ID: <FF4F23CF-3922-4E39-B081-95CE96F691BE@ing.unibs.it>

On Apr 9, 2009, at 12:18 PM, Michael Buesch wrote:

> On Wednesday 08 April 2009 02:11:16 Michael Buesch wrote:
>> Completely untested patch to implement firmware capabilities
>> and automagic QoS-disabling.
>>
>
> So could somebody who uses opensource fw test this?
>
> Module parameter qos=0 should not be needed anymore. So please test  
> opensource fw
> with qos=1.
Hi Michael,

cool! These are excerpts from dmesg. All the times connectivity was ok.

Cheers,
-FG

modprobe b43 qos=0
[  194.368042] b43-phy1: Loading OpenSource firmware version 410.31754
[  194.368054] b43-phy1: Hardware crypto acceleration not supported by  
firmware
[  194.368060] b43-phy1: QoS not supported by firmware

modprobe b43
[  264.328047] b43-phy3: Loading OpenSource firmware version 410.31754
[  264.328058] b43-phy3: Hardware crypto acceleration not supported by  
firmware
[  264.328064] b43-phy3: QoS not supported by firmware

modprobe b43 qos=1
[  309.224044] b43-phy5: Loading OpenSource firmware version 410.31754
[  309.224056] b43-phy5: Hardware crypto acceleration not supported by  
firmware
[  309.224062] b43-phy5: QoS not supported by firmware

>
>
>
>> Index: wireless-testing/drivers/net/wireless/b43/b43.h
>> ===================================================================
>> --- wireless-testing.orig/drivers/net/wireless/b43/b43.h	2009-04-07  
>> 19:52:34.000000000 +0200
>> +++ wireless-testing/drivers/net/wireless/b43/b43.h	2009-04-08  
>> 01:57:58.000000000 +0200
>> @@ -163,6 +163,7 @@ enum {
>> #define B43_SHM_SH_WLCOREREV		0x0016	/* 802.11 core revision */
>> #define B43_SHM_SH_PCTLWDPOS		0x0008
>> #define B43_SHM_SH_RXPADOFF		0x0034	/* RX Padding data offset (PIO  
>> only) */
>> +#define B43_SHM_SH_FWCAPA		0x0042	/* Firmware capabilities  
>> (Opensource firmware only) */
>> #define B43_SHM_SH_PHYVER		0x0050	/* PHY version */
>> #define B43_SHM_SH_PHYTYPE		0x0052	/* PHY type */
>> #define B43_SHM_SH_ANTSWAP		0x005C	/* Antenna swap threshold */
>> @@ -297,6 +298,10 @@ enum {
>> #define B43_HF_MLADVW		0x001000000000ULL /* N PHY ML ADV workaround  
>> (rev >= 13 only) */
>> #define B43_HF_PR45960W		0x080000000000ULL /* PR 45960 workaround  
>> (rev >= 13 only) */
>>
>> +/* Firmware capabilities field in SHM (Opensource firmware only) */
>> +#define B43_FWCAPA_HWCRYPTO	0x0001
>> +#define B43_FWCAPA_QOS		0x0002
>> +
>> /* MacFilter offsets. */
>> #define B43_MACFILTER_SELF		0x0000
>> #define B43_MACFILTER_BSSID		0x0003
>> @@ -596,6 +601,13 @@ struct b43_wl {
>> 	/* Pointer to the ieee80211 hardware data structure */
>> 	struct ieee80211_hw *hw;
>>
>> +	/* The number of queues that were registered with the mac80211  
>> subsystem
>> +	 * initially. This is a backup copy of hw->queues in case hw- 
>> >queues has
>> +	 * to be dynamically lowered at runtime (Firmware does not  
>> support QoS).
>> +	 * hw->queues has to be restored to the original value before  
>> unregistering
>> +	 * from the mac80211 subsystem. */
>> +	u16 mac80211_initially_registered_queues;
>> +
>> 	struct mutex mutex;
>> 	spinlock_t irq_lock;
>> 	/* R/W lock for data transmission.
>> @@ -752,6 +764,8 @@ struct b43_wldev {
>> 	bool dfq_valid;		/* Directed frame queue valid (IBSS PS mode,  
>> ATIM) */
>> 	bool radio_hw_enable;	/* saved state of radio hardware enabled  
>> state */
>> 	bool suspend_in_progress;	/* TRUE, if we are in a suspend/resume  
>> cycle */
>> +	bool qos_enabled;		/* TRUE, if QoS is used. */
>> +	bool hwcrypto_enabled;		/* TRUE, if HW crypto acceleration is  
>> enabled. */
>>
>> 	/* PHY/Radio device. */
>> 	struct b43_phy phy;
>> Index: wireless-testing/drivers/net/wireless/b43/dma.c
>> ===================================================================
>> --- wireless-testing.orig/drivers/net/wireless/b43/dma.c	2009-04-07  
>> 19:58:22.000000000 +0200
>> +++ wireless-testing/drivers/net/wireless/b43/dma.c	2009-04-08  
>> 01:53:56.000000000 +0200
>> @@ -1285,7 +1285,7 @@ static struct b43_dmaring *select_ring_b
>> {
>> 	struct b43_dmaring *ring;
>>
>> -	if (b43_modparam_qos) {
>> +	if (dev->qos_enabled) {
>> 		/* 0 = highest priority */
>> 		switch (queue_prio) {
>> 		default:
>> Index: wireless-testing/drivers/net/wireless/b43/main.c
>> ===================================================================
>> --- wireless-testing.orig/drivers/net/wireless/b43/main.c	 
>> 2009-04-07 19:55:03.000000000 +0200
>> +++ wireless-testing/drivers/net/wireless/b43/main.c	2009-04-08  
>> 02:02:19.000000000 +0200
>> @@ -80,8 +80,8 @@ static int modparam_nohwcrypt;
>> module_param_named(nohwcrypt, modparam_nohwcrypt, int, 0444);
>> MODULE_PARM_DESC(nohwcrypt, "Disable hardware encryption.");
>>
>> -int b43_modparam_qos = 1;
>> -module_param_named(qos, b43_modparam_qos, int, 0444);
>> +static int modparam_qos = 1;
>> +module_param_named(qos, modparam_qos, int, 0444);
>> MODULE_PARM_DESC(qos, "Enable QOS support (default on)");
>>
>> static int modparam_btcoex = 1;
>> @@ -538,6 +538,13 @@ void b43_hf_write(struct b43_wldev *dev,
>> 	b43_shm_write16(dev, B43_SHM_SHARED, B43_SHM_SH_HOSTFHI, hi);
>> }
>>
>> +/* Read the firmware capabilities bitmask (Opensource firmware  
>> only) */
>> +static u16 b43_fwcapa_read(struct b43_wldev *dev)
>> +{
>> +	B43_WARN_ON(!dev->fw.opensource);
>> +	return b43_shm_read16(dev, B43_SHM_SHARED, B43_SHM_SH_FWCAPA);
>> +}
>> +
>> void b43_tsf_read(struct b43_wldev *dev, u64 *tsf)
>> {
>> 	u32 low, high;
>> @@ -2330,12 +2337,34 @@ static int b43_upload_microcode(struct b
>> 	dev->fw.patch = fwpatch;
>> 	dev->fw.opensource = (fwdate == 0xFFFF);
>>
>> +	/* Default to use-all-queues. */
>> +	dev->wl->hw->queues = dev->wl- 
>> >mac80211_initially_registered_queues;
>> +	dev->qos_enabled = !!modparam_qos;
>> +	/* Default to firmware/hardware crypto acceleration. */
>> +	dev->hwcrypto_enabled = 1;
>> +
>> 	if (dev->fw.opensource) {
>> +		u16 fwcapa;
>> +
>> 		/* Patchlevel info is encoded in the "time" field. */
>> 		dev->fw.patch = fwtime;
>> -		b43info(dev->wl, "Loading OpenSource firmware version %u.%u%s\n",
>> -			dev->fw.rev, dev->fw.patch,
>> -			dev->fw.pcm_request_failed ? " (Hardware crypto not  
>> supported)" : "");
>> +		b43info(dev->wl, "Loading OpenSource firmware version %u.%u\n",
>> +			dev->fw.rev, dev->fw.patch);
>> +
>> +		fwcapa = b43_fwcapa_read(dev);
>> +		if (!(fwcapa & B43_FWCAPA_HWCRYPTO) || dev- 
>> >fw.pcm_request_failed) {
>> +			b43info(dev->wl, "Hardware crypto acceleration not supported by  
>> firmware\n");
>> +			/* Disable hardware crypto and fall back to software crypto. */
>> +			dev->hwcrypto_enabled = 0;
>> +		}
>> +		if (!(fwcapa & B43_FWCAPA_QOS)) {
>> +			b43info(dev->wl, "QoS not supported by firmware\n");
>> +			/* Disable QoS. Tweak hw->queues to 1. It will be restored before
>> +			 * ieee80211_unregister to make sure the networking core can
>> +			 * properly free possible resources. */
>> +			dev->wl->hw->queues = 1;
>> +			dev->qos_enabled = 0;
>> +		}
>> 	} else {
>> 		b43info(dev->wl, "Loading firmware version %u.%u "
>> 			"(20%.2i-%.2i-%.2i %.2i:%.2i:%.2i)\n",
>> @@ -3626,7 +3655,7 @@ static int b43_op_set_key(struct ieee802
>> 	if (!dev || b43_status(dev) < B43_STAT_INITIALIZED)
>> 		goto out_unlock;
>>
>> -	if (dev->fw.pcm_request_failed) {
>> +	if (dev->fw.pcm_request_failed || !dev->hwcrypto_enabled) {
>> 		/* We don't have firmware for the crypto engine.
>> 		 * Must use software-crypto. */
>> 		err = -EOPNOTSUPP;
>> @@ -4770,6 +4799,7 @@ static int b43_wireless_init(struct ssb_
>> 		b43err(NULL, "Could not allocate ieee80211 device\n");
>> 		goto out;
>> 	}
>> +	wl = hw_to_b43_wl(hw);
>>
>> 	/* fill hw info */
>> 	hw->flags = IEEE80211_HW_RX_INCLUDES_FCS |
>> @@ -4783,7 +4813,8 @@ static int b43_wireless_init(struct ssb_
>> 		BIT(NL80211_IFTYPE_WDS) |
>> 		BIT(NL80211_IFTYPE_ADHOC);
>>
>> -	hw->queues = b43_modparam_qos ? 4 : 1;
>> +	hw->queues = modparam_qos ? 4 : 1;
>> +	wl->mac80211_initially_registered_queues = hw->queues;
>> 	hw->max_rates = 2;
>> 	SET_IEEE80211_DEV(hw, dev->dev);
>> 	if (is_valid_ether_addr(sprom->et1mac))
>> @@ -4791,9 +4822,7 @@ static int b43_wireless_init(struct ssb_
>> 	else
>> 		SET_IEEE80211_PERM_ADDR(hw, sprom->il0mac);
>>
>> -	/* Get and initialize struct b43_wl */
>> -	wl = hw_to_b43_wl(hw);
>> -	memset(wl, 0, sizeof(*wl));
>> +	/* Initialize struct b43_wl */
>> 	wl->hw = hw;
>> 	spin_lock_init(&wl->irq_lock);
>> 	rwlock_init(&wl->tx_lock);
>> @@ -4859,8 +4888,13 @@ static void b43_remove(struct ssb_device
>> 	cancel_work_sync(&wldev->restart_work);
>>
>> 	B43_WARN_ON(!wl);
>> -	if (wl->current_dev == wldev)
>> +	if (wl->current_dev == wldev) {
>> +		/* Restore the queues count before unregistering, because  
>> firmware detect
>> +		 * might have modified it. Restoring is important, so the  
>> networking
>> +		 * stack can properly free resources. */
>> +		wl->hw->queues = wl->mac80211_initially_registered_queues;
>> 		ieee80211_unregister_hw(wl->hw);
>> +	}
>>
>> 	b43_one_core_detach(dev);
>>
>> Index: wireless-testing/drivers/net/wireless/b43/main.h
>> ===================================================================
>> --- wireless-testing.orig/drivers/net/wireless/b43/main.h	 
>> 2009-04-08 01:53:15.000000000 +0200
>> +++ wireless-testing/drivers/net/wireless/b43/main.h	2009-04-08  
>> 01:53:20.000000000 +0200
>> @@ -39,7 +39,6 @@
>> #define PAD_BYTES(nr_bytes)		P4D_BYTES( __LINE__ , (nr_bytes))
>>
>>
>> -extern int b43_modparam_qos;
>> extern int b43_modparam_verbose;
>>
>> /* Logmessage verbosity levels. Update the b43_modparam_verbose  
>> helptext, if
>> Index: wireless-testing/drivers/net/wireless/b43/pio.c
>> ===================================================================
>> --- wireless-testing.orig/drivers/net/wireless/b43/pio.c	2009-04-08  
>> 02:10:23.000000000 +0200
>> +++ wireless-testing/drivers/net/wireless/b43/pio.c	2009-04-08  
>> 02:10:38.000000000 +0200
>> @@ -313,7 +313,7 @@ static struct b43_pio_txqueue *select_qu
>> {
>> 	struct b43_pio_txqueue *q;
>>
>> -	if (b43_modparam_qos) {
>> +	if (dev->qos_enabled) {
>> 		/* 0 = highest priority */
>> 		switch (queue_prio) {
>> 		default:
>>
>>
>
>
>
> -- 
> Greetings, Michael.
> _______________________________________________
> Bcm43xx-dev mailing list
> Bcm43xx-dev at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/bcm43xx-dev

-------

Francesco Gringoli, PhD - Assistant Professor
Dept. of Electrical Engineering for Automation
University of Brescia
via Branze, 38
25123 Brescia
ITALY

Ph:  ++39.030.3715843
FAX: ++39.030.380014
WWW: http://www.ing.unibs.it/~gringoli






From mb at bu3sch.de  Thu Apr  9 13:26:12 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Thu, 9 Apr 2009 13:26:12 +0200
Subject: [PATCH, RFC] b44: Add fw capabilities
In-Reply-To: <FF4F23CF-3922-4E39-B081-95CE96F691BE@ing.unibs.it>
References: <200904080211.16298.mb@bu3sch.de> <200904091218.39468.mb@bu3sch.de>
	<FF4F23CF-3922-4E39-B081-95CE96F691BE@ing.unibs.it>
Message-ID: <200904091326.12184.mb@bu3sch.de>

On Thursday 09 April 2009 12:36:42 Francesco Gringoli wrote:
> On Apr 9, 2009, at 12:18 PM, Michael Buesch wrote:
> 
> > On Wednesday 08 April 2009 02:11:16 Michael Buesch wrote:
> >> Completely untested patch to implement firmware capabilities
> >> and automagic QoS-disabling.
> >>
> >
> > So could somebody who uses opensource fw test this?
> >
> > Module parameter qos=0 should not be needed anymore. So please test  
> > opensource fw
> > with qos=1.
> Hi Michael,
> 
> cool! These are excerpts from dmesg. All the times connectivity was ok.

Ok nice.
If you guys think 0x42 still is a good SHM offset, I'll submit it upstream.

-- 
Greetings, Michael.


From navalorenx at gmail.com  Thu Apr  9 23:05:06 2009
From: navalorenx at gmail.com (Lorenzo Nava)
Date: Thu, 9 Apr 2009 23:05:06 +0200
Subject: [PATCH, RFC] b44: Add fw capabilities
In-Reply-To: <200904091326.12184.mb@bu3sch.de>
References: <200904080211.16298.mb@bu3sch.de> <200904091218.39468.mb@bu3sch.de>
	<FF4F23CF-3922-4E39-B081-95CE96F691BE@ing.unibs.it>
	<200904091326.12184.mb@bu3sch.de>
Message-ID: <E17FC4F8-24FE-4CF8-BA1B-AFF44432CAD7@gmail.com>

Hi,

I think that Francesco agrees with me, so 0x42 is ok for firmware  
capabilities.

Cheers,

Lorenzo

On Apr 9, 2009, at 1:26 PM, Michael Buesch wrote:

> On Thursday 09 April 2009 12:36:42 Francesco Gringoli wrote:
>> On Apr 9, 2009, at 12:18 PM, Michael Buesch wrote:
>>
>>> On Wednesday 08 April 2009 02:11:16 Michael Buesch wrote:
>>>> Completely untested patch to implement firmware capabilities
>>>> and automagic QoS-disabling.
>>>>
>>>
>>> So could somebody who uses opensource fw test this?
>>>
>>> Module parameter qos=0 should not be needed anymore. So please test
>>> opensource fw
>>> with qos=1.
>> Hi Michael,
>>
>> cool! These are excerpts from dmesg. All the times connectivity was  
>> ok.
>
> Ok nice.
> If you guys think 0x42 still is a good SHM offset, I'll submit it  
> upstream.
>
> -- 
> Greetings, Michael.
> _______________________________________________
> Bcm43xx-dev mailing list
> Bcm43xx-dev at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/bcm43xx-dev



From francesco.gringoli at ing.unibs.it  Thu Apr  9 23:37:14 2009
From: francesco.gringoli at ing.unibs.it (Francesco Gringoli)
Date: Thu, 9 Apr 2009 23:37:14 +0200
Subject: [PATCH, RFC] b44: Add fw capabilities
In-Reply-To: <E17FC4F8-24FE-4CF8-BA1B-AFF44432CAD7@gmail.com>
References: <200904080211.16298.mb@bu3sch.de> <200904091218.39468.mb@bu3sch.de>
	<FF4F23CF-3922-4E39-B081-95CE96F691BE@ing.unibs.it>
	<200904091326.12184.mb@bu3sch.de>
	<E17FC4F8-24FE-4CF8-BA1B-AFF44432CAD7@gmail.com>
Message-ID: <AFEE1712-53B1-47B6-B259-CC39E0E88DA7@ing.unibs.it>

On Apr 9, 2009, at 11:05 PM, Lorenzo Nava wrote:

> Hi,
>
> I think that Francesco agrees with me, so 0x42 is ok for firmware  
> capabilities.
It's ok for me.
-FG

>
>
> Cheers,
>
> Lorenzo
>
> On Apr 9, 2009, at 1:26 PM, Michael Buesch wrote:
>
>> On Thursday 09 April 2009 12:36:42 Francesco Gringoli wrote:
>>> On Apr 9, 2009, at 12:18 PM, Michael Buesch wrote:
>>>
>>>> On Wednesday 08 April 2009 02:11:16 Michael Buesch wrote:
>>>>> Completely untested patch to implement firmware capabilities
>>>>> and automagic QoS-disabling.
>>>>>
>>>>
>>>> So could somebody who uses opensource fw test this?
>>>>
>>>> Module parameter qos=0 should not be needed anymore. So please test
>>>> opensource fw
>>>> with qos=1.
>>> Hi Michael,
>>>
>>> cool! These are excerpts from dmesg. All the times connectivity  
>>> was ok.
>>
>> Ok nice.
>> If you guys think 0x42 still is a good SHM offset, I'll submit it  
>> upstream.
>>
>> -- 
>> Greetings, Michael.
>> _______________________________________________
>> Bcm43xx-dev mailing list
>> Bcm43xx-dev at lists.berlios.de
>> https://lists.berlios.de/mailman/listinfo/bcm43xx-dev
>

-------

Francesco Gringoli, PhD - Assistant Professor
Dept. of Electrical Engineering for Automation
University of Brescia
via Branze, 38
25123 Brescia
ITALY

Ph:  ++39.030.3715843
FAX: ++39.030.380014
WWW: http://www.ing.unibs.it/~gringoli






From riesebie at lxtec.de  Thu Apr  9 23:45:23 2009
From: riesebie at lxtec.de (Elimar Riesebieter)
Date: Thu, 9 Apr 2009 23:45:23 +0200
Subject: Problems with 2.6.30-rc1
In-Reply-To: <49DD149B.2060300@lwfinger.net>
References: <20090408182021.GA4112@aragorn.home.lxtec.de>
	<200904082050.00327.mb@bu3sch.de> <49DCF537.8000702@lwfinger.net>
	<20090408192634.GB3717@samweis.home.lxtec.de>
	<49DD149B.2060300@lwfinger.net>
Message-ID: <20090409214523.GA4581@aragorn.home.lxtec.de>

* Larry Finger [090408 16:18 -0500]
> 
> If you are having problems with wireless networking using 2.6.30-rc1 from
> Linus's Linux-2.6 git tree, the fix is the following (Note: This is _NOT_ needed
> for wireless-testing!!!):
> 
> ---
> Fix try_then_request_module to use waiting __request_module again.

Tried that patch. B43 is loaded but there are probs with alsa and
hald left, though. I wait for rc2, Maybe test git? .

Elimar


-- 
  Alles was viel bedacht wird ist bedenklich!;-)
         Friedrich Nietzsche


From francesco.gringoli at ing.unibs.it  Thu Apr  9 23:47:25 2009
From: francesco.gringoli at ing.unibs.it (Francesco Gringoli)
Date: Thu, 9 Apr 2009 23:47:25 +0200
Subject: b43 Hostap Performance
In-Reply-To: <200904061704.26078.mb@bu3sch.de>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
	<200904061214.26604.mb@bu3sch.de>
	<30353c3d0904060703s6503828el384d8a8a237a7e59@mail.gmail.com>
	<200904061704.26078.mb@bu3sch.de>
Message-ID: <43C34366-F45D-4E7F-AF58-2531C4EDCF22@ing.unibs.it>


On Apr 6, 2009, at 5:04 PM, Michael Buesch wrote:

>>>
>>> Well, you know that lots of cards don't work correctly with b43.
>>> I bet you're using a BCM4318 flavor.
>>>
>>
>> Sadly, yes, it is a BCM4318. I've tried moving further away from the
>> AP, as well as decreasing the txpower output.. neither seemed to help
>> any. I suspect something else may be the cause of the poor  
>> performance
>> that I'm seeing. I'll try to rule out the card as a problem tonight  
>> by
>> setting up an Ad-Hoc network under Windows XP. If I observe good
>> performance then maybe b43 is the issue... In which case.. I'll start
>> the painful process of comparing the Windows driver to b43. If I find
>> any discrepancies, I'll send them to the reverse engineers to be
>> posted with the rest of the specs. Then maybe you or someone else can
>> make the appropriate changes to b43.
>
> 4318 currently is not usable in AP mode due to low but (for AP mode)  
> significant
> packet loss in high transmission rates.
> I doubt this will change unless Broadcom releases some code.
Michael,

is this for all 4318? I'm doing extensive testing these days with both  
4318 and 4306 on x86. I always get very good performance with latest  
hostapd on 2.6.29-rc2-wl. I can also reach maximum theoretical  
throughput if I choose channel 14 to limit interferences. I get max  
throughput independently of the board running hostapd and traffic  
direction.

All this applies to both AP and stations being x86 linux based, e.g.,  
if I try to join an x86 AP running b43 from my macbook I can get good  
performance only occasionally.

Good performance also if the station is a linksys wrt54gl (it uses a  
4318). I can't instead run hostapd successfully on these linksys.

Cheers,
-FG

>
>
> I suggest you just buy another card instead of wasting months of  
> time on trying
> to get this to work.
>
> -- 
> Greetings, Michael.
> _______________________________________________
> Bcm43xx-dev mailing list
> Bcm43xx-dev at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/bcm43xx-dev

-------

Francesco Gringoli, PhD - Assistant Professor
Dept. of Electrical Engineering for Automation
University of Brescia
via Branze, 38
25123 Brescia
ITALY

Ph:  ++39.030.3715843
FAX: ++39.030.380014
WWW: http://www.ing.unibs.it/~gringoli






From mb at bu3sch.de  Thu Apr  9 23:56:27 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Thu, 9 Apr 2009 23:56:27 +0200
Subject: b43 Hostap Performance
In-Reply-To: <43C34366-F45D-4E7F-AF58-2531C4EDCF22@ing.unibs.it>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
	<200904061704.26078.mb@bu3sch.de>
	<43C34366-F45D-4E7F-AF58-2531C4EDCF22@ing.unibs.it>
Message-ID: <200904092356.27494.mb@bu3sch.de>

On Thursday 09 April 2009 23:47:25 Francesco Gringoli wrote:
> 
> On Apr 6, 2009, at 5:04 PM, Michael Buesch wrote:
> 
> >>>
> >>> Well, you know that lots of cards don't work correctly with b43.
> >>> I bet you're using a BCM4318 flavor.
> >>>
> >>
> >> Sadly, yes, it is a BCM4318. I've tried moving further away from the
> >> AP, as well as decreasing the txpower output.. neither seemed to help
> >> any. I suspect something else may be the cause of the poor  
> >> performance
> >> that I'm seeing. I'll try to rule out the card as a problem tonight  
> >> by
> >> setting up an Ad-Hoc network under Windows XP. If I observe good
> >> performance then maybe b43 is the issue... In which case.. I'll start
> >> the painful process of comparing the Windows driver to b43. If I find
> >> any discrepancies, I'll send them to the reverse engineers to be
> >> posted with the rest of the specs. Then maybe you or someone else can
> >> make the appropriate changes to b43.
> >
> > 4318 currently is not usable in AP mode due to low but (for AP mode)  
> > significant
> > packet loss in high transmission rates.
> > I doubt this will change unless Broadcom releases some code.
> Michael,
> 
> is this for all 4318? I'm doing extensive testing these days with both  
> 4318 and 4306 on x86. I always get very good performance with latest  
> hostapd on 2.6.29-rc2-wl. I can also reach maximum theoretical  
> throughput if I choose channel 14 to limit interferences. I get max  
> throughput independently of the board running hostapd and traffic  
> direction.
> 
> All this applies to both AP and stations being x86 linux based, e.g.,  
> if I try to join an x86 AP running b43 from my macbook I can get good  
> performance only occasionally.
> 
> Good performance also if the station is a linksys wrt54gl (it uses a  
> 4318). I can't instead run hostapd successfully on these linksys.

4318 is good enough for STA mode, but in AP mode it doesn't work correctly, because
it simply loses too many packets. So it loses important management frames, etc... .
If you limit the TX rate to 24M it becomes usable, however.
4306 is _much_ better in AP mode.

Of course, there always are exceptions to these rules, because there are about
a million completely different 4318 and and 4306 cards out there.
So you might be lucky to pick one of the few 4318 that works well in AP mode, or
you might pick one of the few 4306 that don't work too well.

-- 
Greetings, Michael.


From francesco.gringoli at ing.unibs.it  Fri Apr 10 00:28:48 2009
From: francesco.gringoli at ing.unibs.it (Francesco Gringoli)
Date: Fri, 10 Apr 2009 00:28:48 +0200
Subject: b43 Hostap Performance
In-Reply-To: <200904092356.27494.mb@bu3sch.de>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
	<200904061704.26078.mb@bu3sch.de>
	<43C34366-F45D-4E7F-AF58-2531C4EDCF22@ing.unibs.it>
	<200904092356.27494.mb@bu3sch.de>
Message-ID: <D39B41DF-2124-4B73-9D15-1CFEE8C632EC@ing.unibs.it>


On Apr 9, 2009, at 11:56 PM, Michael Buesch wrote:

> On Thursday 09 April 2009 23:47:25 Francesco Gringoli wrote:
>>
>> On Apr 6, 2009, at 5:04 PM, Michael Buesch wrote:
>>
>>>>>
>>>>> Well, you know that lots of cards don't work correctly with b43.
>>>>> I bet you're using a BCM4318 flavor.
>>>>>
>>>>
>>>> Sadly, yes, it is a BCM4318. I've tried moving further away from  
>>>> the
>>>> AP, as well as decreasing the txpower output.. neither seemed to  
>>>> help
>>>> any. I suspect something else may be the cause of the poor
>>>> performance
>>>> that I'm seeing. I'll try to rule out the card as a problem tonight
>>>> by
>>>> setting up an Ad-Hoc network under Windows XP. If I observe good
>>>> performance then maybe b43 is the issue... In which case.. I'll  
>>>> start
>>>> the painful process of comparing the Windows driver to b43. If I  
>>>> find
>>>> any discrepancies, I'll send them to the reverse engineers to be
>>>> posted with the rest of the specs. Then maybe you or someone else  
>>>> can
>>>> make the appropriate changes to b43.
>>>
>>> 4318 currently is not usable in AP mode due to low but (for AP mode)
>>> significant
>>> packet loss in high transmission rates.
>>> I doubt this will change unless Broadcom releases some code.
>> Michael,
>>
>> is this for all 4318? I'm doing extensive testing these days with  
>> both
>> 4318 and 4306 on x86. I always get very good performance with latest
>> hostapd on 2.6.29-rc2-wl. I can also reach maximum theoretical
>> throughput if I choose channel 14 to limit interferences. I get max
>> throughput independently of the board running hostapd and traffic
>> direction.
>>
>> All this applies to both AP and stations being x86 linux based, e.g.,
>> if I try to join an x86 AP running b43 from my macbook I can get good
>> performance only occasionally.
>>
>> Good performance also if the station is a linksys wrt54gl (it uses a
>> 4318). I can't instead run hostapd successfully on these linksys.
>
> 4318 is good enough for STA mode, but in AP mode it doesn't work  
> correctly, because
> it simply loses too many packets. So it loses important management  
> frames, etc... .
> If you limit the TX rate to 24M it becomes usable, however.
> 4306 is _much_ better in AP mode.
You mean that it misses to transmit some frames? Do you have  
hypotheses on why AP mode should complete change the behavior of the  
board from "good enough" to "not working correctly"? The only  
difference between station and AP mode AFAIK is that AP mode honors  
the TBTT condition and transmit the beacon when a beacon is needed. I  
say honor since that condition and the other about beacon needed are  
raised also in station mode but they are not handled. I'm confused.
>
>
> Of course, there always are exceptions to these rules, because there  
> are about
> a million completely different 4318 and and 4306 cards out there.
> So you might be lucky to pick one of the few 4318 that works well in  
> AP mode, or
> you might pick one of the few 4306 that don't work too well.
Ok, that could be. I have only 4318 branded as Asus, they are all  
equal. Probably the fact the linksys does not work in AP mode confirm  
what you say.

I have noticed, however a strange fact with these 4318 based linksys:  
when I set one of them in AP mode, beaconing is perfect and I can join  
it from other stations. When I ping the AP from stations I get echo  
reply. If, instead, I ping stations from the AP, no packet is sent! at  
all; if I telnet from stations to the AP, e.g., to port 22, 3whs ends  
but then the TCP session dies. The strange fact is that it seems that  
there are problems for all the frames whose generation involves a  
contest switching from userspace to kernel, in other words a complete  
cross of the mac80211+b43 layers. If instead, on the AP, I completely  
bypass the network stack and directly ask b43 to transmit a frame  
(with a modified b43) the frame is transmitted, at every rate I choose  
(I choose the rate inside the kernel code, I'm not referring to the  
rate set by iwconfig).

Do you have some of these flawed 4318?

-Francesco

>
>
> -- 
> Greetings, Michael.

-------

Francesco Gringoli, PhD - Assistant Professor
Dept. of Electrical Engineering for Automation
University of Brescia
via Branze, 38
25123 Brescia
ITALY

Ph:  ++39.030.3715843
FAX: ++39.030.380014
WWW: http://www.ing.unibs.it/~gringoli






From francesco.gringoli at ing.unibs.it  Fri Apr 10 00:34:32 2009
From: francesco.gringoli at ing.unibs.it (Francesco Gringoli)
Date: Fri, 10 Apr 2009 00:34:32 +0200
Subject: quetion on beacon irq and multibss
In-Reply-To: <200904091326.12184.mb@bu3sch.de>
References: <200904080211.16298.mb@bu3sch.de> <200904091218.39468.mb@bu3sch.de>
	<FF4F23CF-3922-4E39-B081-95CE96F691BE@ing.unibs.it>
	<200904091326.12184.mb@bu3sch.de>
Message-ID: <78689EE8-6DBD-4382-AC35-B8CE39DE6360@ing.unibs.it>

Michael,

I was wondering about the beacon IRQ and those functions inside b43  
that handle such interrupt. In which situations apart the first  
installation of the beacon in template ram, is handle_irq_beacon  
called inside the b43 driver? E.g., openfirmware does not raise the  
beacon irq but beaconing is correct and it has no problem in AP mode.  
Is  this function useful for multibss? e.g., after we send a beacon  
the kernel can upload the next one and so on...

Cheers,
-FG


From mb at bu3sch.de  Fri Apr 10 00:42:36 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Fri, 10 Apr 2009 00:42:36 +0200
Subject: b43 Hostap Performance
In-Reply-To: <D39B41DF-2124-4B73-9D15-1CFEE8C632EC@ing.unibs.it>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
	<200904092356.27494.mb@bu3sch.de>
	<D39B41DF-2124-4B73-9D15-1CFEE8C632EC@ing.unibs.it>
Message-ID: <200904100042.36465.mb@bu3sch.de>

On Friday 10 April 2009 00:28:48 Francesco Gringoli wrote:
> You mean that it misses to transmit some frames? Do you have  
> hypotheses on why AP mode should complete change the behavior of the  
> board from "good enough" to "not working correctly"?

Practice shows this. It's as simple as that.
Try it, if you don't trust me.

> >
> > Of course, there always are exceptions to these rules, because there  
> > are about
> > a million completely different 4318 and and 4306 cards out there.
> > So you might be lucky to pick one of the few 4318 that works well in  
> > AP mode, or
> > you might pick one of the few 4306 that don't work too well.
> Ok, that could be. I have only 4318 branded as Asus, they are all  
> equal. Probably the fact the linksys does not work in AP mode confirm  
> what you say.

I mostly use linksys products for testing.
But I think I could give the asus card a try, if you say it works better in AP mode.

> I have noticed, however a strange fact with these 4318 based linksys:  
> when I set one of them in AP mode, beaconing is perfect and I can join  
> it from other stations. When I ping the AP from stations I get echo  
> reply. If, instead, I ping stations from the AP, no packet is sent! at  
> all; if I telnet from stations to the AP, e.g., to port 22, 3whs ends  
> but then the TCP session dies. The strange fact is that it seems that  
> there are problems for all the frames whose generation involves a  
> contest switching from userspace to kernel, in other words a complete  
> cross of the mac80211+b43 layers. If instead, on the AP, I completely  
> bypass the network stack and directly ask b43 to transmit a frame  
> (with a modified b43) the frame is transmitted, at every rate I choose  
> (I choose the rate inside the kernel code, I'm not referring to the  
> rate set by iwconfig).
> 
> Do you have some of these flawed 4318?

I don't think the type of device influences whether packets are dropped
inside of some random kernel subsystem.

-- 
Greetings, Michael.


From mb at bu3sch.de  Fri Apr 10 00:44:49 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Fri, 10 Apr 2009 00:44:49 +0200
Subject: quetion on beacon irq and multibss
In-Reply-To: <78689EE8-6DBD-4382-AC35-B8CE39DE6360@ing.unibs.it>
References: <200904080211.16298.mb@bu3sch.de> <200904091326.12184.mb@bu3sch.de>
	<78689EE8-6DBD-4382-AC35-B8CE39DE6360@ing.unibs.it>
Message-ID: <200904100044.49635.mb@bu3sch.de>

On Friday 10 April 2009 00:34:32 Francesco Gringoli wrote:
> I was wondering about the beacon IRQ and those functions inside b43  
> that handle such interrupt. In which situations apart the first  
> installation of the beacon in template ram, is handle_irq_beacon  
> called inside the b43 driver? E.g., openfirmware does not raise the  
> beacon irq but beaconing is correct and it has no problem in AP mode.  
> Is  this function useful for multibss? e.g., after we send a beacon  
> the kernel can upload the next one and so on...

It's raised when the beacon needs to be updated. Think about TIM, for example.
This is not used for MBSS.

If openfw does not raise the interrupt, PS most likely is broken and the
firmware cannot work on AP with PS stations associated.

-- 
Greetings, Michael.


From francesco.gringoli at ing.unibs.it  Fri Apr 10 02:15:31 2009
From: francesco.gringoli at ing.unibs.it (Francesco Gringoli)
Date: Fri, 10 Apr 2009 02:15:31 +0200
Subject: b43 Hostap Performance
In-Reply-To: <200904100042.36465.mb@bu3sch.de>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
	<200904092356.27494.mb@bu3sch.de>
	<D39B41DF-2124-4B73-9D15-1CFEE8C632EC@ing.unibs.it>
	<200904100042.36465.mb@bu3sch.de>
Message-ID: <A3D4A15B-BE51-49AD-BA9A-AA986B2C1F7C@ing.unibs.it>

On Apr 10, 2009, at 12:42 AM, Michael Buesch wrote:

> On Friday 10 April 2009 00:28:48 Francesco Gringoli wrote:
>> You mean that it misses to transmit some frames? Do you have
>> hypotheses on why AP mode should complete change the behavior of the
>> board from "good enough" to "not working correctly"?
>
> Practice shows this. It's as simple as that.
> Try it, if you don't trust me.
No no, I didn't want to say that I don't trust what you say, I too  
experienced problems with 4318 on linksys. I'm wondering what could be  
the problem, I was asking if you have any conjecture about.

>>> Of course, there always are exceptions to these rules, because there
>>> are about
>>> a million completely different 4318 and and 4306 cards out there.
>>> So you might be lucky to pick one of the few 4318 that works well in
>>> AP mode, or
>>> you might pick one of the few 4306 that don't work too well.
>> Ok, that could be. I have only 4318 branded as Asus, they are all
>> equal. Probably the fact the linksys does not work in AP mode confirm
>> what you say.
>
> I mostly use linksys products for testing.
> But I think I could give the asus card a try, if you say it works  
> better in AP mode.
Ok that could be nice. Mine is a mini-pci card, it was a very common  
board included in WL500G Premium AP.

>> I have noticed, however a strange fact with these 4318 based linksys:
>> when I set one of them in AP mode, beaconing is perfect and I can  
>> join
>> it from other stations. When I ping the AP from stations I get echo
>> reply. If, instead, I ping stations from the AP, no packet is sent!  
>> at
>> all; if I telnet from stations to the AP, e.g., to port 22, 3whs ends
>> but then the TCP session dies. The strange fact is that it seems that
>> there are problems for all the frames whose generation involves a
>> contest switching from userspace to kernel, in other words a complete
>> cross of the mac80211+b43 layers. If instead, on the AP, I completely
>> bypass the network stack and directly ask b43 to transmit a frame
>> (with a modified b43) the frame is transmitted, at every rate I  
>> choose
>> (I choose the rate inside the kernel code, I'm not referring to the
>> rate set by iwconfig).
>>
>> Do you have some of these flawed 4318?
>
> I don't think the type of device influences whether packets are  
> dropped
> inside of some random kernel subsystem.
>
> -- 
> Greetings, Michael.

-------

Francesco Gringoli, PhD - Assistant Professor
Dept. of Electrical Engineering for Automation
University of Brescia
via Branze, 38
25123 Brescia
ITALY

Ph:  ++39.030.3715843
FAX: ++39.030.380014
WWW: http://www.ing.unibs.it/~gringoli






From francesco.gringoli at ing.unibs.it  Fri Apr 10 02:14:59 2009
From: francesco.gringoli at ing.unibs.it (Francesco Gringoli)
Date: Fri, 10 Apr 2009 02:14:59 +0200
Subject: quetion on beacon irq and multibss
In-Reply-To: <200904100044.49635.mb@bu3sch.de>
References: <200904080211.16298.mb@bu3sch.de> <200904091326.12184.mb@bu3sch.de>
	<78689EE8-6DBD-4382-AC35-B8CE39DE6360@ing.unibs.it>
	<200904100044.49635.mb@bu3sch.de>
Message-ID: <0E8AD9DA-288E-4E70-B041-988548B494A7@ing.unibs.it>


On Apr 10, 2009, at 12:44 AM, Michael Buesch wrote:

> On Friday 10 April 2009 00:34:32 Francesco Gringoli wrote:
>> I was wondering about the beacon IRQ and those functions inside b43
>> that handle such interrupt. In which situations apart the first
>> installation of the beacon in template ram, is handle_irq_beacon
>> called inside the b43 driver? E.g., openfirmware does not raise the
>> beacon irq but beaconing is correct and it has no problem in AP mode.
>> Is  this function useful for multibss? e.g., after we send a beacon
>> the kernel can upload the next one and so on...
>
> It's raised when the beacon needs to be updated. Think about TIM,  
> for example.
> This is not used for MBSS.
I thought this was handled inside the firmware so we put the same  
refreshing code back and forth from template to shm for the tim part.

Ok but what`about MBSS? Is it already implemented in b43? I found some  
old patches from Johannes but they required fw hacking, I can't find  
traces of them inside the current kernel. So I would assume MBSS is  
not yet implemented.

> If openfw does not raise the interrupt, PS most likely is broken and  
> the
> firmware cannot work on AP with PS stations associated.
Uhmmmm, interesting. I completely missed this. I must say I'm not  
familiar with PS.

Many thanks,
-FG

>
>
> -- 
> Greetings, Michael.

-------

Francesco Gringoli, PhD - Assistant Professor
Dept. of Electrical Engineering for Automation
University of Brescia
via Branze, 38
25123 Brescia
ITALY

Ph:  ++39.030.3715843
FAX: ++39.030.380014
WWW: http://www.ing.unibs.it/~gringoli






From mb at bu3sch.de  Fri Apr 10 10:41:56 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Fri, 10 Apr 2009 10:41:56 +0200
Subject: quetion on beacon irq and multibss
In-Reply-To: <0E8AD9DA-288E-4E70-B041-988548B494A7@ing.unibs.it>
References: <200904080211.16298.mb@bu3sch.de> <200904100044.49635.mb@bu3sch.de>
	<0E8AD9DA-288E-4E70-B041-988548B494A7@ing.unibs.it>
Message-ID: <200904101041.56381.mb@bu3sch.de>

On Friday 10 April 2009 02:14:59 Francesco Gringoli wrote:
> Ok but what`about MBSS? Is it already implemented in b43? I found some  
> old patches from Johannes but they required fw hacking, I can't find  
> traces of them inside the current kernel. So I would assume MBSS is  
> not yet implemented.

No. Very latest firmware kind of implements this (It can do 2 BSS).
If you're going to implement it, you should probably look at how they did it.
(Basically beacons are pushed via DMA to hardware).

> > If openfw does not raise the interrupt, PS most likely is broken and  
> > the
> > firmware cannot work on AP with PS stations associated.
> Uhmmmm, interesting. I completely missed this. I must say I'm not  
> familiar with PS.

The beacon interrupt is basically always triggered when the firmware is ready
to receive a new beacon. It's a locking mechanism to prevent concurrent accesses
to the template ram. If an update is not required, the driver will disable the
interrupt. But if the driver needs to update the beacon (for example due to
TIM changes), the driver unmasks the interrupt and updates the beacon on interrupt.

So I think the beacon IRQ handling in the firmware is trivial. I could remember
incorrectly, but I think it just raises it every time it's done handling one beacon.

Note that there is some weirdness built in, though. For example if both beacon-valid
flags are set that's a special condition and it does _not_ mean both beacons are valid.
Look at the driver. There are some comments.

-- 
Greetings, Michael.


From netrolller.3d at gmail.com  Fri Apr 10 14:02:54 2009
From: netrolller.3d at gmail.com (=?ISO-8859-1?Q?G=E1bor_Stefanik?=)
Date: Fri, 10 Apr 2009 14:02:54 +0200
Subject: b43 Hostap Performance
In-Reply-To: <D39B41DF-2124-4B73-9D15-1CFEE8C632EC@ing.unibs.it>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com> 
	<200904061704.26078.mb@bu3sch.de>
	<43C34366-F45D-4E7F-AF58-2531C4EDCF22@ing.unibs.it> 
	<200904092356.27494.mb@bu3sch.de>
	<D39B41DF-2124-4B73-9D15-1CFEE8C632EC@ing.unibs.it>
Message-ID: <69e28c910904100502q487e239fic5d7fd382e5b0d03@mail.gmail.com>

On Fri, Apr 10, 2009 at 12:28 AM, Francesco Gringoli
<francesco.gringoli at ing.unibs.it> wrote:
>
> On Apr 9, 2009, at 11:56 PM, Michael Buesch wrote:
>> 4318 is good enough for STA mode, but in AP mode it doesn't work
>> correctly, because
>> it simply loses too many packets. So it loses important management
>> frames, etc... .
>> If you limit the TX rate to 24M it becomes usable, however.
>> 4306 is _much_ better in AP mode.
> You mean that it misses to transmit some frames? Do you have
> hypotheses on why AP mode should complete change the behavior of the
> board from "good enough" to "not working correctly"? The only
> difference between station and AP mode AFAIK is that AP mode honors
> the TBTT condition and transmit the beacon when a beacon is needed. I
> say honor since that condition and the other about beacon needed are
> raised also in station mode but they are not handled. I'm confused.
>>
>>
>> Of course, there always are exceptions to these rules, because there
>> are about
>> a million completely different 4318 and and 4306 cards out there.
>> So you might be lucky to pick one of the few 4318 that works well in
>> AP mode, or
>> you might pick one of the few 4306 that don't work too well.
> Ok, that could be. I have only 4318 branded as Asus, they are all
> equal. Probably the fact the linksys does not work in AP mode confirm
> what you say.
>
> I have noticed, however a strange fact with these 4318 based linksys:
> when I set one of them in AP mode, beaconing is perfect and I can join
> it from other stations. When I ping the AP from stations I get echo
> reply. If, instead, I ping stations from the AP, no packet is sent! at
> all; if I telnet from stations to the AP, e.g., to port 22, 3whs ends
> but then the TCP session dies. The strange fact is that it seems that
> there are problems for all the frames whose generation involves a
> contest switching from userspace to kernel, in other words a complete
> cross of the mac80211+b43 layers. If instead, on the AP, I completely
> bypass the network stack and directly ask b43 to transmit a frame
> (with a modified b43) the frame is transmitted, at every rate I choose
> (I choose the rate inside the kernel code, I'm not referring to the
> rate set by iwconfig).
>
> Do you have some of these flawed 4318?
>
> -Francesco

Can you please release the patch you used to transmit frames using b43
directly, with a complete bypass of the stack? Also, what results do
you get if you instead try to use mac80211's radiotap injection
feature (which bypasses most, but not all of mac80211)?

Thanks,
G?bor

-- 
Vista: [V]iruses, [I]ntruders, [S]pyware, [T]rojans and [A]dware. :-)


From david at identd.dyndns.org  Fri Apr 10 16:36:08 2009
From: david at identd.dyndns.org (David Ellingsworth)
Date: Fri, 10 Apr 2009 10:36:08 -0400
Subject: b43legacy AP
Message-ID: <30353c3d0904100736g69782d46g18d99edd0dd0660d@mail.gmail.com>

I'd like to try and get b43legacy running in AP mode this weekend. Can
anyone tell me what modifications to b43legacy need to be made in
order to do so? The last time I tried, I applied the two patches by
Larry to address beaconing issues in b43legacy without much success.
My tests indicated that hostapd seemed capable of communicating with
b43legacy and my 4306 rev 2 through nl80211 but that the card was
still not producing any beacons when monitored remotely. The only sign
of failure from hostapd is the repeated message of "MGMT (TX callback)
fail" whenever hostapd received a probe for the ssid it configured the
interface for. This isn't much information to go on but it points us
in a direction to where the problem(s) may exist. Again, any help
would be appreciated.

Regards,

David Ellingsworth


From Larry.Finger at lwfinger.net  Fri Apr 10 21:30:00 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Fri, 10 Apr 2009 14:30:00 -0500
Subject: b43legacy AP
In-Reply-To: <30353c3d0904100736g69782d46g18d99edd0dd0660d@mail.gmail.com>
References: <30353c3d0904100736g69782d46g18d99edd0dd0660d@mail.gmail.com>
Message-ID: <49DF9E38.5030801@lwfinger.net>

David Ellingsworth wrote:
> I'd like to try and get b43legacy running in AP mode this weekend. Can
> anyone tell me what modifications to b43legacy need to be made in
> order to do so? The last time I tried, I applied the two patches by
> Larry to address beaconing issues in b43legacy without much success.
> My tests indicated that hostapd seemed capable of communicating with
> b43legacy and my 4306 rev 2 through nl80211 but that the card was
> still not producing any beacons when monitored remotely. The only sign
> of failure from hostapd is the repeated message of "MGMT (TX callback)
> fail" whenever hostapd received a probe for the ssid it configured the
> interface for. This isn't much information to go on but it points us
> in a direction to where the problem(s) may exist. Again, any help
> would be appreciated.

There may be problems that are unique to your 4306 rev 2, but b43legacy with my
patches runs as an AP just fine.

My configuration is as follows:

LAN ======= eth0 -- BCM4312/1 as AP ~~~~~~~~~~~~~~ laptop with BCM4318.

As my BCM4312/1 uses ucode5 firmware, I only have to change the ssb_tbl entries
to have it use either b43 or b43legacy.

I started with b43 driving the AP. I use hostapd v0.6.8 as the basis for the AP
and the current wireless-testing as my kernel.  My hostapd.conf contains the
following:

==================================================
interface=wlan0
driver=nl80211
logger_syslog=-1
logger_syslog_level=2
logger_stdout=-1
logger_stdout_level=2
debug=0
dump_file=/tmp/hostapd.dump
ctrl_interface=/var/run/hostapd
ctrl_interface_group=0
hw_mode=g
channel=11
beacon_int=100
dtim_period=2
max_num_sta=255
rts_threshold=2347
fragm_threshold=2346
macaddr_acl=0
ignore_broadcast_ssid=0
wme_enabled=1
wme_ac_bk_cwmin=4
wme_ac_bk_cwmax=10
wme_ac_bk_aifs=7
wme_ac_bk_txop_limit=0
wme_ac_bk_acm=0
wme_ac_be_aifs=3
wme_ac_be_cwmin=4
wme_ac_be_cwmax=10
wme_ac_be_txop_limit=0
wme_ac_be_acm=0
wme_ac_vi_aifs=2
wme_ac_vi_cwmin=3
wme_ac_vi_cwmax=4
wme_ac_vi_txop_limit=94
wme_ac_vi_acm=0
wme_ac_vo_aifs=2
wme_ac_vo_cwmin=2
wme_ac_vo_cwmax=3
wme_ac_vo_txop_limit=47
wme_ac_vo_acm=0
eapol_key_index_workaround=0
eap_server=0
own_ip_addr=127.0.0.1
wpa=1
wpa_passphrase=123456789
==================================================

I created a file dhcpd.conf, which contains

==================================================
option domain-name-servers 192.168.1.1;
default-lease-time 600;
max-lease-time 7200;
ddns-update-style none; ddns-updates off;
subnet 192.168.0.0 netmask 255.255.255.0 {
        range 192.168.0.200 192.168.0.229;
        option subnet-mask 255.255.255.0;
        option broadcast-address 192.168.0.255;
        option routers 192.168.0.1;
}
==================================================

My script to control the AP is as follows:

==================================================
#!/bin/sh
# Script to start/stop a hostapd-based access point
#
# Symbols for needed programs

IPTABLES=/usr/sbin/iptables
IFCONFIG=/sbin/ifconfig
DHCPD=/usr/sbin/dhcpd
HOSTAPD=/usr/local/bin/hostapd

# Symbols for internal and external interfaces

NET_INT=wlan0
NET_EXT=eth0

# IP address for the AP

INT_ADDR=192.168.0.1

case "$1" in
start)
        echo "Starting AP mode for $NET_INT at address $INT_ADDR"

        # Disable packet forwarding

        echo 0 > /proc/sys/net/ipv4/ip_forward

        # Stop hostapd and dhcpd daemons

        killproc hostapd
        killproc dhcpd

        #Set up forwarding

        $IPTABLES -t nat -A POSTROUTING -o $NET_EXT -j MASQUERADE
        $IPTABLES -A FORWARD -i $NET_EXT -o $NET_INT -m state \
		--state RELATED,ESTABLISHED -j ACCEPT
        $IPTABLES -A FORWARD -i $NET_INT -o $NET_EXT -j ACCEPT

        # Enable packet forwarding

        echo 1 > /proc/sys/net/ipv4/ip_forward

        # Get the internal interface in the right state

        $IFCONFIG $NET_INT down
        $IFCONFIG $NET_INT up
        $IFCONFIG $NET_INT $INT_ADDR

        # dhcpd needs to have a leases file available - create it if needed

        if [ ! -f /var/lib/dhcp/db/dhcpd.leases ]; then
                touch /var/lib/dhcp/db/dhcpd.leases
        fi

        # Bring up the DHCP server

        $DHCPD -cf /root/dhcpd.conf $NET_INT

        # Bring up hostapd

        $HOSTAPD -B /root/hostapd.conf
        ;;
stop)
        echo "Stopping AP mode on $NET_INT"

        # Stop hostapd and dhcpd daemons
        killproc hostapd
        killproc dhcpd
        ;;
*)
        echo "Usage: $0 {start|stop}"
        exit 1
        ;;
esac
===============================================

The first thing I found when using b43 as the AP host was that many hundreds of
"PHY transmission errors" were generated every second. I got rid of those be
eliminating the code that reports the error in drivers/net/wireless/b43/main.c.
I also made the same change to b43legacy.

Testing was done with a separate laptop that has a PCMCIA format BCM4318. The
link was kept busy using a 10-second TX test from the utility tcpperf. The
server for tcpperf is connected to my hub via a 100 Mb wired connection. The
base rate for the test is 13-14 Mb/s through my Linksys AP. Using b43 as the AP,
the rate was a little lower with a maximum rate of 12-13 Mb/s. The client's
connection is at 54 Mb/s.

After verifying that my setup would work with b43, I switched to b43legacy.
There was no difference in stability or performance. After eliminating the PHY
transmission error messages, the only thing logged on the AP host were the
10-minute DCHP renewals.

Larry


From david at identd.dyndns.org  Fri Apr 10 22:49:39 2009
From: david at identd.dyndns.org (David Ellingsworth)
Date: Fri, 10 Apr 2009 16:49:39 -0400
Subject: b43legacy AP
In-Reply-To: <49DF9E38.5030801@lwfinger.net>
References: <30353c3d0904100736g69782d46g18d99edd0dd0660d@mail.gmail.com>
	<49DF9E38.5030801@lwfinger.net>
Message-ID: <30353c3d0904101349o915439arffb652b98e245e10@mail.gmail.com>

On Fri, Apr 10, 2009 at 3:30 PM, Larry Finger <Larry.Finger at lwfinger.net> wrote:
> David Ellingsworth wrote:
>> I'd like to try and get b43legacy running in AP mode this weekend. Can
>> anyone tell me what modifications to b43legacy need to be made in
>> order to do so? The last time I tried, I applied the two patches by
>> Larry to address beaconing issues in b43legacy without much success.
>> My tests indicated that hostapd seemed capable of communicating with
>> b43legacy and my 4306 rev 2 through nl80211 but that the card was
>> still not producing any beacons when monitored remotely. The only sign
>> of failure from hostapd is the repeated message of "MGMT (TX callback)
>> fail" whenever hostapd received a probe for the ssid it configured the
>> interface for. This isn't much information to go on but it points us
>> in a direction to where the problem(s) may exist. Again, any help
>> would be appreciated.
>
> There may be problems that are unique to your 4306 rev 2, but b43legacy with my
> patches runs as an AP just fine.
>
> My configuration is as follows:
>
> LAN ======= eth0 -- BCM4312/1 as AP ~~~~~~~~~~~~~~ laptop with BCM4318.
>
> As my BCM4312/1 uses ucode5 firmware, I only have to change the ssb_tbl entries
> to have it use either b43 or b43legacy.
>
> I started with b43 driving the AP. I use hostapd v0.6.8 as the basis for the AP
> and the current wireless-testing as my kernel. ?My hostapd.conf contains the
> following:
>
> ==================================================
> interface=wlan0
> driver=nl80211
> logger_syslog=-1
> logger_syslog_level=2
> logger_stdout=-1
> logger_stdout_level=2
> debug=0
> dump_file=/tmp/hostapd.dump
> ctrl_interface=/var/run/hostapd
> ctrl_interface_group=0
> hw_mode=g
> channel=11
> beacon_int=100
> dtim_period=2
> max_num_sta=255
> rts_threshold=2347
> fragm_threshold=2346
> macaddr_acl=0
> ignore_broadcast_ssid=0
> wme_enabled=1
> wme_ac_bk_cwmin=4
> wme_ac_bk_cwmax=10
> wme_ac_bk_aifs=7
> wme_ac_bk_txop_limit=0
> wme_ac_bk_acm=0
> wme_ac_be_aifs=3
> wme_ac_be_cwmin=4
> wme_ac_be_cwmax=10
> wme_ac_be_txop_limit=0
> wme_ac_be_acm=0
> wme_ac_vi_aifs=2
> wme_ac_vi_cwmin=3
> wme_ac_vi_cwmax=4
> wme_ac_vi_txop_limit=94
> wme_ac_vi_acm=0
> wme_ac_vo_aifs=2
> wme_ac_vo_cwmin=2
> wme_ac_vo_cwmax=3
> wme_ac_vo_txop_limit=47
> wme_ac_vo_acm=0
> eapol_key_index_workaround=0
> eap_server=0
> own_ip_addr=127.0.0.1
> wpa=1
> wpa_passphrase=123456789
> ==================================================
>
> I created a file dhcpd.conf, which contains
>
> ==================================================
> option domain-name-servers 192.168.1.1;
> default-lease-time 600;
> max-lease-time 7200;
> ddns-update-style none; ddns-updates off;
> subnet 192.168.0.0 netmask 255.255.255.0 {
> ? ? ? ?range 192.168.0.200 192.168.0.229;
> ? ? ? ?option subnet-mask 255.255.255.0;
> ? ? ? ?option broadcast-address 192.168.0.255;
> ? ? ? ?option routers 192.168.0.1;
> }
> ==================================================
>
> My script to control the AP is as follows:
>
> ==================================================
> #!/bin/sh
> # Script to start/stop a hostapd-based access point
> #
> # Symbols for needed programs
>
> IPTABLES=/usr/sbin/iptables
> IFCONFIG=/sbin/ifconfig
> DHCPD=/usr/sbin/dhcpd
> HOSTAPD=/usr/local/bin/hostapd
>
> # Symbols for internal and external interfaces
>
> NET_INT=wlan0
> NET_EXT=eth0
>
> # IP address for the AP
>
> INT_ADDR=192.168.0.1
>
> case "$1" in
> start)
> ? ? ? ?echo "Starting AP mode for $NET_INT at address $INT_ADDR"
>
> ? ? ? ?# Disable packet forwarding
>
> ? ? ? ?echo 0 > /proc/sys/net/ipv4/ip_forward
>
> ? ? ? ?# Stop hostapd and dhcpd daemons
>
> ? ? ? ?killproc hostapd
> ? ? ? ?killproc dhcpd
>
> ? ? ? ?#Set up forwarding
>
> ? ? ? ?$IPTABLES -t nat -A POSTROUTING -o $NET_EXT -j MASQUERADE
> ? ? ? ?$IPTABLES -A FORWARD -i $NET_EXT -o $NET_INT -m state \
> ? ? ? ? ? ? ? ?--state RELATED,ESTABLISHED -j ACCEPT
> ? ? ? ?$IPTABLES -A FORWARD -i $NET_INT -o $NET_EXT -j ACCEPT
>
> ? ? ? ?# Enable packet forwarding
>
> ? ? ? ?echo 1 > /proc/sys/net/ipv4/ip_forward
>
> ? ? ? ?# Get the internal interface in the right state
>
> ? ? ? ?$IFCONFIG $NET_INT down
> ? ? ? ?$IFCONFIG $NET_INT up
> ? ? ? ?$IFCONFIG $NET_INT $INT_ADDR
>
> ? ? ? ?# dhcpd needs to have a leases file available - create it if needed
>
> ? ? ? ?if [ ! -f /var/lib/dhcp/db/dhcpd.leases ]; then
> ? ? ? ? ? ? ? ?touch /var/lib/dhcp/db/dhcpd.leases
> ? ? ? ?fi
>
> ? ? ? ?# Bring up the DHCP server
>
> ? ? ? ?$DHCPD -cf /root/dhcpd.conf $NET_INT
>
> ? ? ? ?# Bring up hostapd
>
> ? ? ? ?$HOSTAPD -B /root/hostapd.conf
> ? ? ? ?;;
> stop)
> ? ? ? ?echo "Stopping AP mode on $NET_INT"
>
> ? ? ? ?# Stop hostapd and dhcpd daemons
> ? ? ? ?killproc hostapd
> ? ? ? ?killproc dhcpd
> ? ? ? ?;;
> *)
> ? ? ? ?echo "Usage: $0 {start|stop}"
> ? ? ? ?exit 1
> ? ? ? ?;;
> esac
> ===============================================
>
> The first thing I found when using b43 as the AP host was that many hundreds of
> "PHY transmission errors" were generated every second. I got rid of those be
> eliminating the code that reports the error in drivers/net/wireless/b43/main.c.
> I also made the same change to b43legacy.
>
> Testing was done with a separate laptop that has a PCMCIA format BCM4318. The
> link was kept busy using a 10-second TX test from the utility tcpperf. The
> server for tcpperf is connected to my hub via a 100 Mb wired connection. The
> base rate for the test is 13-14 Mb/s through my Linksys AP. Using b43 as the AP,
> the rate was a little lower with a maximum rate of 12-13 Mb/s. The client's
> connection is at 54 Mb/s.
>
> After verifying that my setup would work with b43, I switched to b43legacy.
> There was no difference in stability or performance. After eliminating the PHY
> transmission error messages, the only thing logged on the AP host were the
> 10-minute DCHP renewals.
>
> Larry
>

Hmm.. very interesting.

The configuration I got working was...

LAN ====== br0(eth0 -- wlan0 (BCM4318)) as AP ~~~~~~~~~~ laptop with
BCM4306 rev 2

...but I believe the BCM4318 I have is defective.. even with a
standard AP, I haven't got it transfer any faster than about .5Mb/s.

In the reverse configuration...

LAN ====== br0(eth0 -- wlan0 (BCM4306 rev 2)) as AP ~~~~~~~~~~ server
with BCM4318

...I was unable to observe any beacons coming from the AP.

Like you said, the issue might be related to my particular card since
you were successful at getting your card to send beacons. I'll
experiment with your patches to see if I can't determine where they
seem to fail with my card. Hopefully, some well placed debug messages
will help locate the problem.

Ideally, my server will eventually be the AP but for now I need
something my BCM4318 can try to connect to. Thus when a Linksys tech
isn't capable of producing the speeds claimed by the 4318 card I can
get it RMA'd for a new device.

Regards,

David Ellingsworth


From david at identd.dyndns.org  Sat Apr 11 16:56:03 2009
From: david at identd.dyndns.org (David Ellingsworth)
Date: Sat, 11 Apr 2009 10:56:03 -0400
Subject: b43legacy AP
In-Reply-To: <30353c3d0904101349o915439arffb652b98e245e10@mail.gmail.com>
References: <30353c3d0904100736g69782d46g18d99edd0dd0660d@mail.gmail.com>
	<49DF9E38.5030801@lwfinger.net>
	<30353c3d0904101349o915439arffb652b98e245e10@mail.gmail.com>
Message-ID: <30353c3d0904110756qfc35928x265db523bd1f86be@mail.gmail.com>

I wanted to report that I've finally been successful at getting
b43legacy to beacon properly. Originally, I had configured hostapd to
use channel 1. After reading the list of bugs for the bwi driver,
shown here: http://leaf.dragonflybsd.org/cgi/web-man?command=bwi , I
had the inclination to try channel 6. It appears b43legacy might have
the same bugs as the bwi driver as I immediately began seeing beacons
once I started using channel 6.

Regards,

David Ellingsworth


From Larry.Finger at lwfinger.net  Sat Apr 11 17:35:54 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Sat, 11 Apr 2009 10:35:54 -0500
Subject: b43legacy AP
In-Reply-To: <30353c3d0904110756qfc35928x265db523bd1f86be@mail.gmail.com>
References: <30353c3d0904100736g69782d46g18d99edd0dd0660d@mail.gmail.com>	
	<49DF9E38.5030801@lwfinger.net>	
	<30353c3d0904101349o915439arffb652b98e245e10@mail.gmail.com>
	<30353c3d0904110756qfc35928x265db523bd1f86be@mail.gmail.com>
Message-ID: <49E0B8DA.8030708@lwfinger.net>

David Ellingsworth wrote:
> I wanted to report that I've finally been successful at getting
> b43legacy to beacon properly. Originally, I had configured hostapd to
> use channel 1. After reading the list of bugs for the bwi driver,
> shown here: http://leaf.dragonflybsd.org/cgi/web-man?command=bwi , I
> had the inclination to try channel 6. It appears b43legacy might have
> the same bugs as the bwi driver as I immediately began seeing beacons
> once I started using channel 6.

I just tested and my 4311/1 running b43legacy sends beacons on channel 1. The
problem is likely in the initialization of the 4306 units. That is something I
will be investigating.

As far as I can tell, it should be OK to submit the b43legacy beacon patches.

Larry


From david at identd.dyndns.org  Sat Apr 11 18:04:57 2009
From: david at identd.dyndns.org (David Ellingsworth)
Date: Sat, 11 Apr 2009 12:04:57 -0400
Subject: b43legacy AP
In-Reply-To: <49E0B8DA.8030708@lwfinger.net>
References: <30353c3d0904100736g69782d46g18d99edd0dd0660d@mail.gmail.com>
	<49DF9E38.5030801@lwfinger.net>
	<30353c3d0904101349o915439arffb652b98e245e10@mail.gmail.com>
	<30353c3d0904110756qfc35928x265db523bd1f86be@mail.gmail.com>
	<49E0B8DA.8030708@lwfinger.net>
Message-ID: <30353c3d0904110904g1e04afd2w77aad06f40affa9b@mail.gmail.com>

On Sat, Apr 11, 2009 at 11:35 AM, Larry Finger
<Larry.Finger at lwfinger.net> wrote:
> David Ellingsworth wrote:
>> I wanted to report that I've finally been successful at getting
>> b43legacy to beacon properly. Originally, I had configured hostapd to
>> use channel 1. After reading the list of bugs for the bwi driver,
>> shown here: http://leaf.dragonflybsd.org/cgi/web-man?command=bwi , I
>> had the inclination to try channel 6. It appears b43legacy might have
>> the same bugs as the bwi driver as I immediately began seeing beacons
>> once I started using channel 6.
>
> I just tested and my 4311/1 running b43legacy sends beacons on channel 1. The
> problem is likely in the initialization of the 4306 units. That is something I
> will be investigating.
>
> As far as I can tell, it should be OK to submit the b43legacy beacon patches.
>

Agreed, they have my ACK.

Regards,

David Ellingsworth


From Larry.Finger at lwfinger.net  Sat Apr 11 18:25:24 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Sat, 11 Apr 2009 11:25:24 -0500
Subject: [PATCH 1/2] b43legacy: Fixes for beaconing
Message-ID: <49e0c474.XsWa0DgDe2f9J6w/%Larry.Finger@lwfinger.net>

This patch ports the beaconing fixes from commit a82d992261f "b43: Beaconing
fixes" to b43legacy. Basically it prevents the card from triggering the beacon
IRQ over and over again.

Signed-off-by: Larry Finger <Larry.Finger at lwfinger.net>
Acked-by: Michael Buesch <mb at bu3sch.de>
Tested-by: David Ellingsworth <david at identd.dyndns.org>
---

John,

This is material for the next major release.

Larry
---

Index: wireless-testing/drivers/net/wireless/b43legacy/b43legacy.h
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43legacy/b43legacy.h
+++ wireless-testing/drivers/net/wireless/b43legacy/b43legacy.h
@@ -59,7 +59,8 @@
 #define B43legacy_MMIO_XMITSTAT_1		0x174
 #define B43legacy_MMIO_REV3PLUS_TSF_LOW	0x180 /* core rev >= 3 only */
 #define B43legacy_MMIO_REV3PLUS_TSF_HIGH	0x184 /* core rev >= 3 only */
-
+#define B43legacy_MMIO_TSF_CFP_REP	0x188
+#define B43legacy_MMIO_TSF_CFP_START	0x18C
 /* 32-bit DMA */
 #define B43legacy_MMIO_DMA32_BASE0	0x200
 #define B43legacy_MMIO_DMA32_BASE1	0x220
@@ -614,6 +615,7 @@ struct b43legacy_wl {
 	struct sk_buff *current_beacon;
 	bool beacon0_uploaded;
 	bool beacon1_uploaded;
+	struct work_struct beacon_update_trigger;
 };
 
 /* Pointers to the firmware data and meta information about it. */
Index: wireless-testing/drivers/net/wireless/b43legacy/main.c
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43legacy/main.c
+++ wireless-testing/drivers/net/wireless/b43legacy/main.c
@@ -1013,7 +1013,8 @@ static void b43legacy_write_beacon_templ
 		b43legacywarn(dev->wl, "Did not find a valid TIM IE in the "
 			      "beacon template packet. AP or IBSS operation "
 			      "may be broken.\n");
-	}
+	} else
+		b43legacydbg(dev->wl, "Updated beacon template\n");
 }
 
 static void b43legacy_write_probe_resp_plcp(struct b43legacy_wldev *dev,
@@ -1133,6 +1134,27 @@ static void b43legacy_write_probe_resp_t
 	kfree(probe_resp_data);
 }
 
+static void b43legacy_beacon_update_trigger_work(struct work_struct *work)
+{
+	struct b43legacy_wl *wl = container_of(work, struct b43legacy_wl,
+					 beacon_update_trigger);
+	struct b43legacy_wldev *dev;
+
+	mutex_lock(&wl->mutex);
+	dev = wl->current_dev;
+	if (likely(dev && (b43legacy_status(dev) >= B43legacy_STAT_INITIALIZED))) {
+		/* Force the microcode to trigger the
+		 * beacon update bottom-half IRQ. */
+		spin_lock_irq(&wl->irq_lock);
+		b43legacy_write32(dev, B43legacy_MMIO_MACCMD,
+			    b43legacy_read32(dev, B43legacy_MMIO_MACCMD)
+			    | B43legacy_MACCMD_BEACON0_VALID
+			    | B43legacy_MACCMD_BEACON1_VALID);
+		spin_unlock_irq(&wl->irq_lock);
+	}
+	mutex_unlock(&wl->mutex);
+}
+
 /* Asynchronously update the packet templates in template RAM.
  * Locking: Requires wl->irq_lock to be locked. */
 static void b43legacy_update_templates(struct b43legacy_wl *wl)
@@ -1156,25 +1178,31 @@ static void b43legacy_update_templates(s
 	wl->current_beacon = beacon;
 	wl->beacon0_uploaded = 0;
 	wl->beacon1_uploaded = 0;
+	queue_work(wl->hw->workqueue, &wl->beacon_update_trigger);
 }
 
 static void b43legacy_set_beacon_int(struct b43legacy_wldev *dev,
 				     u16 beacon_int)
 {
 	b43legacy_time_lock(dev);
-	if (dev->dev->id.revision >= 3)
-		b43legacy_write32(dev, 0x188, (beacon_int << 16));
-	else {
+	if (dev->dev->id.revision >= 3) {
+		b43legacy_write32(dev, B43legacy_MMIO_TSF_CFP_REP,
+				 (beacon_int << 16));
+		b43legacy_write32(dev, B43legacy_MMIO_TSF_CFP_START,
+				 (beacon_int << 10));
+	} else {
 		b43legacy_write16(dev, 0x606, (beacon_int >> 6));
 		b43legacy_write16(dev, 0x610, beacon_int);
 	}
 	b43legacy_time_unlock(dev);
+	b43legacydbg(dev->wl, "Set beacon interval to %u\n", beacon_int);
 }
 
 static void handle_irq_beacon(struct b43legacy_wldev *dev)
 {
 	struct b43legacy_wl *wl = dev->wl;
 	u32 cmd;
+	u32 beacon0_valid, beacon1_valid;
 
 	if (!b43legacy_is_mode(wl, NL80211_IFTYPE_AP))
 		return;
@@ -1182,7 +1210,11 @@ static void handle_irq_beacon(struct b43
 	/* This is the bottom half of the asynchronous beacon update. */
 
 	cmd = b43legacy_read32(dev, B43legacy_MMIO_MACCMD);
-	if (!(cmd & B43legacy_MACCMD_BEACON0_VALID)) {
+	beacon0_valid = (cmd & B43legacy_MACCMD_BEACON0_VALID);
+	beacon1_valid = (cmd & B43legacy_MACCMD_BEACON1_VALID);
+	cmd &= ~(B43legacy_MACCMD_BEACON0_VALID | B43legacy_MACCMD_BEACON1_VALID);
+
+	if (!beacon0_valid) {
 		if (!wl->beacon0_uploaded) {
 			b43legacy_write_beacon_template(dev, 0x68,
 							B43legacy_SHM_SH_BTL0,
@@ -1193,8 +1225,7 @@ static void handle_irq_beacon(struct b43
 			wl->beacon0_uploaded = 1;
 		}
 		cmd |= B43legacy_MACCMD_BEACON0_VALID;
-	}
-	if (!(cmd & B43legacy_MACCMD_BEACON1_VALID)) {
+	} else if (!beacon1_valid) {
 		if (!wl->beacon1_uploaded) {
 			b43legacy_write_beacon_template(dev, 0x468,
 							B43legacy_SHM_SH_BTL1,
@@ -3429,6 +3460,7 @@ static void b43legacy_op_stop(struct iee
 	struct b43legacy_wldev *dev = wl->current_dev;
 
 	b43legacy_rfkill_exit(dev);
+	cancel_work_sync(&(wl->beacon_update_trigger));
 
 	mutex_lock(&wl->mutex);
 	if (b43legacy_status(dev) >= B43legacy_STAT_STARTED)
@@ -3760,6 +3792,7 @@ static int b43legacy_wireless_init(struc
 	spin_lock_init(&wl->leds_lock);
 	mutex_init(&wl->mutex);
 	INIT_LIST_HEAD(&wl->devlist);
+	INIT_WORK(&wl->beacon_update_trigger, b43legacy_beacon_update_trigger_work);
 
 	ssb_set_devtypedata(dev, wl);
 	b43legacyinfo(wl, "Broadcom %04X WLAN found\n", dev->bus->chip_id);


From Larry.Finger at lwfinger.net  Sat Apr 11 18:26:01 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Sat, 11 Apr 2009 11:26:01 -0500
Subject: [PATCH 2/2] b43legacy: Clean up beacon IRQ
Message-ID: <49e0c499.ja8wIzvvTi29QhfZ%Larry.Finger@lwfinger.net>

This patch ports commit c97a4ccc1fad35d3 "b43: Fix beacon BH update" to
b43legacy. It fixes beacon updating in the bottomhalf. In case the device
is busy, we will defer to later in the IRQ handler.

Signed-off-by: Larry Finger <Larry.Finger at lwfinger.net>
Acked-by: Michael Buesch <mb at bu3sch.de>
Tested-by: David Ellingsworth <david at identd.dyndns.org>
---

John,

This is material for the next major release.

Larry
---

Index: wireless-testing/drivers/net/wireless/b43legacy/b43legacy.h
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43legacy/b43legacy.h
+++ wireless-testing/drivers/net/wireless/b43legacy/b43legacy.h
@@ -259,7 +259,6 @@
 
 #define B43legacy_IRQ_ALL		0xFFFFFFFF
 #define B43legacy_IRQ_MASKTEMPLATE	(B43legacy_IRQ_MAC_SUSPENDED |	\
-					 B43legacy_IRQ_BEACON |		\
 					 B43legacy_IRQ_TBTT_INDI |	\
 					 B43legacy_IRQ_ATIM_END |	\
 					 B43legacy_IRQ_PMQ |		\
@@ -615,6 +614,7 @@ struct b43legacy_wl {
 	struct sk_buff *current_beacon;
 	bool beacon0_uploaded;
 	bool beacon1_uploaded;
+	bool beacon_templates_virgin; /* Never wrote the templates? */
 	struct work_struct beacon_update_trigger;
 };
 
Index: wireless-testing/drivers/net/wireless/b43legacy/main.c
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43legacy/main.c
+++ wireless-testing/drivers/net/wireless/b43legacy/main.c
@@ -955,23 +955,54 @@ static void b43legacy_write_template_com
 			      size + sizeof(struct b43legacy_plcp_hdr6));
 }
 
+/* Convert a b43legacy antenna number value to the PHY TX control value. */
+static u16 b43legacy_antenna_to_phyctl(int antenna)
+{
+	switch (antenna) {
+	case B43legacy_ANTENNA0:
+		return B43legacy_TX4_PHY_ANT0;
+	case B43legacy_ANTENNA1:
+		return B43legacy_TX4_PHY_ANT1;
+	}
+	return B43legacy_TX4_PHY_ANTLAST;
+}
+
 static void b43legacy_write_beacon_template(struct b43legacy_wldev *dev,
 					    u16 ram_offset,
-					    u16 shm_size_offset, u8 rate)
+					    u16 shm_size_offset)
 {
 
 	unsigned int i, len, variable_len;
 	const struct ieee80211_mgmt *bcn;
 	const u8 *ie;
 	bool tim_found = 0;
+	unsigned int rate;
+	u16 ctl;
+	int antenna;
+	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(dev->wl->current_beacon);
 
 	bcn = (const struct ieee80211_mgmt *)(dev->wl->current_beacon->data);
 	len = min((size_t)dev->wl->current_beacon->len,
 		  0x200 - sizeof(struct b43legacy_plcp_hdr6));
+	rate = ieee80211_get_tx_rate(dev->wl->hw, info)->hw_value;
 
 	b43legacy_write_template_common(dev, (const u8 *)bcn, len, ram_offset,
 					shm_size_offset, rate);
 
+	/* Write the PHY TX control parameters. */
+	antenna = B43legacy_ANTENNA_DEFAULT;
+	antenna = b43legacy_antenna_to_phyctl(antenna);
+	ctl = b43legacy_shm_read16(dev, B43legacy_SHM_SHARED,
+				   B43legacy_SHM_SH_BEACPHYCTL);
+	/* We can't send beacons with short preamble. Would get PHY errors. */
+	ctl &= ~B43legacy_TX4_PHY_SHORTPRMBL;
+	ctl &= ~B43legacy_TX4_PHY_ANT;
+	ctl &= ~B43legacy_TX4_PHY_ENC;
+	ctl |= antenna;
+	ctl |= B43legacy_TX4_PHY_ENC_CCK;
+	b43legacy_shm_write16(dev, B43legacy_SHM_SHARED,
+			      B43legacy_SHM_SH_BEACPHYCTL, ctl);
+
 	/* Find the position of the TIM and the DTIM_period value
 	 * and write them to SHM. */
 	ie = bcn->u.beacon.variable;
@@ -1026,7 +1057,7 @@ static void b43legacy_write_probe_resp_p
 	__le16 dur;
 
 	plcp.data = 0;
-	b43legacy_generate_plcp_hdr(&plcp, size + FCS_LEN, rate->bitrate);
+	b43legacy_generate_plcp_hdr(&plcp, size + FCS_LEN, rate->hw_value);
 	dur = ieee80211_generic_frame_duration(dev->wl->hw,
 					       dev->wl->vif,
 					       size,
@@ -1130,10 +1161,82 @@ static void b43legacy_write_probe_resp_t
 		   0x200 - sizeof(struct b43legacy_plcp_hdr6));
 	b43legacy_write_template_common(dev, probe_resp_data,
 					size, ram_offset,
-					shm_size_offset, rate->bitrate);
+					shm_size_offset, rate->hw_value);
 	kfree(probe_resp_data);
 }
 
+static void b43legacy_upload_beacon0(struct b43legacy_wldev *dev)
+{
+	struct b43legacy_wl *wl = dev->wl;
+
+	if (wl->beacon0_uploaded)
+		return;
+	b43legacy_write_beacon_template(dev, 0x68, 0x18);
+	/* FIXME: Probe resp upload doesn't really belong here,
+	 *        but we don't use that feature anyway. */
+	b43legacy_write_probe_resp_template(dev, 0x268, 0x4A,
+				      &__b43legacy_ratetable[3]);
+	wl->beacon0_uploaded = 1;
+}
+
+static void b43legacy_upload_beacon1(struct b43legacy_wldev *dev)
+{
+	struct b43legacy_wl *wl = dev->wl;
+
+	if (wl->beacon1_uploaded)
+		return;
+	b43legacy_write_beacon_template(dev, 0x468, 0x1A);
+	wl->beacon1_uploaded = 1;
+}
+
+static void handle_irq_beacon(struct b43legacy_wldev *dev)
+{
+	struct b43legacy_wl *wl = dev->wl;
+	u32 cmd, beacon0_valid, beacon1_valid;
+
+	if (!b43legacy_is_mode(wl, NL80211_IFTYPE_AP))
+		return;
+
+	/* This is the bottom half of the asynchronous beacon update. */
+
+	/* Ignore interrupt in the future. */
+	dev->irq_savedstate &= ~B43legacy_IRQ_BEACON;
+
+	cmd = b43legacy_read32(dev, B43legacy_MMIO_MACCMD);
+	beacon0_valid = (cmd & B43legacy_MACCMD_BEACON0_VALID);
+	beacon1_valid = (cmd & B43legacy_MACCMD_BEACON1_VALID);
+
+	/* Schedule interrupt manually, if busy. */
+	if (beacon0_valid && beacon1_valid) {
+		b43legacy_write32(dev, B43legacy_MMIO_GEN_IRQ_REASON, B43legacy_IRQ_BEACON);
+		dev->irq_savedstate |= B43legacy_IRQ_BEACON;
+		return;
+	}
+
+	if (unlikely(wl->beacon_templates_virgin)) {
+		/* We never uploaded a beacon before.
+		 * Upload both templates now, but only mark one valid. */
+		wl->beacon_templates_virgin = 0;
+		b43legacy_upload_beacon0(dev);
+		b43legacy_upload_beacon1(dev);
+		cmd = b43legacy_read32(dev, B43legacy_MMIO_MACCMD);
+		cmd |= B43legacy_MACCMD_BEACON0_VALID;
+		b43legacy_write32(dev, B43legacy_MMIO_MACCMD, cmd);
+	} else {
+		if (!beacon0_valid) {
+			b43legacy_upload_beacon0(dev);
+			cmd = b43legacy_read32(dev, B43legacy_MMIO_MACCMD);
+			cmd |= B43legacy_MACCMD_BEACON0_VALID;
+			b43legacy_write32(dev, B43legacy_MMIO_MACCMD, cmd);
+		} else if (!beacon1_valid) {
+			b43legacy_upload_beacon1(dev);
+			cmd = b43legacy_read32(dev, B43legacy_MMIO_MACCMD);
+			cmd |= B43legacy_MACCMD_BEACON1_VALID;
+			b43legacy_write32(dev, B43legacy_MMIO_MACCMD, cmd);
+		}
+	}
+}
+
 static void b43legacy_beacon_update_trigger_work(struct work_struct *work)
 {
 	struct b43legacy_wl *wl = container_of(work, struct b43legacy_wl,
@@ -1143,13 +1246,14 @@ static void b43legacy_beacon_update_trig
 	mutex_lock(&wl->mutex);
 	dev = wl->current_dev;
 	if (likely(dev && (b43legacy_status(dev) >= B43legacy_STAT_INITIALIZED))) {
-		/* Force the microcode to trigger the
-		 * beacon update bottom-half IRQ. */
 		spin_lock_irq(&wl->irq_lock);
-		b43legacy_write32(dev, B43legacy_MMIO_MACCMD,
-			    b43legacy_read32(dev, B43legacy_MMIO_MACCMD)
-			    | B43legacy_MACCMD_BEACON0_VALID
-			    | B43legacy_MACCMD_BEACON1_VALID);
+		/* update beacon right away or defer to irq */
+		dev->irq_savedstate = b43legacy_read32(dev, B43legacy_MMIO_GEN_IRQ_MASK);
+		handle_irq_beacon(dev);
+		/* The handler might have updated the IRQ mask. */
+		b43legacy_write32(dev, B43legacy_MMIO_GEN_IRQ_MASK,
+			    dev->irq_savedstate);
+		mmiowb();
 		spin_unlock_irq(&wl->irq_lock);
 	}
 	mutex_unlock(&wl->mutex);
@@ -1198,45 +1302,6 @@ static void b43legacy_set_beacon_int(str
 	b43legacydbg(dev->wl, "Set beacon interval to %u\n", beacon_int);
 }
 
-static void handle_irq_beacon(struct b43legacy_wldev *dev)
-{
-	struct b43legacy_wl *wl = dev->wl;
-	u32 cmd;
-	u32 beacon0_valid, beacon1_valid;
-
-	if (!b43legacy_is_mode(wl, NL80211_IFTYPE_AP))
-		return;
-
-	/* This is the bottom half of the asynchronous beacon update. */
-
-	cmd = b43legacy_read32(dev, B43legacy_MMIO_MACCMD);
-	beacon0_valid = (cmd & B43legacy_MACCMD_BEACON0_VALID);
-	beacon1_valid = (cmd & B43legacy_MACCMD_BEACON1_VALID);
-	cmd &= ~(B43legacy_MACCMD_BEACON0_VALID | B43legacy_MACCMD_BEACON1_VALID);
-
-	if (!beacon0_valid) {
-		if (!wl->beacon0_uploaded) {
-			b43legacy_write_beacon_template(dev, 0x68,
-							B43legacy_SHM_SH_BTL0,
-							B43legacy_CCK_RATE_1MB);
-			b43legacy_write_probe_resp_template(dev, 0x268,
-							    B43legacy_SHM_SH_PRTLEN,
-							    &__b43legacy_ratetable[3]);
-			wl->beacon0_uploaded = 1;
-		}
-		cmd |= B43legacy_MACCMD_BEACON0_VALID;
-	} else if (!beacon1_valid) {
-		if (!wl->beacon1_uploaded) {
-			b43legacy_write_beacon_template(dev, 0x468,
-							B43legacy_SHM_SH_BTL1,
-							B43legacy_CCK_RATE_1MB);
-			wl->beacon1_uploaded = 1;
-		}
-		cmd |= B43legacy_MACCMD_BEACON1_VALID;
-	}
-	b43legacy_write32(dev, B43legacy_MMIO_MACCMD, cmd);
-}
-
 static void handle_irq_ucode_debug(struct b43legacy_wldev *dev)
 {
 }
@@ -3423,6 +3488,9 @@ static int b43legacy_op_start(struct iee
 	memset(wl->bssid, 0, ETH_ALEN);
 	memset(wl->mac_addr, 0, ETH_ALEN);
 	wl->filter_flags = 0;
+	wl->beacon0_uploaded = 0;
+	wl->beacon1_uploaded = 0;
+	wl->beacon_templates_virgin = 1;
 
 	mutex_lock(&wl->mutex);
 
Index: wireless-testing/drivers/net/wireless/b43legacy/xmit.c
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43legacy/xmit.c
+++ wireless-testing/drivers/net/wireless/b43legacy/xmit.c
@@ -274,7 +274,7 @@ static int generate_txhdr_fw3(struct b43
 
 	/* PHY TX Control word */
 	if (rate_ofdm)
-		phy_ctl |= B43legacy_TX4_PHY_OFDM;
+		phy_ctl |= B43legacy_TX4_PHY_ENC_OFDM;
 	if (info->control.rates[0].flags & IEEE80211_TX_RC_USE_SHORT_PREAMBLE)
 		phy_ctl |= B43legacy_TX4_PHY_SHORTPRMBL;
 	switch (info->antenna_sel_tx) {
Index: wireless-testing/drivers/net/wireless/b43legacy/xmit.h
===================================================================
--- wireless-testing.orig/drivers/net/wireless/b43legacy/xmit.h
+++ wireless-testing/drivers/net/wireless/b43legacy/xmit.h
@@ -67,7 +67,9 @@ struct b43legacy_txhdr_fw3 {
 #define B43legacy_TX4_EFT_RTSFBOFDM	0x0010 /* RTS/CTS fallback rate type */
 
 /* PHY TX control word */
-#define B43legacy_TX4_PHY_OFDM		0x0001 /* Data frame rate type */
+#define B43legacy_TX4_PHY_ENC		0x0003 /* Data frame encoding */
+#define B43legacy_TX4_PHY_ENC_CCK	0x0000 /* CCK */
+#define B43legacy_TX4_PHY_ENC_OFDM	0x0001 /* Data frame rate type */
 #define B43legacy_TX4_PHY_SHORTPRMBL	0x0010 /* Use short preamble */
 #define B43legacy_TX4_PHY_ANT		0x03C0 /* Antenna selection */
 #define  B43legacy_TX4_PHY_ANT0		0x0000 /* Use antenna 0 */


From francesco.gringoli at ing.unibs.it  Sat Apr 11 19:06:21 2009
From: francesco.gringoli at ing.unibs.it (Francesco Gringoli)
Date: Sat, 11 Apr 2009 19:06:21 +0200
Subject: b43 Hostap Performance
In-Reply-To: <69e28c910904100502q487e239fic5d7fd382e5b0d03@mail.gmail.com>
References: <30353c3d0904052026r6de0abb3k1cc0ed9c33a62eb4@mail.gmail.com>
	<200904061704.26078.mb@bu3sch.de>
	<43C34366-F45D-4E7F-AF58-2531C4EDCF22@ing.unibs.it>
	<200904092356.27494.mb@bu3sch.de>
	<D39B41DF-2124-4B73-9D15-1CFEE8C632EC@ing.unibs.it>
	<69e28c910904100502q487e239fic5d7fd382e5b0d03@mail.gmail.com>
Message-ID: <F51C8E5A-75A6-4AE5-B8E0-4BE5A41AE432@ing.unibs.it>

On Apr 10, 2009, at 2:02 PM, G?bor Stefanik wrote:

> On Fri, Apr 10, 2009 at 12:28 AM, Francesco Gringoli
> <francesco.gringoli at ing.unibs.it> wrote:
>>
>>
>
> Can you please release the patch you used to transmit frames using b43
> directly, with a complete bypass of the stack? Also, what results do
> you get if you instead try to use mac80211's radiotap injection
> feature (which bypasses most, but not all of mac80211)?
Hi G?bor,

download the patch from http://www.ing.unibs.it/~gringoli/inject.tar.gz

The patch is for 2.6.29-rc2-wl, I include example code. Please note  
that this patch slightly breaks the checking mechanisms implemented in  
mac80211 (removes the AP association check). You can inject anything  
you want controlling if the frame should wait for an ack or not,  
injection speed etc directly from the example code. Card should not be  
configured in monitor mode, I never tested it in such configuration.

With minor modifications it can be applied to the compat-wireless  
directory from latest kamikaze, example code compiles with the  
toolchain with no modification.

Cheers,
-FG

>
>
> Thanks,
> G?bor
>
> -- 
> Vista: [V]iruses, [I]ntruders, [S]pyware, [T]rojans and [A]dware. :-)



From pmjdebruijn at gmail.com  Sun Apr 12 13:55:25 2009
From: pmjdebruijn at gmail.com (Pascal de Bruijn)
Date: Sun, 12 Apr 2009 13:55:25 +0200
Subject: BCM4312 (B/G) (low power)
Message-ID: <36121a670904120455y79d51e37mb2246a49beebee6f@mail.gmail.com>

Hi,

I just acquired a new laptop, it came with a BCM4312, which
seems to be fine with Broadcom's own 'wl' driver. But I'm not
too happy with loading a blob, and missing out on monitor
mode. The card does not seems easily replaceable, since
the BIOS actually checks which WiFi card is installed during
boot. And it won't boot with a non HP branded Intel card.

I was hoping BCM4312 would be supported by b43
somewhere in the future. And I was wondering whether
there's anything I can do to help?

Regards,
Pascal de Bruijn
-------------- next part --------------
02:00.0 Network controller [0280]: Broadcom Corporation BCM4312 802.11b/g [14e4:4315] (rev 01)
	Subsystem: Hewlett-Packard Company Device [103c:137d]
	Flags: bus master, fast devsel, latency 0, IRQ 17
	Memory at 98700000 (64-bit, non-prefetchable) [size=16K]
	Capabilities: [40] Power Management version 3
	Capabilities: [58] Vendor Specific Information <?>
	Capabilities: [e8] Message Signalled Interrupts: Mask- 64bit+ Queue=0/0 Enable-
	Capabilities: [d0] Express Endpoint, MSI 00
	Capabilities: [100] Advanced Error Reporting <?>
	Capabilities: [13c] Virtual Channel <?>
	Capabilities: [160] Device Serial Number 21-00-bb-ff-ff-00-c4-4d
	Capabilities: [16c] Power Budgeting <?>
	Kernel driver in use: wl
	Kernel modules: wl

From peter at stuge.se  Sun Apr 12 16:29:25 2009
From: peter at stuge.se (Peter Stuge)
Date: Sun, 12 Apr 2009 16:29:25 +0200
Subject: BCM4312 (B/G) (low power)
In-Reply-To: <36121a670904120455y79d51e37mb2246a49beebee6f@mail.gmail.com>
References: <36121a670904120455y79d51e37mb2246a49beebee6f@mail.gmail.com>
Message-ID: <20090412142925.19298.qmail@stuge.se>

Pascal de Bruijn wrote:
> The card does not seems easily replaceable, since the BIOS actually
> checks which WiFi card is installed during boot.
> And it won't boot with a non HP branded Intel card.

I would try to patch the BIOS, but that's not a good solution for
everyone. :\


//Peter


From uliva2 at yahoo.it  Sun Apr 12 16:59:49 2009
From: uliva2 at yahoo.it (Ser)
Date: Sun, 12 Apr 2009 16:59:49 +0200
Subject: BCM4322... Can I help?
Message-ID: <e85b15ee0904120759g6272e2a0ic8e5483599a1f131@mail.gmail.com>

Hi, i recently bought a laptop with a bcm4322 card.
It works pretty good with the Broadcom proprietary driver, but I miss
the monitor mode...
There is something I can do to help the development?

Thanks!
Sergio

ps: I'm sorry, my english is so staggering...
-------------- next part --------------
04:00.0 Network controller [0280]: Broadcom Corporation BCM4322 802.11a/b/g/n Wireless LAN Controller [14e4:432b] (rev 01)
	Subsystem: Dell Device [1028:000d]
	Flags: bus master, fast devsel, latency 0, IRQ 17
	Memory at f8000000 (64-bit, non-prefetchable) [size=16K]
	Capabilities: [40] Power Management version 3
	Capabilities: [58] Vendor Specific Information <?>
	Capabilities: [e8] Message Signalled Interrupts: Mask- 64bit+ Queue=0/0 Enable-
	Capabilities: [d0] Express Endpoint, MSI 00
	Capabilities: [100] Advanced Error Reporting <?>
	Capabilities: [13c] Virtual Channel <?>
	Capabilities: [160] Device Serial Number 23-00-5c-ff-ff-4d-68-5a
	Capabilities: [16c] Power Budgeting <?>
	Kernel driver in use: wl
	Kernel modules: wl

From Larry.Finger at lwfinger.net  Sun Apr 12 17:03:30 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Sun, 12 Apr 2009 10:03:30 -0500
Subject: BCM4312 (B/G) (low power)
In-Reply-To: <36121a670904120455y79d51e37mb2246a49beebee6f@mail.gmail.com>
References: <36121a670904120455y79d51e37mb2246a49beebee6f@mail.gmail.com>
Message-ID: <49E202C2.404@lwfinger.net>

Pascal de Bruijn wrote:
> Hi,
> 
> I just acquired a new laptop, it came with a BCM4312, which
> seems to be fine with Broadcom's own 'wl' driver. But I'm not
> too happy with loading a blob, and missing out on monitor
> mode. The card does not seems easily replaceable, since
> the BIOS actually checks which WiFi card is installed during
> boot. And it won't boot with a non HP branded Intel card.
> 
> I was hoping BCM4312 would be supported by b43
> somewhere in the future. And I was wondering whether
> there's anything I can do to help?

That card can be replaced with a BCM43XX version supported by b43, but the
process is not for the faint hearted as it involves removing the old card,
booting the machine into GRUB, then hot-plugging the new card and rewriting the
SPROM. I have done this on my HP dv2815 for two cards - a BCM4312 802.11a/b/g
with PCI ID of 4312 (yours has 4315), and a BCM4311/2.

Your version of the BCM4312 will be supported in the future. In fact, the
reverse engineering for the LP PHY is completed and posted at
http://bcm-v4.sipsolutions.net. The remaining step is to convert those
"specifications" into kernel-quality code. Unfortunately, the only person
working on that task is Michael Buesch, and he has other things to do. If you
have the necessary skills, I'm certain that Michael has some things you could do.

Larry


From Larry.Finger at lwfinger.net  Sun Apr 12 17:08:38 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Sun, 12 Apr 2009 10:08:38 -0500
Subject: BCM4322... Can I help?
In-Reply-To: <e85b15ee0904120759g6272e2a0ic8e5483599a1f131@mail.gmail.com>
References: <e85b15ee0904120759g6272e2a0ic8e5483599a1f131@mail.gmail.com>
Message-ID: <49E203F6.6020609@lwfinger.net>

Ser wrote:
> Hi, i recently bought a laptop with a bcm4322 card.
> It works pretty good with the Broadcom proprietary driver, but I miss
> the monitor mode...
> There is something I can do to help the development?

For the cards with N PHY, the reverse engineering is not yet done, thus code
writing cannot be started. As far as I know, code for the LP PHY will be written
before that of the N PHY.

Larry


From Larry.Finger at lwfinger.net  Sun Apr 12 20:25:17 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Sun, 12 Apr 2009 13:25:17 -0500
Subject: BCM4312 (B/G) (low power)
In-Reply-To: <20090412180257.GA9191@bombadil.infradead.org>
References: <36121a670904120455y79d51e37mb2246a49beebee6f@mail.gmail.com>
	<49E202C2.404@lwfinger.net>
	<20090412180257.GA9191@bombadil.infradead.org>
Message-ID: <49E2320D.7030109@lwfinger.net>

Kyle McMartin wrote:
> 
> fwiw, I've been working on this on and off for the last little bit, as
> soon as I have something that's at least an improvement on nothing, I'll
> post it to this list for comment, hopefully this week.

You really do need to coordinate with Michael for two reasons. He will be the
person to make the final approval of any changes, and to reduce the possibility
of duplicate effort.

Larry



From kyle at mcmartin.ca  Sun Apr 12 20:02:57 2009
From: kyle at mcmartin.ca (Kyle McMartin)
Date: Sun, 12 Apr 2009 14:02:57 -0400
Subject: BCM4312 (B/G) (low power)
In-Reply-To: <49E202C2.404@lwfinger.net>
References: <36121a670904120455y79d51e37mb2246a49beebee6f@mail.gmail.com>
	<49E202C2.404@lwfinger.net>
Message-ID: <20090412180257.GA9191@bombadil.infradead.org>

On Sun, Apr 12, 2009 at 10:03:30AM -0500, Larry Finger wrote:
> Your version of the BCM4312 will be supported in the future. In fact, the
> reverse engineering for the LP PHY is completed and posted at
> http://bcm-v4.sipsolutions.net. The remaining step is to convert those
> "specifications" into kernel-quality code. Unfortunately, the only person
> working on that task is Michael Buesch, and he has other things to do. If you
> have the necessary skills, I'm certain that Michael has some things you could do.
> 

fwiw, I've been working on this on and off for the last little bit, as
soon as I have something that's at least an improvement on nothing, I'll
post it to this list for comment, hopefully this week.

cheers, Kyle


From mb at bu3sch.de  Sun Apr 12 21:41:37 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Sun, 12 Apr 2009 21:41:37 +0200
Subject: BCM4312 (B/G) (low power)
In-Reply-To: <49E2320D.7030109@lwfinger.net>
References: <36121a670904120455y79d51e37mb2246a49beebee6f@mail.gmail.com>
	<20090412180257.GA9191@bombadil.infradead.org>
	<49E2320D.7030109@lwfinger.net>
Message-ID: <200904122141.37828.mb@bu3sch.de>

On Sunday 12 April 2009 20:25:17 Larry Finger wrote:
> Kyle McMartin wrote:
> > 
> > fwiw, I've been working on this on and off for the last little bit, as
> > soon as I have something that's at least an improvement on nothing, I'll
> > post it to this list for comment, hopefully this week.
> 
> You really do need to coordinate with Michael for two reasons. He will be the
> person to make the final approval of any changes, and to reduce the possibility
> of duplicate effort.

Yes, please contact me before you do some random stuff.
And please do _not_ pile up patches locally. Send stuff (even incomplete!) to
me for inclusion. There are two reasons for sending stuff very early:
1) You can't break anything. The code won't even be compiled for released kernels.
2) Smaller patches are much easier to review.
3) It's less frustrating for you if I reject a one-day-work-patch instead of a
   three-weeks-work-patch. ;)
4) Sending patches shows to me that you're _seriously_ working on it.
   There are maybe 30 people who contacted me in private and promised working on
   something. Neither of those people did actual work. So my excitation is almost
   zero, if some random guy comes along and promises to work on some stuff.
   Showing actual patches will change this and I won't ignore you in future. ;)

While we're at it: Do _not_ contact me in private. Please always CC the list.
There's a high chance that other people have better or quicker answers to your
questions than me. All discussions tend to shift topics and staying on list enables
other people to respond to those questions much better than me.
So don't be surprised if I don't respond to your "Hey I'm new and I want to work on
the driver" mails. Doing a small patch (even a oneliner) will make me respond. But
random blabla won't. :)

So if you happen to implement 5% of function X and don't expect to continue working
on it for the next two days, please send it. I also do it this way (note that there
are some unused functions the compiler complains about...). I work on it and if I run
out of time I send it. I usually don't pile up more than one-day work locally.
This way multiple development efforts synchronize _automatically_ and there's no
huge coordination needed in practice.

But in any case, it would be nice for us to know what particular feature you're working
on, so other developers can focus on other stuff.

-- 
Greetings, Michael.


From mb at bu3sch.de  Sun Apr 12 21:45:27 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Sun, 12 Apr 2009 21:45:27 +0200
Subject: BCM4312 (B/G) (low power)
In-Reply-To: <200904122141.37828.mb@bu3sch.de>
References: <36121a670904120455y79d51e37mb2246a49beebee6f@mail.gmail.com>
	<49E2320D.7030109@lwfinger.net> <200904122141.37828.mb@bu3sch.de>
Message-ID: <200904122145.27715.mb@bu3sch.de>

On Sunday 12 April 2009 21:41:37 Michael Buesch wrote:
> There are two reasons for sending stuff very early:
> 1)..2)..3)..4)..

I should improve my counting skills.

-- 
Greetings, Michael.


From Larry.Finger at lwfinger.net  Sun Apr 12 21:59:21 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Sun, 12 Apr 2009 14:59:21 -0500
Subject: BCM4312 (B/G) (low power)
In-Reply-To: <200904122145.27715.mb@bu3sch.de>
References: <36121a670904120455y79d51e37mb2246a49beebee6f@mail.gmail.com>
	<49E2320D.7030109@lwfinger.net> <200904122141.37828.mb@bu3sch.de>
	<200904122145.27715.mb@bu3sch.de>
Message-ID: <49E24819.2000302@lwfinger.net>

Michael Buesch wrote:
> On Sunday 12 April 2009 21:41:37 Michael Buesch wrote:
>> There are two reasons for sending stuff very early:
>> 1)..2)..3)..4)..
> 
> I should improve my counting skills.

It doesn't matter. I'm satisfied that you can code. Counting is optional.
Besides, you probably would have done better with eins, zwei, drei, fier. If we
ever meet, have me tell you my story about counting in German, and the Munich
transit police.

Larry


From Larry.Finger at lwfinger.net  Tue Apr 14 06:14:00 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Mon, 13 Apr 2009 23:14:00 -0500
Subject: b43legacy AP
In-Reply-To: <30353c3d0904110756qfc35928x265db523bd1f86be@mail.gmail.com>
References: <30353c3d0904100736g69782d46g18d99edd0dd0660d@mail.gmail.com>	
	<49DF9E38.5030801@lwfinger.net>	
	<30353c3d0904101349o915439arffb652b98e245e10@mail.gmail.com>
	<30353c3d0904110756qfc35928x265db523bd1f86be@mail.gmail.com>
Message-ID: <49E40D88.3050709@lwfinger.net>

David Ellingsworth wrote:
> I wanted to report that I've finally been successful at getting
> b43legacy to beacon properly. Originally, I had configured hostapd to
> use channel 1. After reading the list of bugs for the bwi driver,
> shown here: http://leaf.dragonflybsd.org/cgi/web-man?command=bwi , I
> had the inclination to try channel 6. It appears b43legacy might have
> the same bugs as the bwi driver as I immediately began seeing beacons
> once I started using channel 6.

I finally got a chance to test my BCM4306/2 that uses b43legacy. It works just
fine as an AP using channel 1. At least on my device, it does not have the
problem of the bwi driver.

Larry


From enyaw_ecurb at gmx.net  Tue Apr 14 19:02:29 2009
From: enyaw_ecurb at gmx.net (Bruce Wayne)
Date: Tue, 14 Apr 2009 19:02:29 +0200
Subject: 4312: not working after power is plugged in/out
Message-ID: <20090414190229.0787c6f1@batbook>

Hi, i'm running an hp laptop with an 4312 card, which works quite well
when i boot on battery or with cable plugged in. However, when i switch
between those modes, eg. plugging power in/out, b43 stops working. It
throws hell of those messages

[ 7725.009066] b43-phy0: Loading firmware version 410.2160 (2007-05-26 15:32:10)
[ 7725.049781] Registered led device: b43-phy0::tx
[ 7725.049818] Registered led device: b43-phy0::rx
[ 7725.049858] Registered led device: b43-phy0::radio
[ 7725.049919] __ratelimit: 65 callbacks suppressed
[ 7725.049923] b43-phy0: Controller restarted
[ 7725.049948] b43-phy0 ERROR: Fatal DMA error: 0x00000400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
[ 7725.049966] b43-phy0: Controller RESET (DMA error) ...
[ 7725.219069] b43-phy0: Loading firmware version 410.2160 (2007-05-26 15:32:10)
[ 7725.259786] Registered led device: b43-phy0::tx
[ 7725.259822] Registered led device: b43-phy0::rx
[ 7725.259861] Registered led device: b43-phy0::radio

and the led starts blinking (which is quite funny but rather useless). 
Apparently the device tries to restart itself quite a few times each second
and causes heavy cpu load (~50%).

I'm using ubuntu with custom 2.6.29.1 kernel and remember having the same problems
with 2.6.27.

In which way are these problems related to b43 and not to my acpi or my kernel?
Any ideas/suggestions how to figure out what exactly is going wrong here?

Regards,
Nils Becker


From Larry.Finger at lwfinger.net  Tue Apr 14 21:01:51 2009
From: Larry.Finger at lwfinger.net (Larry Finger)
Date: Tue, 14 Apr 2009 14:01:51 -0500
Subject: 4312: not working after power is plugged in/out
In-Reply-To: <20090414190229.0787c6f1@batbook>
References: <20090414190229.0787c6f1@batbook>
Message-ID: <49E4DD9F.70402@lwfinger.net>

Bruce Wayne wrote:
> 
> I'm using ubuntu with custom 2.6.29.1 kernel and remember having the same problems
> with 2.6.27.
> 
> In which way are these problems related to b43 and not to my acpi or my kernel?
> Any ideas/suggestions how to figure out what exactly is going wrong here?

These problems are not inherent in b43. I have run both 2.6.27 and 2.6.29
kernels on my HP laptop with a BCM4312 module, and I do not see that problem. It
may be a BIOS problem on your machine that interacts through the ACPI system.


From mb at bu3sch.de  Tue Apr 14 21:37:00 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Tue, 14 Apr 2009 21:37:00 +0200
Subject: 4312: not working after power is plugged in/out
In-Reply-To: <20090414190229.0787c6f1@batbook>
References: <20090414190229.0787c6f1@batbook>
Message-ID: <200904142137.00813.mb@bu3sch.de>

On Tuesday 14 April 2009 19:02:29 Bruce Wayne wrote:
> Hi, i'm running an hp laptop with an 4312 card, which works quite well
> when i boot on battery or with cable plugged in. However, when i switch
> between those modes, eg. plugging power in/out, b43 stops working. It
> throws hell of those messages
> 
> [ 7725.009066] b43-phy0: Loading firmware version 410.2160 (2007-05-26 15:32:10)
> [ 7725.049781] Registered led device: b43-phy0::tx
> [ 7725.049818] Registered led device: b43-phy0::rx
> [ 7725.049858] Registered led device: b43-phy0::radio
> [ 7725.049919] __ratelimit: 65 callbacks suppressed
> [ 7725.049923] b43-phy0: Controller restarted
> [ 7725.049948] b43-phy0 ERROR: Fatal DMA error: 0x00000400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000


0x400 is a DMA ring descriptor error.
That means the device is unable to read from main memory.
It almost certainly is your BIOS corrupting the some PCI DMA settings when power sources
are switched. You could try booting with noacpi or something like that. Maybe
you could also play around with your BIOS settings.
A BIOS update, if available, would also be a good thing to try.

-- 
Greetings, Michael.


From eforezz at gmail.com  Thu Apr 16 16:15:58 2009
From: eforezz at gmail.com (EforeZZ)
Date: Thu, 16 Apr 2009 17:15:58 +0300
Subject: ACI and WLAN interface mitigation
Message-ID: <b09816520904160715p6ac1a183x106cff5169c9f898@mail.gmail.com>

Hi guys,

I'd be very grateful if anyone explains what is ACI and WLAN interface
mitigation in the b43 driver and what are these things used for..

Thanks.
--
EforeZZ


From mb at bu3sch.de  Thu Apr 16 16:36:20 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Thu, 16 Apr 2009 16:36:20 +0200
Subject: ACI and WLAN interface mitigation
In-Reply-To: <b09816520904160715p6ac1a183x106cff5169c9f898@mail.gmail.com>
References: <b09816520904160715p6ac1a183x106cff5169c9f898@mail.gmail.com>
Message-ID: <200904161636.21066.mb@bu3sch.de>

On Thursday 16 April 2009 16:15:58 EforeZZ wrote:
> Hi guys,
> 
> I'd be very grateful if anyone explains what is ACI and WLAN interface
> mitigation in the b43 driver and what are these things used for..

These are mechanisms to reduce the physical radio interference.
They aren't completely implemented in the driver, so don't enable them, please.

-- 
Greetings, Michael.


From achrisjo at yahoo.com  Sat Apr 18 22:35:09 2009
From: achrisjo at yahoo.com (Arne Chr. Jorgensen)
Date: Sat, 18 Apr 2009 13:35:09 -0700 (PDT)
Subject: Fedora-10 nighmare-dmidecode
Message-ID: <916841.10861.qm@web63701.mail.re1.yahoo.com>



(CC: bcm43xx list, hope to be forgiven - it is working without cable now ;)


you wrote:
> Message: 3
> Date: Sat, 18 Apr 2009 20:18:35 +0530
> From: Mani A <a.mani.cms at gmail.com>
> Subject: Re: Fedora-10 nightmare-5
> To: For testers of Fedora Core development releases
>     <fedora-test-list at redhat.com>
> Message-ID:
>    <78323d480904180748y3ae4f228ub377e5d2c3b0cbaa at mail.gmail.com>
> Content-Type: text/plain; charset=ISO-8859-1
>
>
> On Wed, Apr 15, 2009 at 1:32 PM, Arne Chr. Jorgensen <achrisjo at yahoo.com> > wrote:
> >
> > hi,
> >
> > In my view, that wifi-on may help, makes sense. I would be very pleased
> > in anyone would bother to mention the issue to Xorg, and such, as it is 
>
> I think it clear where the error may be located. I have worked around the > clock, and it is such a painstaking thing to just write anything at all on > this machine on the momenent.
>
> Please post/provide link of relevant parts of lspci/lshw and dmidecode 
> info.
>
> For the X part, I think you should disable automatic monitor detection
> and try different options to the driver.
>
> Best
>
> A. Mani
>

I tried to make an xorg.conf, but synaptics did not "see" the 'SHMConfig' 'true' that I set. Tried different examples that I found, without luck. 
But, yes, I this is probably the thing to do.

The scaling causes a lot of noise on the screen, and it also stop downloads,
or - you see the message on the bottom that it is connecting to a server, but
it will time out without showing any page, very often. 

Either half the servers in the world was down, or I had some serious DNS problems. Later I found it had to do with cpu-scaling. 

Radio on and also enable ethernet cable, have worked to speed up downloads.
However, if radio is off - then you may start and stop the machine by touching the pad. 

//ARNE
                        -----------------------
 
== grub.conf ==================================================
#boot=/dev/sda
default=0
timeout=5
splashimage=(hd0,2)/grub/splash.xpm.gz
hiddenmenu
title Fedora (2.6.27.21-170.2.56.fc10.x86_64)
	root (hd0,2)
	kernel /vmlinuz-2.6.27.21-170.2.56.fc10.x86_64 ro root=/dev/VolGroup00/LogVol00 rhgb quiet init=/sbin/bootchartd
	initrd /initrd-2.6.27.21-170.2.56.fc10.x86_64.img
title Fedora (2.6.27.5-117.fc10.x86_64)
	root (hd0,2)
	kernel /vmlinuz-2.6.27.5-117.fc10.x86_64 ro root=UUID=c8e3beeb-2b26-4db6-aed5-d7d6e5221fa8 rhgb quiet
	initrd /initrd-2.6.27.5-117.fc10.x86_64.img
title Other
	rootnoverify (hd0,0)
	chainloader +1

== System:==================================================
# dmidecode 2.9
SMBIOS 2.4 present.

Handle 0x0001, DMI type 1, 27 bytes
System Information
	Manufacturer: Hewlett-Packard
	Product Name: HP Compaq 6715b (GB835ET#ABN)
	Version: F.07
	Serial Number: CNU7440DYR
	UUID: A1F723F0-0E16-E011-0D90-6D990E4F6129
	Wake-up Type: Power Switch
	SKU Number: GB835ET#ABN
	Family: 103C_5336AN

Handle 0x0010, DMI type 32, 11 bytes
System Boot Information
	Status: No errors detected

== Bios:==================================================
# dmidecode 2.9
SMBIOS 2.4 present.

Handle 0x0000, DMI type 0, 24 bytes
BIOS Information
	Vendor: Hewlett-Packard
	Version: 68YTT Ver. F.07
	Release Date: 07/16/2007
	Address: 0xE0000
	Runtime Size: 128 kB
	ROM Size: 1024 kB
	Characteristics:
		PCI is supported
		PC Card (PCMCIA) is supported
		PNP is supported
		BIOS is upgradeable
		BIOS shadowing is allowed
		Boot from CD is supported
		Selectable boot is supported
		EDD is supported
		3.5"/720 KB floppy services are supported (int 13h)
		Print screen service is supported (int 5h)
		8042 keyboard services are supported (int 9h)
		Serial services are supported (int 14h)
		Printer services are supported (int 17h)
		ACPI is supported
		USB legacy is supported
		LS-120 boot is supported
		Smart battery is supported
		BIOS boot specification is supported
		Function key-initiated network boot is supported
		Targeted content distribution is supported
	BIOS Revision: 15.7
	Firmware Revision: 113.40
== processors ==================================================
# dmidecode 2.9
SMBIOS 2.4 present.

Handle 0x0004, DMI type 4, 35 bytes
Processor Information
	Socket Designation: U10
	Type: Central Processor
	Family: Athlon 64
	Manufacturer: AMD(R)
	ID: 82 0F 04 00 FF FB 8B 17
	Signature: Family 15, Model 72, Stepping 2
	Flags:
		FPU (Floating-point unit on-chip)
		VME (Virtual mode extension)
		DE (Debugging extension)
		PSE (Page size extension)
		TSC (Time stamp counter)
		MSR (Model specific registers)
		PAE (Physical address extension)
		MCE (Machine check exception)
		CX8 (CMPXCHG8 instruction supported)
		APIC (On-chip APIC hardware supported)
		SEP (Fast system call)
		MTRR (Memory type range registers)
		PGE (Page global enable)
		MCA (Machine check architecture)
		CMOV (Conditional move instruction supported)
		PAT (Page attribute table)
		PSE-36 (36-bit page size extension)
		CLFSH (CLFLUSH instruction supported)
		MMX (MMX technology supported)
		FXSR (Fast floating-point save and restore)
		SSE (Streaming SIMD extensions)
		SSE2 (Streaming SIMD extensions 2)
		HTT (Hyper-threading technology)
	Version: AMD Turion(tm) 64 X2 Mobile TL-60              
	Voltage: 1.1 V
	External Clock: 200 MHz
	Max Speed: 2000 MHz
	Current Speed: 2000 MHz
	Status: Populated, Enabled
	Upgrade: None
	L1 Cache Handle: 0x0005
	L2 Cache Handle: 0x0006
	L3 Cache Handle: Not Provided
	Serial Number: Not Specified
	Asset Tag: Not Specified
	Part Number: Not Specified
== lspci: ==================================================
00:00.0 Host bridge: ATI Technologies Inc RS690 Host Bridge
00:01.0 PCI bridge: ATI Technologies Inc RS690 PCI to PCI Bridge (Internal gfx)
00:04.0 PCI bridge: ATI Technologies Inc Device 7914
00:05.0 PCI bridge: ATI Technologies Inc RS690 PCI to PCI Bridge (PCI Express Port 1)
00:06.0 PCI bridge: ATI Technologies Inc RS690 PCI to PCI Bridge (PCI Express Port 2)
00:12.0 SATA controller: ATI Technologies Inc SB600 Non-Raid-5 SATA
00:13.0 USB Controller: ATI Technologies Inc SB600 USB (OHCI0)
00:13.1 USB Controller: ATI Technologies Inc SB600 USB (OHCI1)
00:13.2 USB Controller: ATI Technologies Inc SB600 USB (OHCI2)
00:13.3 USB Controller: ATI Technologies Inc SB600 USB (OHCI3)
00:13.4 USB Controller: ATI Technologies Inc SB600 USB (OHCI4)
00:13.5 USB Controller: ATI Technologies Inc SB600 USB Controller (EHCI)
00:14.0 SMBus: ATI Technologies Inc SBx00 SMBus Controller (rev 14)
00:14.1 IDE interface: ATI Technologies Inc SB600 IDE
00:14.2 Audio device: ATI Technologies Inc SBx00 Azalia (Intel HDA)
00:14.3 ISA bridge: ATI Technologies Inc SB600 PCI to LPC Bridge
00:14.4 PCI bridge: ATI Technologies Inc SBx00 PCI to PCI Bridge
00:18.0 Host bridge: Advanced Micro Devices [AMD] K8 [Athlon64/Opteron] HyperTransport Technology Configuration
00:18.1 Host bridge: Advanced Micro Devices [AMD] K8 [Athlon64/Opteron] Address Map
00:18.2 Host bridge: Advanced Micro Devices [AMD] K8 [Athlon64/Opteron] DRAM Controller
00:18.3 Host bridge: Advanced Micro Devices [AMD] K8 [Athlon64/Opteron] Miscellaneous Control
01:05.0 VGA compatible controller: ATI Technologies Inc RS690M [Radeon X1200 Series]
02:04.0 CardBus bridge: Ricoh Co Ltd RL5c476 II (rev b6)
02:04.1 FireWire (IEEE 1394): Ricoh Co Ltd R5C832 IEEE 1394 Controller (rev 02)
10:00.0 Ethernet controller: Broadcom Corporation NetLink BCM5787M Gigabit Ethernet PCI Express (rev 02)
30:00.0 Network controller: Broadcom Corporation BCM4312 802.11a/b/g (rev 02)
== dmesg: ==================================================
Initializing cgroup subsys cpuset
Initializing cgroup subsys cpu
Linux version 2.6.27.21-170.2.56.fc10.x86_64 (mockbuild at x86-3.fedora.phx.redhat.com) (gcc version 4.3.2 20081105 (Red Hat 4.3.2-7) (GCC) ) #1 SMP Mon Mar 23 23:08:10 EDT 2009
Command line: ro root=/dev/VolGroup00/LogVol00 rhgb quiet init=/sbin/bootchartd
KERNEL supported cpus:
  Intel GenuineIntel
  AMD AuthenticAMD
  Centaur CentaurHauls
BIOS-provided physical RAM map:
 BIOS-e820: 0000000000000000 - 000000000009fc00 (usable)
 BIOS-e820: 000000000009fc00 - 00000000000a0000 (reserved)
 BIOS-e820: 00000000000e0000 - 0000000000100000 (reserved)
 BIOS-e820: 0000000000100000 - 0000000077fb0000 (usable)
 BIOS-e820: 0000000077fb0000 - 0000000077fc8000 (reserved)
 BIOS-e820: 0000000077fc8000 - 0000000077fe7fb8 (ACPI NVS)
 BIOS-e820: 0000000077fe7fb8 - 0000000080000000 (reserved)
 BIOS-e820: 00000000e0000000 - 00000000f0000000 (reserved)
 BIOS-e820: 00000000fec00000 - 00000000fec02000 (reserved)
 BIOS-e820: 00000000ffbc0000 - 00000000ffcc0000 (reserved)
 BIOS-e820: 00000000fff00000 - 0000000100000000 (reserved)
DMI 2.4 present.
last_pfn = 0x77fb0 max_arch_pfn = 0x3ffffffff
x86 PAT enabled: cpu 0, old 0x7040600070406, new 0x7010600070106
init_memory_mapping
 0000000000 - 0077e00000 page 2M
 0077e00000 - 0077fb0000 page 4k
kernel direct mapping tables up to 77fb0000 @ 8000-c000
last_map_addr: 77fb0000 end: 77fb0000
RAMDISK: 37bfe000 - 37fef900
ACPI: RSDP 000FE0B0, 0024 (r2 HP    )
ACPI: XSDT 77FC81BC, 0064 (r1 HPQOEM SLIC-MPC        1 HP          1)
ACPI: FACP 77FC8084, 00F4 (r4 HP     0944            3 HP          1)
ACPI Error (tbfadt-0453): 32/64X address mismatch in "Pm2ControlBlock": [00008800] [0000000000008100], using 64X [20080609]
ACPI: DSDT 77FC84A4, 11437 (r1 HP        SB400    10000 MSFT  3000001)
ACPI: FACS 77FE7D80, 0040
ACPI: SLIC 77FC8220, 0176 (r1 HPQOEM SLIC-MPC        1 HP          1)
ACPI: EPTH 77FC8398, 0038 (r1 HP     0944            1 HP          1)
ACPI: APIC 77FC83D0, 0062 (r1 HP     0944            1 HP          1)
ACPI: MCFG 77FC8434, 003C (r1 HP     0944            1 HP          1)
ACPI: TCPA 77FC8470, 0032 (r2 HP     0944            1 HP          1)
ACPI: SSDT 77FD98DB, 0059 (r1 HP       HPQNLP        1 MSFT  3000001)
ACPI: SSDT 77FD9934, 0206 (r1 HP     PSSTBLID        1 HP          1)
ACPI: DMI detected: Hewlett-Packard
Scanning NUMA topology in Northbridge 24
No NUMA configuration found
Faking a node at 0000000000000000-0000000077fb0000
Bootmem setup node 0 0000000000000000-0000000077fb0000
  NODE_DATA [000000000000a000 - 000000000001efff]
  bootmap [000000000001f000 -  000000000002dff7] pages f
(6 early reservations) ==> bootmem [0000000000 - 0077fb0000]
  #0 [0000000000 - 0000001000]   BIOS data page ==> [0000000000 - 0000001000]
  #1 [0000006000 - 0000008000]       TRAMPOLINE ==> [0000006000 - 0000008000]
  #2 [0000200000 - 0000a2f0cc]    TEXT DATA BSS ==> [0000200000 - 0000a2f0cc]
  #3 [0037bfe000 - 0037fef900]          RAMDISK ==> [0037bfe000 - 0037fef900]
  #4 [000009fc00 - 0000100000]    BIOS reserved ==> [000009fc00 - 0000100000]
  #5 [0000008000 - 000000a000]          PGTABLE ==> [0000008000 - 000000a000]
 [ffffe20000000000-ffffe20001bfffff] PMD -> [ffff880001200000-ffff880002dfffff] on node 0
Zone PFN ranges:
  DMA      0x00000000 -> 0x00001000
  DMA32    0x00001000 -> 0x00100000
  Normal   0x00100000 -> 0x00100000
Movable zone start PFN for each node
early_node_map[2] active PFN ranges
    0: 0x00000000 -> 0x0000009f
    0: 0x00000100 -> 0x00077fb0
On node 0 totalpages: 491343
  DMA zone: 1747 pages, LIFO batch:0
  DMA32 zone: 480681 pages, LIFO batch:31
SB600 revision 0x13
Ignoring ACPI timer override.
If you got timer trouble try acpi_use_timer_override
Detected use of extended apic ids on hypertransport bus
HP 6715b laptop detected: Ignoring BIOS IRQ0 pin2 override
ACPI: PM-Timer IO Port: 0x8008
ACPI: Local APIC address 0xfee00000
ACPI: LAPIC (acpi_id[0x01] lapic_id[0x00] enabled)
ACPI: LAPIC (acpi_id[0x02] lapic_id[0x01] enabled)
ACPI: LAPIC_NMI (acpi_id[0x01] high edge lint[0x1])
ACPI: IOAPIC (id[0x02] address[0xfec00000] gsi_base[0])
IOAPIC[0]: apic_id 2, version 0, address 0xfec00000, GSI 0-23
ACPI: INT_SRC_OVR (bus 0 bus_irq 0 global_irq 2 dfl dfl)
ACPI: BIOS IRQ0 pin2 override ignored.
ACPI: INT_SRC_OVR (bus 0 bus_irq 9 global_irq 9 low level)
ACPI: IRQ9 used by override.
Setting APIC routing to flat
Using ACPI (MADT) for SMP configuration information
SMP: Allowing 2 CPUs, 0 hotplug CPUs
PM: Registered nosave memory: 000000000009f000 - 00000000000a0000
PM: Registered nosave memory: 00000000000a0000 - 00000000000e0000
PM: Registered nosave memory: 00000000000e0000 - 0000000000100000
Allocating PCI resources starting at 88000000 (gap: 80000000:60000000)
PERCPU: Allocating 65184 bytes of per cpu data
NR_CPUS: 64, nr_cpu_ids: 2, nr_node_ids 1
Built 1 zonelists in Node order, mobility grouping on.  Total pages: 482428
Policy zone: DMA32
Kernel command line: ro root=/dev/VolGroup00/LogVol00 rhgb quiet init=/sbin/bootchartd
Initializing CPU#0
PID hash table entries: 4096 (order: 12, 32768 bytes)
Extended CMOS year: 2000
TSC: Unable to calibrate against PIT
TSC: using PMTIMER reference calibration
Detected 1994.204 MHz processor.
Console: colour VGA+ 80x25
console [tty0] enabled
Checking aperture...
No AGP bridge found
Node 0: aperture @ 0 size 32 MB
Memory: 1923848k/1965760k available (3306k kernel code, 41524k reserved, 1837k data, 1296k init)
CPA: page pool initialized 1 of 1 pages preallocated
SLUB: Genslabs=13, HWalign=64, Order=0-3, MinObjects=0, CPUs=2, Nodes=1
Calibrating delay loop (skipped), value calculated using timer frequency.. 3988.40 BogoMIPS (lpj=1994204)
Security Framework initialized
SELinux:  Initializing.
SELinux:  Starting in permissive mode
Dentry cache hash table entries: 262144 (order: 9, 2097152 bytes)
Inode-cache hash table entries: 131072 (order: 8, 1048576 bytes)
Mount-cache hash table entries: 256
Initializing cgroup subsys ns
Initializing cgroup subsys cpuacct
Initializing cgroup subsys devices
CPU: L1 I Cache: 64K (64 bytes/line), D cache 64K (64 bytes/line)
CPU: L2 Cache: 512K (64 bytes/line)
CPU 0/0 -> Node 0
tseg: 0000000000
CPU: Physical Processor ID: 0
CPU: Processor Core ID: 0
using C1E aware idle routine
ACPI: Core revision 20080609
..TIMER: vector=0x30 apic1=0 pin1=0 apic2=-1 pin2=-1
CPU0: AMD Turion(tm) 64 X2 Mobile Technology TL-60 stepping 02
Using local APIC timer interrupts.
APIC timer calibration result 12463788
Detected 12.463 MHz APIC timer.
Booting processor 1/1 ip 6000
Initializing CPU#1
Calibrating delay using timer specific routine.. 3988.26 BogoMIPS (lpj=1994134)
CPU: L1 I Cache: 64K (64 bytes/line), D cache 64K (64 bytes/line)
CPU: L2 Cache: 512K (64 bytes/line)
CPU 1/1 -> Node 0
CPU: Physical Processor ID: 0
CPU: Processor Core ID: 1
x86 PAT enabled: cpu 1, old 0x7040600070406, new 0x7010600070106
CPU1: AMD Turion(tm) 64 X2 Mobile Technology TL-60 stepping 02
System has AMD C1E enabled
Switch to broadcast mode on CPU1
Brought up 2 CPUs
Total of 2 processors activated (7976.67 BogoMIPS).
sizeof(vma)=176 bytes
sizeof(page)=56 bytes
sizeof(inode)=560 bytes
sizeof(dentry)=208 bytes
sizeof(ext3inode)=760 bytes
sizeof(buffer_head)=104 bytes
sizeof(skbuff)=232 bytes
sizeof(task_struct)=5904 bytes
CPU0 attaching sched-domain:
 domain 0: span 0-1 level CPU
  groups: 0 1
  domain 1: span 0-1 level NODE
   groups: 0-1
CPU1 attaching sched-domain:
 domain 0: span 0-1 level CPU
  groups: 1 0
  domain 1: span 0-1 level NODE
   groups: 0-1
net_namespace: 1552 bytes
Booting paravirtualized kernel on bare hardware
Time:  0:12:43  Date: 04/15/09
NET: Registered protocol family 16
No dock devices found.
node 0 link 0: io port [1000, fffff]
TOM: 0000000080000000 aka 2048M
node 0 link 0: mmio [e0000000, efffffff]
node 0 link 0: mmio [f0000000, ffffffff]
node 0 link 0: mmio [c8000000, dfffffff]
node 0 link 0: mmio [c0000000, c7ffffff]
node 0 link 0: mmio [a0000, bffff]
node 0 link 0: mmio [80000000, bfffffff]
bus: [00,ff] on node 0 link 0
bus: 00 index 0 io port: [0, ffff]
bus: 00 index 1 mmio: [80000000, fcffffffff]
bus: 00 index 2 mmio: [a0000, bffff]
ACPI: bus type pci registered
Switch to broadcast mode on CPU0
PCI: MCFG configuration 0: base e0000000 segment 0 buses 0 - 255
PCI: MCFG area at e0000000 reserved in E820
PCI: Using MMCONFIG at e0000000 - efffffff
PCI: Using configuration type 1 for base access
ACPI: EC: Look up EC in DSDT
ACPI: EC: non-query interrupt received, switching to interrupt mode
ACPI: Interpreter enabled
ACPI: (supports S0 S3 S4 S5)
ACPI: Using IOAPIC for interrupt routing
ACPI: EC: GPE = 0x11, I/O: command/status = 0x66, data = 0x62
ACPI: EC: driver started in interrupt mode
ACPI: PCI Root Bridge [C08B] (0000:00)
pci 0000:00:04.0: PME# supported from D0 D3hot D3cold
pci 0000:00:04.0: PME# disabled
pci 0000:00:05.0: PME# supported from D0 D3hot D3cold
pci 0000:00:05.0: PME# disabled
pci 0000:00:06.0: PME# supported from D0 D3hot D3cold
pci 0000:00:06.0: PME# disabled
PCI: 0000:00:12.0 reg 10 io port: [9000, 9007]
PCI: 0000:00:12.0 reg 14 io port: [9008, 900b]
PCI: 0000:00:12.0 reg 18 io port: [9010, 9017]
PCI: 0000:00:12.0 reg 1c io port: [5018, 501b]
PCI: 0000:00:12.0 reg 20 io port: [5020, 502f]
PCI: 0000:00:12.0 reg 24 32bit mmio: [d0609000, d06093ff]
pci 0000:00:12.0: set SATA to AHCI mode
PCI: 0000:00:13.0 reg 10 32bit mmio: [d0601000, d0601fff]
PCI: 0000:00:13.1 reg 10 32bit mmio: [d0602000, d0602fff]
PCI: 0000:00:13.2 reg 10 32bit mmio: [d0603000, d0603fff]
PCI: 0000:00:13.3 reg 10 32bit mmio: [d0604000, d0604fff]
PCI: 0000:00:13.4 reg 10 32bit mmio: [d0605000, d0605fff]
PCI: 0000:00:13.5 reg 10 32bit mmio: [d0606000, d06060ff]
pci 0000:00:13.5: supports D1
pci 0000:00:13.5: supports D2
pci 0000:00:13.5: PME# supported from D0 D1 D2 D3hot
pci 0000:00:13.5: PME# disabled
PCI: 0000:00:14.0 reg 10 io port: [8200, 820f]
PCI: 0000:00:14.1 reg 10 io port: [0, 7]
PCI: 0000:00:14.1 reg 14 io port: [0, 3]
PCI: 0000:00:14.1 reg 18 io port: [0, 7]
PCI: 0000:00:14.1 reg 1c io port: [0, 3]
PCI: 0000:00:14.1 reg 20 io port: [5040, 504f]
PCI: 0000:00:14.2 reg 10 64bit mmio: [d0608000, d060bfff]
pci 0000:00:14.2: PME# supported from D0 D3hot D3cold
pci 0000:00:14.2: PME# disabled
PCI: 0000:01:05.0 reg 10 64bit mmio: [c0000000, c7ffffff]
PCI: 0000:01:05.0 reg 18 64bit mmio: [d0400000, d040ffff]
PCI: 0000:01:05.0 reg 20 io port: [4000, 40ff]
PCI: 0000:01:05.0 reg 24 32bit mmio: [d0500000, d05fffff]
pci 0000:01:05.0: supports D1
pci 0000:01:05.0: supports D2
PCI: bridge 0000:00:01.0 io port: [4000, 4fff]
PCI: bridge 0000:00:01.0 32bit mmio: [d0400000, d05fffff]
PCI: bridge 0000:00:01.0 64bit mmio pref: [c0000000, c7ffffff]
PCI: 0000:10:00.0 reg 10 64bit mmio: [d0000000, d000ffff]
pci 0000:10:00.0: PME# supported from D3hot D3cold
pci 0000:10:00.0: PME# disabled
PCI: bridge 0000:00:04.0 32bit mmio: [d0000000, d00fffff]
PCI: bridge 0000:00:05.0 io port: [2000, 3fff]
PCI: bridge 0000:00:05.0 32bit mmio: [cc000000, cfffffff]
PCI: bridge 0000:00:06.0 32bit mmio: [c8000000, c80fffff]
PCI: 0000:02:04.0 reg 10 32bit mmio: [d0100000, d0100fff]
pci 0000:02:04.0: supports D1
pci 0000:02:04.0: supports D2
pci 0000:02:04.0: PME# supported from D0 D1 D2 D3hot D3cold
pci 0000:02:04.0: PME# disabled
PCI: 0000:02:04.1 reg 10 32bit mmio: [d0101000, d01017ff]
pci 0000:02:04.1: supports D1
pci 0000:02:04.1: supports D2
pci 0000:02:04.1: PME# supported from D0 D1 D2 D3hot D3cold
pci 0000:02:04.1: PME# disabled
pci 0000:00:14.4: transparent bridge
PCI: bridge 0000:00:14.4 32bit mmio: [d0100000, d03fffff]
ACPI: PCI Interrupt Routing Table [\_SB_.C08B._PRT]
ACPI: PCI Interrupt Routing Table [\_SB_.C08B.C08C._PRT]
ACPI: PCI Interrupt Routing Table [\_SB_.C08B.C0FC._PRT]
ACPI: PCI Interrupt Link [C145] (IRQs 10 11) *0, disabled.
ACPI: PCI Interrupt Link [C146] (IRQs 10 11) *0, disabled.
ACPI: PCI Interrupt Link [C147] (IRQs 10 11) *0, disabled.
ACPI: PCI Interrupt Link [C148] (IRQs 10 11) *0, disabled.
ACPI: PCI Interrupt Link [C149] (IRQs 10 11) *0, disabled.
ACPI: PCI Interrupt Link [C14A] (IRQs 9) *0, disabled.
ACPI: PCI Interrupt Link [C14B] (IRQs 10 11) *0, disabled.
ACPI: PCI Interrupt Link [C14C] (IRQs 10 11) *0, disabled.
ACPI: Power Resource [C171] (off)
ACPI: Power Resource [C230] (off)
ACPI: Power Resource [C24C] (on)
ACPI: Power Resource [C395] (off)
ACPI: Power Resource [C396] (off)
ACPI: Power Resource [C397] (off)
ACPI: Power Resource [C398] (off)
Linux Plug and Play Support v0.97 (c) Adam Belay
pnp: PnP ACPI init
ACPI: bus type pnp registered
pnp: PnP ACPI: found 14 devices
ACPI: ACPI bus type pnp unregistered
SCSI subsystem initialized
libata version 3.00 loaded.
usbcore: registered new interface driver usbfs
usbcore: registered new interface driver hub
usbcore: registered new device driver usb
PCI: Using ACPI for IRQ routing
pci 0000:00:14.2: BAR 0: can't allocate resource
NetLabel: Initializing
NetLabel:  domain hash size = 128
NetLabel:  protocols = UNLABELED CIPSOv4
NetLabel:  unlabeled traffic allowed by default
tracer: 1286 pages allocated for 65536 entries of 80 bytes
   actual entries 65586
ACPI: RTC can wake from S4
system 00:00: iomem range 0x0-0x9ffff could not be reserved
system 00:00: iomem range 0xe0000-0xfffff could not be reserved
system 00:00: iomem range 0x100000-0xffffffff could not be reserved
system 00:0a: ioport range 0x40b-0x40b has been reserved
system 00:0a: ioport range 0x4d0-0x4d1 has been reserved
system 00:0a: ioport range 0x4d6-0x4d6 has been reserved
system 00:0a: ioport range 0x500-0x51f has been reserved
system 00:0a: ioport range 0xc00-0xc01 has been reserved
system 00:0a: ioport range 0xc14-0xc14 has been reserved
system 00:0a: ioport range 0xc50-0xc51 has been reserved
system 00:0a: ioport range 0xc52-0xc52 has been reserved
system 00:0a: ioport range 0xc6c-0xc6c has been reserved
system 00:0a: ioport range 0xc6f-0xc6f has been reserved
system 00:0a: ioport range 0xcd0-0xcdf has been reserved
system 00:0a: iomem range 0xffb00000-0xffbfffff could not be reserved
system 00:0a: iomem range 0xfff00000-0xffffffff could not be reserved
system 00:0c: ioport range 0x8000-0x802f has been reserved
system 00:0c: ioport range 0x8100-0x811f has been reserved
system 00:0c: iomem range 0xe0000000-0xefffffff could not be reserved
system 00:0c: iomem range 0xfec00000-0xfec000ff could not be reserved
system 00:0c: iomem range 0xfed45000-0xfed8ffff has been reserved
system 00:0d: iomem range 0xcd400-0xcffff has been reserved
system 00:0d: iomem range 0xd2a00-0xd2fff has been reserved
system 00:0d: iomem range 0x0-0x7ffffff could not be reserved
system 00:0d: iomem range 0xfee00000-0xfee00fff has been reserved
pci 0000:00:01.0: PCI bridge, secondary bus 0000:01
pci 0000:00:01.0:   IO window: 0x4000-0x4fff
pci 0000:00:01.0:   MEM window: 0xd0400000-0xd05fffff
pci 0000:00:01.0:   PREFETCH window: 0x000000c0000000-0x000000c7ffffff
pci 0000:00:04.0: PCI bridge, secondary bus 0000:10
pci 0000:00:04.0:   IO window: disabled
pci 0000:00:04.0:   MEM window: 0xd0000000-0xd00fffff
pci 0000:00:04.0:   PREFETCH window: disabled
pci 0000:00:05.0: PCI bridge, secondary bus 0000:20
pci 0000:00:05.0:   IO window: 0x2000-0x3fff
pci 0000:00:05.0:   MEM window: 0xcc000000-0xcfffffff
pci 0000:00:05.0:   PREFETCH window: disabled
pci 0000:00:06.0: PCI bridge, secondary bus 0000:30
pci 0000:00:06.0:   IO window: disabled
pci 0000:00:06.0:   MEM window: 0xc8000000-0xc80fffff
pci 0000:00:06.0:   PREFETCH window: disabled
pci 0000:02:04.0: CardBus bridge, secondary bus 0000:03
pci 0000:02:04.0:   IO window: 0x001000-0x0010ff
pci 0000:02:04.0:   IO window: 0x001400-0x0014ff
pci 0000:02:04.0:   PREFETCH window: 0x88000000-0x8bffffff
pci 0000:02:04.0:   MEM window: 0x90000000-0x93ffffff
pci 0000:00:14.4: PCI bridge, secondary bus 0000:02
pci 0000:00:14.4:   IO window: 0x1000-0x1fff
pci 0000:00:14.4:   MEM window: 0xd0100000-0xd03fffff
pci 0000:00:14.4:   PREFETCH window: 0x00000088000000-0x0000008bffffff
pci 0000:00:04.0: setting latency timer to 64
pci 0000:00:05.0: setting latency timer to 64
pci 0000:00:06.0: setting latency timer to 64
pci 0000:02:04.0: PCI INT A -> GSI 20 (level, low) -> IRQ 20
bus: 00 index 0 io port: [0, ffff]
bus: 00 index 1 mmio: [0, ffffffffffffffff]
bus: 01 index 0 io port: [4000, 4fff]
bus: 01 index 1 mmio: [d0400000, d05fffff]
bus: 01 index 2 mmio: [c0000000, c7ffffff]
bus: 01 index 3 mmio: [0, 0]
bus: 10 index 0 mmio: [0, 0]
bus: 10 index 1 mmio: [d0000000, d00fffff]
bus: 10 index 2 mmio: [0, 0]
bus: 10 index 3 mmio: [0, 0]
bus: 20 index 0 io port: [2000, 3fff]
bus: 20 index 1 mmio: [cc000000, cfffffff]
bus: 20 index 2 mmio: [0, 0]
bus: 20 index 3 mmio: [0, 0]
bus: 30 index 0 mmio: [0, 0]
bus: 30 index 1 mmio: [c8000000, c80fffff]
bus: 30 index 2 mmio: [0, 0]
bus: 30 index 3 mmio: [0, 0]
bus: 02 index 0 io port: [1000, 1fff]
bus: 02 index 1 mmio: [d0100000, d03fffff]
bus: 02 index 2 mmio: [88000000, 8bffffff]
bus: 02 index 3 io port: [0, ffff]
bus: 02 index 4 mmio: [0, ffffffffffffffff]
bus: 03 index 0 io port: [1000, 10ff]
bus: 03 index 1 io port: [1400, 14ff]
bus: 03 index 2 mmio: [88000000, 8bffffff]
bus: 03 index 3 mmio: [90000000, 93ffffff]
NET: Registered protocol family 2
Switched to high resolution mode on CPU 0
Switched to high resolution mode on CPU 1
IP route cache hash table entries: 65536 (order: 7, 524288 bytes)
TCP established hash table entries: 262144 (order: 10, 4194304 bytes)
TCP bind hash table entries: 65536 (order: 8, 1048576 bytes)
TCP: Hash tables configured (established 262144 bind 65536)
TCP reno registered
NET: Registered protocol family 1
checking if image is initramfs... it is
Freeing initrd memory: 4038k freed
audit: initializing netlink socket (disabled)
type=2000 audit(1239754363.829:1): initialized
HugeTLB registered 2 MB page size, pre-allocated 0 pages
VFS: Disk quotas dquot_6.5.1
Dquot-cache hash table entries: 512 (order 0, 4096 bytes)
msgmni has been set to 3765
SELinux:  Registering netfilter hooks
Block layer SCSI generic (bsg) driver version 0.4 loaded (major 252)
io scheduler noop registered
io scheduler anticipatory registered
io scheduler deadline registered
io scheduler cfq registered (default)
pci 0000:01:05.0: Boot video device
pcieport-driver 0000:00:04.0: setting latency timer to 64
pcieport-driver 0000:00:04.0: found MSI capability
pci_express 0000:00:04.0:pcie00: allocate port service
pci_express 0000:00:04.0:pcie03: allocate port service
pcieport-driver 0000:00:05.0: setting latency timer to 64
pcieport-driver 0000:00:05.0: found MSI capability
pci_express 0000:00:05.0:pcie00: allocate port service
pci_express 0000:00:05.0:pcie03: allocate port service
pcieport-driver 0000:00:06.0: setting latency timer to 64
pcieport-driver 0000:00:06.0: found MSI capability
pci_express 0000:00:06.0:pcie00: allocate port service
pci_express 0000:00:06.0:pcie03: allocate port service
pci_hotplug: PCI Hot Plug PCI Core version: 0.5
acpiphp: ACPI Hot Plug PCI Controller Driver version: 0.5
acpiphp_glue: can't get bus number, assuming 0
acpiphp: Slot [1] registered
acpiphp: Slot [1-1] registered
input: Power Button (FF) as /devices/LNXSYSTM:00/LNXPWRBN:00/input/input0
ACPI: Power Button (FF) [PWRF]
input: Sleep Button (CM) as /devices/LNXSYSTM:00/device:00/PNP0C0E:00/input/input1
ACPI: Sleep Button (CM) [C28D]
input: Lid Switch as /devices/LNXSYSTM:00/device:00/PNP0C0D:00/input/input2
ACPI: Lid Switch [C265]
ACPI: Transitioning device [C399] to D3
fan PNP0C0B:00: registered as cooling_device0
ACPI: Fan [C399] (off)
ACPI: Transitioning device [C39A] to D3
fan PNP0C0B:01: registered as cooling_device1
ACPI: Fan [C39A] (off)
ACPI: Transitioning device [C39B] to D3
fan PNP0C0B:02: registered as cooling_device2
ACPI: Fan [C39B] (off)
ACPI: Transitioning device [C39C] to D3
fan PNP0C0B:03: registered as cooling_device3
ACPI: Fan [C39C] (off)
ACPI: processor limited to max C-state 1
processor ACPI0007:00: registered as cooling_device4
ACPI: Processor [C000] (supports 8 throttling states)
processor ACPI0007:01: registered as cooling_device5
ACPI: Processor [C001] (supports 8 throttling states)
thermal LNXTHERM:01: registered as thermal_zone0
ACPI: Thermal Zone [TZ1] (32 C)
Non-volatile memory driver v1.2
Linux agpgart interface v0.103
Serial: 8250/16550 driver4 ports, IRQ sharing enabled
brd: module loaded
loop: module loaded
input: Macintosh mouse button emulation as /devices/virtual/input/input3
Driver 'sd' needs updating - please use bus_type methods
Driver 'sr' needs updating - please use bus_type methods
ahci 0000:00:12.0: version 3.0
ahci 0000:00:12.0: PCI INT A -> GSI 16 (level, low) -> IRQ 16
ahci 0000:00:12.0: controller can't do 64bit DMA, forcing 32bit
ahci 0000:00:12.0: AHCI 0001.0100 32 slots 4 ports 3 Gbps 0x1 impl SATA mode
ahci 0000:00:12.0: flags: ncq sntf ilck pm led clo pio slum part 
scsi0 : ahci
scsi1 : ahci
scsi2 : ahci
scsi3 : ahci
ata1: SATA max UDMA/133 abar m1024 at 0xd0609000 port 0xd0609100 irq 16
ata2: DUMMY
ata3: DUMMY
ata4: DUMMY
ata1: SATA link up 1.5 Gbps (SStatus 113 SControl 300)
ata1.00: ATA-7: SAMSUNG HM160JI, AD100-16, max UDMA/100
ata1.00: 312581808 sectors, multi 16: LBA48 NCQ (depth 31/32)
ata1.00: SB600 AHCI: limiting to 255 sectors per cmd
ata1.00: SB600 AHCI: limiting to 255 sectors per cmd
ata1.00: configured for UDMA/100
isa bounce pool size: 16 pages
scsi 0:0:0:0: Direct-Access     ATA      SAMSUNG HM160JI  AD10 PQ: 0 ANSI: 5
sd 0:0:0:0: [sda] 312581808 512-byte hardware sectors (160042 MB)
sd 0:0:0:0: [sda] Write Protect is off
sd 0:0:0:0: [sda] Mode Sense: 00 3a 00 00
sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
sd 0:0:0:0: [sda] 312581808 512-byte hardware sectors (160042 MB)
sd 0:0:0:0: [sda] Write Protect is off
sd 0:0:0:0: [sda] Mode Sense: 00 3a 00 00
sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
 sda: sda1 sda2 sda3 sda4 < sda5 >
sd 0:0:0:0: [sda] Attached SCSI disk
sd 0:0:0:0: Attached scsi generic sg0 type 0
ehci_hcd 0000:00:13.5: PCI INT D -> GSI 23 (level, low) -> IRQ 23
ehci_hcd 0000:00:13.5: EHCI Host Controller
ehci_hcd 0000:00:13.5: new USB bus registered, assigned bus number 1
ehci_hcd 0000:00:13.5: applying AMD SB600/SB700 USB freeze workaround
ehci_hcd 0000:00:13.5: debug port 1
ehci_hcd 0000:00:13.5: irq 23, io mem 0xd0606000
ehci_hcd 0000:00:13.5: USB 2.0 started, EHCI 1.00, driver 10 Dec 2004
usb usb1: configuration #1 chosen from 1 choice
hub 1-0:1.0: USB hub found
hub 1-0:1.0: 10 ports detected
usb usb1: New USB device found, idVendor=1d6b, idProduct=0002
usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
usb usb1: Product: EHCI Host Controller
usb usb1: Manufacturer: Linux 2.6.27.21-170.2.56.fc10.x86_64 ehci_hcd
usb usb1: SerialNumber: 0000:00:13.5
ohci_hcd: 2006 August 04 USB 1.1 'Open' Host Controller (OHCI) Driver
ohci_hcd 0000:00:13.0: PCI INT A -> GSI 23 (level, low) -> IRQ 23
ohci_hcd 0000:00:13.0: OHCI Host Controller
ohci_hcd 0000:00:13.0: new USB bus registered, assigned bus number 2
ohci_hcd 0000:00:13.0: irq 23, io mem 0xd0601000
usb usb2: configuration #1 chosen from 1 choice
hub 2-0:1.0: USB hub found
hub 2-0:1.0: 2 ports detected
usb usb2: New USB device found, idVendor=1d6b, idProduct=0001
usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1
usb usb2: Product: OHCI Host Controller
usb usb2: Manufacturer: Linux 2.6.27.21-170.2.56.fc10.x86_64 ohci_hcd
usb usb2: SerialNumber: 0000:00:13.0
ohci_hcd 0000:00:13.1: PCI INT B -> GSI 17 (level, low) -> IRQ 17
ohci_hcd 0000:00:13.1: OHCI Host Controller
ohci_hcd 0000:00:13.1: new USB bus registered, assigned bus number 3
ohci_hcd 0000:00:13.1: irq 17, io mem 0xd0602000
usb usb3: configuration #1 chosen from 1 choice
hub 3-0:1.0: USB hub found
hub 3-0:1.0: 2 ports detected
usb usb3: New USB device found, idVendor=1d6b, idProduct=0001
usb usb3: New USB device strings: Mfr=3, Product=2, SerialNumber=1
usb usb3: Product: OHCI Host Controller
usb usb3: Manufacturer: Linux 2.6.27.21-170.2.56.fc10.x86_64 ohci_hcd
usb usb3: SerialNumber: 0000:00:13.1
ohci_hcd 0000:00:13.2: PCI INT C -> GSI 17 (level, low) -> IRQ 17
ohci_hcd 0000:00:13.2: OHCI Host Controller
ohci_hcd 0000:00:13.2: new USB bus registered, assigned bus number 4
ohci_hcd 0000:00:13.2: irq 17, io mem 0xd0603000
usb usb4: configuration #1 chosen from 1 choice
hub 4-0:1.0: USB hub found
hub 4-0:1.0: 2 ports detected
usb usb4: New USB device found, idVendor=1d6b, idProduct=0001
usb usb4: New USB device strings: Mfr=3, Product=2, SerialNumber=1
usb usb4: Product: OHCI Host Controller
usb usb4: Manufacturer: Linux 2.6.27.21-170.2.56.fc10.x86_64 ohci_hcd
usb usb4: SerialNumber: 0000:00:13.2
ohci_hcd 0000:00:13.3: PCI INT B -> GSI 17 (level, low) -> IRQ 17
ohci_hcd 0000:00:13.3: OHCI Host Controller
ohci_hcd 0000:00:13.3: new USB bus registered, assigned bus number 5
ohci_hcd 0000:00:13.3: irq 17, io mem 0xd0604000
usb usb5: configuration #1 chosen from 1 choice
hub 5-0:1.0: USB hub found
hub 5-0:1.0: 2 ports detected
usb usb5: New USB device found, idVendor=1d6b, idProduct=0001
usb usb5: New USB device strings: Mfr=3, Product=2, SerialNumber=1
usb usb5: Product: OHCI Host Controller
usb usb5: Manufacturer: Linux 2.6.27.21-170.2.56.fc10.x86_64 ohci_hcd
usb usb5: SerialNumber: 0000:00:13.3
ohci_hcd 0000:00:13.4: PCI INT C -> GSI 17 (level, low) -> IRQ 17
ohci_hcd 0000:00:13.4: OHCI Host Controller
ohci_hcd 0000:00:13.4: new USB bus registered, assigned bus number 6
ohci_hcd 0000:00:13.4: irq 17, io mem 0xd0605000
usb usb6: configuration #1 chosen from 1 choice
hub 6-0:1.0: USB hub found
hub 6-0:1.0: 2 ports detected
usb 4-1: new full speed USB device using ohci_hcd and address 2
usb usb6: New USB device found, idVendor=1d6b, idProduct=0001
usb usb6: New USB device strings: Mfr=3, Product=2, SerialNumber=1
usb usb6: Product: OHCI Host Controller
usb usb6: Manufacturer: Linux 2.6.27.21-170.2.56.fc10.x86_64 ohci_hcd
usb usb6: SerialNumber: 0000:00:13.4
USB Universal Host Controller Interface driver v3.0
PNP: PS/2 Controller [PNP0303:C249,PNP0f13:C24A] at 0x60,0x64 irq 1,12
i8042.c: Detected active multiplexing controller, rev 1.1.
serio: i8042 KBD port at 0x60,0x64 irq 1
serio: i8042 AUX0 port at 0x60,0x64 irq 12
serio: i8042 AUX1 port at 0x60,0x64 irq 12
serio: i8042 AUX2 port at 0x60,0x64 irq 12
serio: i8042 AUX3 port at 0x60,0x64 irq 12
mice: PS/2 mouse device common for all mice
input: AT Translated Set 2 keyboard as /devices/platform/i8042/serio0/input/input4
rtc_cmos 00:07: rtc core: registered rtc_cmos as rtc0
rtc0: alarms up to one month, y3k
device-mapper: uevent: version 1.0.3
device-mapper: ioctl: 4.14.0-ioctl (2008-04-23) initialised: dm-devel at redhat.com
cpuidle: using governor ladder
cpuidle: using governor menu
usb 4-1: configuration #1 chosen from 1 choice
usb 4-1: New USB device found, idVendor=08ff, idProduct=2580
usb 4-1: New USB device strings: Mfr=0, Product=1, SerialNumber=0
usb 4-1: Product: Fingerprint Sensor
usbcore: registered new interface driver hiddev
usbcore: registered new interface driver usbhid
usbhid: v2.6:USB HID core driver
nf_conntrack version 0.5.0 (16384 buckets, 65536 max)
CONFIG_NF_CT_ACCT is deprecated and will be removed soon. Plase use
nf_conntrack.acct=1 kernel paramater, acct=1 nf_conntrack module option or
sysctl net.netfilter.nf_conntrack_acct=1 to enable it.
ip_tables: (C) 2000-2006 Netfilter Core Team
TCP cubic registered
Initializing XFRM netlink socket
NET: Registered protocol family 17
registered taskstats version 1
  Magic number: 5:278:203
acpi device:2b: hash matches
Freeing unused kernel memory: 1296k freed
Write protecting the kernel read-only data: 4748k
[drm] Initialized drm 1.1.0 20060810
pci 0000:01:05.0: PCI INT B -> GSI 19 (level, low) -> IRQ 19
ATOM BIOS: ATI Radeon Xpress ?1250? for HP_TT                                          

[drm] Detected VRAM RAM=131072K, accessible=131072K, BAR=131072K
i2c-adapter i2c-0: unable to read EDID block.
pci 0000:01:05.0: VGA-1: no EDID data
i2c-adapter i2c-1: unable to read EDID block.
pci 0000:01:05.0: LVDS-1: no EDID data
Synaptics Touchpad, model: 1, fw: 6.2, id: 0x2580b1, caps: 0xa04793/0x300000
serio: Synaptics pass-through port at isa0060/serio4/input0
input: SynPS/2 Synaptics TouchPad as /devices/platform/i8042/serio4/input/input5
i2c-adapter i2c-1: unable to read EDID block.
pci 0000:01:05.0: LVDS-1: no EDID data
allocated ffff880075bb6000 1680x1050 fb: 0x00040000, bo ffff880074ac45c0
Console: switching to colour frame buffer device 210x65
executing set pll
executing set crtc timing
[drm] LVDS-8: set mode  9
executing set LVDS encoder
fb0: radeondrmfb frame buffer device
registered panic notifier
[drm] Loading RS690/RS740 Microcode
[drm] Num pipes: 1
[drm] writeback test succeeded in 1 usecs
[drm] Initialized radeon 1.29.0 20080528 on minor 0
EXT3-fs: INFO: recovery required on readonly filesystem.
EXT3-fs: write access will be enabled during recovery.
kjournald starting.  Commit interval 5 seconds
EXT3-fs: dm-0: orphan cleanup on readonly fs
ext3_orphan_cleanup: deleting unreferenced inode 1757861
ext3_orphan_cleanup: deleting unreferenced inode 1757860
ext3_orphan_cleanup: deleting unreferenced inode 1757859
ext3_orphan_cleanup: deleting unreferenced inode 1757858
ext3_orphan_cleanup: deleting unreferenced inode 1757857
ext3_orphan_cleanup: deleting unreferenced inode 1757855
ext3_orphan_cleanup: deleting unreferenced inode 629556
EXT3-fs: dm-0: 7 orphan inodes deleted
EXT3-fs: recovery complete.
EXT3-fs: mounted filesystem with ordered data mode.
type=1404 audit(1239754371.207:2): enforcing=1 old_enforcing=0 auid=4294967295 ses=4294967295
SELinux: 8192 avtab hash slots, 113427 rules.
SELinux: 8192 avtab hash slots, 113427 rules.
SELinux:  8 users, 11 roles, 2605 types, 121 bools, 1 sens, 1024 cats
SELinux:  73 classes, 113427 rules
SELinux:  Completing initialization.
SELinux:  Setting up existing superblocks.
SELinux: initialized (dev dm-0, type ext3), uses xattr
SELinux: initialized (dev tmpfs, type tmpfs), uses transition SIDs
SELinux: initialized (dev usbfs, type usbfs), uses genfs_contexts
SELinux: initialized (dev selinuxfs, type selinuxfs), uses genfs_contexts
SELinux: initialized (dev mqueue, type mqueue), uses transition SIDs
SELinux: initialized (dev hugetlbfs, type hugetlbfs), uses genfs_contexts
SELinux: initialized (dev devpts, type devpts), uses transition SIDs
SELinux: initialized (dev inotifyfs, type inotifyfs), uses genfs_contexts
SELinux: initialized (dev tmpfs, type tmpfs), uses transition SIDs
SELinux: initialized (dev anon_inodefs, type anon_inodefs), uses genfs_contexts
SELinux: initialized (dev pipefs, type pipefs), uses task SIDs
SELinux: initialized (dev debugfs, type debugfs), uses genfs_contexts
SELinux: initialized (dev sockfs, type sockfs), uses task SIDs
SELinux: initialized (dev proc, type proc), uses genfs_contexts
SELinux: initialized (dev bdev, type bdev), uses genfs_contexts
SELinux: initialized (dev rootfs, type rootfs), uses genfs_contexts
SELinux: initialized (dev sysfs, type sysfs), uses genfs_contexts
type=1403 audit(1239754371.515:3): policy loaded auid=4294967295 ses=4294967295
udevd version 127 started
ACPI: AC Adapter [C1EB] (on-line)
ACPI: Battery Slot [C1ED] (battery present)
ACPI: Battery Slot [C1EC] (battery absent)
ACPI: WMI: Mapper loaded
tpm_inf_pnp 00:03: Found C231 with ID IFX0102
tpm_inf_pnp 00:03: TPM found: config base 0x520, data base 0x530, chip version 0x000b, vendor id 0x15d1 (Infineon), product id 0x000b (SLB 9635 TT 1.2)
SELinux: initialized (dev securityfs, type securityfs), uses genfs_contexts
pata_atiixp 0000:00:14.1: PCI INT A -> GSI 16 (level, low) -> IRQ 16
scsi4 : pata_atiixp
scsi5 : pata_atiixp
ata5: PATA max UDMA/100 cmd 0x1f0 ctl 0x3f6 bmdma 0x5040 irq 14
ata6: PATA max UDMA/100 cmd 0x170 ctl 0x376 bmdma 0x5048 irq 15
parport_pc 00:02: activated
parport_pc 00:02: reported by Plug and Play ACPI
parport_pc 00:02: disabled
acpi device:03: registered as cooling_device6
input: Video Bus as /devices/LNXSYSTM:00/device:00/PNP0A03:00/device:01/device:02/input/input6
ACPI: Video Device [C08D] (multi-head: yes  rom: no  post: no)
ata5.00: ATAPI: HL-DT-ST DVDRAM GSA-T20N, WC05, max MWDMA2
input: PC Speaker as /devices/platform/pcspkr/input/input7
ata5.00: configured for MWDMA2
scsi 4:0:0:0: CD-ROM            HL-DT-ST DVDRAM GSA-T20N  WC05 PQ: 0 ANSI: 5
sr0: scsi3-mmc drive: 24x/24x writer dvd-ram cd/rw xa/form2 cdda tray
Uniform CD-ROM driver Revision: 3.20
sr 4:0:0:0: Attached scsi CD-ROM sr0
sr 4:0:0:0: Attached scsi generic sg1 type 5
piix4_smbus 0000:00:14.0: SMBus Host Controller at 0x8200, revision 0
shpchp: Standard Hot Plug PCI Controller Driver version: 0.4
Yenta: CardBus bridge found at 0000:02:04.0 [103c:30c2]
tg3.c:v3.94 (August 14, 2008)
tg3 0000:10:00.0: PCI INT A -> GSI 16 (level, low) -> IRQ 16
tg3 0000:10:00.0: setting latency timer to 64
Yenta: ISA IRQ mask 0x0cb8, PCI irq 20
Socket status: 30000006
Yenta: Raising subordinate bus# of parent bus (#02) from #03 to #06
pcmcia: parent PCI bridge I/O window: 0x1000 - 0x1fff
pcmcia: parent PCI bridge Memory window: 0xd0100000 - 0xd03fffff
pcmcia: parent PCI bridge Memory window: 0x88000000 - 0x8bffffff
eth0: Tigon3 [partno(none) rev b002 PHY(5787)] (PCI Express) 10/100/1000Base-T Ethernet 00:1a:4b:75:95:72
eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] WireSpeed[1] TSOcap[1]
eth0: dma_rwctrl[76180000] dma_mask[64-bit]
firewire_ohci 0000:02:04.1: PCI INT B -> GSI 21 (level, low) -> IRQ 21
firewire_ohci: Added fw-ohci device 0000:02:04.1, OHCI version 1.10
ppdev: user-space parallel port driver
firewire_core: created device fw0: GUID 00023f9929614f0e, S400
HDA Intel 0000:00:14.2: power state changed by ACPI to D0
HDA Intel 0000:00:14.2: PCI INT A -> GSI 16 (level, low) -> IRQ 16
device-mapper: multipath: version 1.0.5 loaded
EXT3 FS on dm-0, internal journal
kjournald starting.  Commit interval 5 seconds
EXT3 FS on sda3, internal journal
EXT3-fs: mounted filesystem with ordered data mode.
SELinux: initialized (dev sda3, type ext3), uses xattr
SELinux: initialized (dev tmpfs, type tmpfs), uses transition SIDs
Adding 3866616k swap on /dev/mapper/VolGroup00-LogVol01.  Priority:-1 extents:1 across:3866616k
SELinux: initialized (dev binfmt_misc, type binfmt_misc), uses genfs_contexts
== Xorg.0.log ==================================================
X.Org X Server 1.5.3
Release Date: 5 November 2008
X Protocol Version 11, Revision 0
Build Operating System: Linux 2.6.18-128.1.1.el5 x86_64 
Current Operating System: Linux HPNOTE.lan 2.6.27.21-170.2.56.fc10.x86_64 #1 SMP Mon Mar 23 23:08:10 EDT 2009 x86_64
Build Date: 10 March 2009  07:20:43PM
Build ID: xorg-x11-server 1.5.3-15.fc10 
	Before reporting problems, check http://wiki.x.org
	to make sure that you have the latest version.
Markers: (--) probed, (**) from config file, (==) default setting,
	(++) from command line, (!!) notice, (II) informational,
	(WW) warning, (EE) error, (NI) not implemented, (??) unknown.
(==) Log file: "/var/log/Xorg.0.log", Time: Wed Apr 15 02:13:22 2009
(==) Using config file: "/etc/X11/xorg.conf"
(==) ServerLayout "X.org Configured"
(**) |-->Screen "Screen0" (0)
(**) |   |-->Monitor "Monitor0"
(**) |   |-->Device "Card0"
(**) |-->Input Device "Mouse0"
(**) |-->Input Device "Keyboard0"
(==) Automatically adding devices
(==) Automatically enabling devices
(==) Including the default font path catalogue:/etc/X11/fontpath.d,built-ins.
(**) FontPath set to:
	catalogue:/etc/X11/fontpath.d,
	built-ins,
	catalogue:/etc/X11/fontpath.d,
	built-ins
(**) ModulePath set to "/usr/lib64/xorg/modules"
(WW) AllowEmptyInput is on, devices using drivers 'kbd' or 'mouse' will be disabled.
(WW) Disabling Mouse0
(WW) Disabling Keyboard0
(II) Open ACPI successful (/var/run/acpid.socket)
(II) Loader magic: 0x7aec00
(II) Module ABI versions:
	X.Org ANSI C Emulation: 0.4
	X.Org Video Driver: 4.1
	X.Org XInput driver : 2.1
	X.Org Server Extension : 1.1
	X.Org Font Renderer : 0.6
(II) Loader running on linux
(++) using VT number 1

(--) PCI:*(0 at 1:5:0) ATI Technologies Inc RS690M [Radeon X1200 Series] rev 0, Mem @ 0xc0000000/134217728, 0xd0400000/65536, 0xd0500000/1048576, I/O @ 0x00004000/256
(II) System resource ranges:
	[0] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[1] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[2] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[3] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[4] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[5] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[6] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[7] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[8] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[9] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[10] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[11] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[12] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[13] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[14] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[15] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[16] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[17] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[18] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[19] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[20] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[21] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[22] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[23] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[24] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[25] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[26] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[27] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[28] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[29] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
(II) "extmod" will be loaded. This was enabled by default and also specified in the config file.
(II) "dbe" will be loaded. This was enabled by default and also specified in the config file.
(II) "glx" will be loaded. This was enabled by default and also specified in the config file.
(II) "freetype" will be loaded by default.
(II) "dri" will be loaded. This was enabled by default and also specified in the config file.
(II) LoadModule: "dri"

(II) Loading /usr/lib64/xorg/modules/extensions//libdri.so
(II) Module dri: vendor="X.Org Foundation"
	compiled for 1.5.3, module version = 1.0.0
	ABI class: X.Org Server Extension, version 1.1
(II) Loading extension XFree86-DRI
(II) LoadModule: "dbe"

(II) Loading /usr/lib64/xorg/modules/extensions//libdbe.so
(II) Module dbe: vendor="X.Org Foundation"
	compiled for 1.5.3, module version = 1.0.0
	Module class: X.Org Server Extension
	ABI class: X.Org Server Extension, version 1.1
(II) Loading extension DOUBLE-BUFFER
(II) LoadModule: "extmod"

(II) Loading /usr/lib64/xorg/modules/extensions//libextmod.so
(II) Module extmod: vendor="X.Org Foundation"
	compiled for 1.5.3, module version = 1.0.0
	Module class: X.Org Server Extension
	ABI class: X.Org Server Extension, version 1.1
(II) Loading extension SELinux
(II) Loading extension SHAPE
(II) Loading extension MIT-SUNDRY-NONSTANDARD
(II) Loading extension BIG-REQUESTS
(II) Loading extension SYNC
(II) Loading extension MIT-SCREEN-SAVER
(II) Loading extension XC-MISC
(II) Loading extension XFree86-VidModeExtension
(II) Loading extension XFree86-Misc
(II) Loading extension XFree86-DGA
(II) Loading extension DPMS
(II) Loading extension TOG-CUP
(II) Loading extension Extended-Visual-Information
(II) Loading extension XVideo
(II) Loading extension XVideo-MotionCompensation
(II) Loading extension X-Resource
(II) LoadModule: "glx"

(II) Loading /usr/lib64/xorg/modules/extensions//libglx.so
(II) Module glx: vendor="X.Org Foundation"
	compiled for 1.5.3, module version = 1.0.0
	ABI class: X.Org Server Extension, version 1.1
(==) AIGLX enabled
(==) Exporting typical set of GLX visuals
(II) Loading extension GLX
(II) LoadModule: "freetype"

(II) Loading /usr/lib64/xorg/modules/fonts//libfreetype.so
(II) Module freetype: vendor="X.Org Foundation & the After X-TT Project"
	compiled for 1.5.3, module version = 2.1.0
	Module class: X.Org Font Renderer
	ABI class: X.Org Font Renderer, version 0.6
(II) Loading font FreeType
(II) LoadModule: "radeon"

(II) Loading /usr/lib64/xorg/modules/drivers//radeon_drv.so
(II) Module radeon: vendor="X.Org Foundation"
	compiled for 1.5.3, module version = 6.10.0
	Module class: X.Org Video Driver
	ABI class: X.Org Video Driver, version 4.1
(II) RADEON: Driver for ATI Radeon chipsets:
	ATI Radeon Mobility X600 (M24) 3150 (PCIE), ATI FireMV 2400 (PCI),
	ATI Radeon Mobility X300 (M24) 3152 (PCIE),
	ATI FireGL M24 GL 3154 (PCIE), ATI Radeon X600 (RV380) 3E50 (PCIE),
	ATI FireGL V3200 (RV380) 3E54 (PCIE), ATI Radeon IGP320 (A3) 4136,
	ATI Radeon IGP330/340/350 (A4) 4137, ATI Radeon 9500 AD (AGP),
	ATI Radeon 9500 AE (AGP), ATI Radeon 9600TX AF (AGP),
	ATI FireGL Z1 AG (AGP), ATI Radeon 9800SE AH (AGP),
	ATI Radeon 9800 AI (AGP), ATI Radeon 9800 AJ (AGP),
	ATI FireGL X2 AK (AGP), ATI Radeon 9600 AP (AGP),
	ATI Radeon 9600SE AQ (AGP), ATI Radeon 9600XT AR (AGP),
	ATI Radeon 9600 AS (AGP), ATI FireGL T2 AT (AGP), ATI Radeon 9650,
	ATI FireGL RV360 AV (AGP), ATI Radeon 7000 IGP (A4+) 4237,
	ATI Radeon 8500 AIW BB (AGP), ATI Radeon 8500 AIW BC (AGP),
	ATI Radeon IGP320M (U1) 4336, ATI Radeon IGP330M/340M/350M (U2) 4337,
	ATI Radeon Mobility 7000 IGP 4437, ATI Radeon 9000/PRO If (AGP/PCI),
	ATI Radeon 9000 Ig (AGP/PCI), ATI Radeon X800 (R420) JH (AGP),
	ATI Radeon X800PRO (R420) JI (AGP),
	ATI Radeon X800SE (R420) JJ (AGP), ATI Radeon X800 (R420) JK (AGP),
	ATI Radeon X800 (R420) JL (AGP), ATI FireGL X3 (R420) JM (AGP),
	ATI Radeon Mobility 9800 (M18) JN (AGP),
	ATI Radeon X800 SE (R420) (AGP), ATI Radeon X800XT (R420) JP (AGP),
	ATI Radeon X850 XT (R480) (AGP), ATI Radeon X850 SE (R480) (AGP),
	ATI Radeon X850 PRO (R480) (AGP), ATI Radeon X850 XT PE (R480) (AGP),
	ATI Radeon Mobility M7 LW (AGP),
	ATI Mobility FireGL 7800 M7 LX (AGP),
	ATI Radeon Mobility M6 LY (AGP), ATI Radeon Mobility M6 LZ (AGP),
	ATI FireGL Mobility 9000 (M9) Ld (AGP),
	ATI Radeon Mobility 9000 (M9) Lf (AGP),
	ATI Radeon Mobility 9000 (M9) Lg (AGP), ATI Radeon 9700 Pro ND (AGP),
	ATI Radeon 9700/9500Pro NE (AGP), ATI Radeon 9600TX NF (AGP),
	ATI FireGL X1 NG (AGP), ATI Radeon 9800PRO NH (AGP),
	ATI Radeon 9800 NI (AGP), ATI FireGL X2 NK (AGP),
	ATI Radeon 9800XT NJ (AGP),
	ATI Radeon Mobility 9600/9700 (M10/M11) NP (AGP),
	ATI Radeon Mobility 9600 (M10) NQ (AGP),
	ATI Radeon Mobility 9600 (M11) NR (AGP),
	ATI Radeon Mobility 9600 (M10) NS (AGP),
	ATI FireGL Mobility T2 (M10) NT (AGP),
	ATI FireGL Mobility T2e (M11) NV (AGP), ATI Radeon QD (AGP),
	ATI Radeon QE (AGP), ATI Radeon QF (AGP), ATI Radeon QG (AGP),
	ATI FireGL 8700/8800 QH (AGP), ATI Radeon 8500 QL (AGP),
	ATI Radeon 9100 QM (AGP), ATI Radeon 7500 QW (AGP/PCI),
	ATI Radeon 7500 QX (AGP/PCI), ATI Radeon VE/7000 QY (AGP/PCI),
	ATI Radeon VE/7000 QZ (AGP/PCI), ATI ES1000 515E (PCI),
	ATI Radeon Mobility X300 (M22) 5460 (PCIE),
	ATI Radeon Mobility X600 SE (M24C) 5462 (PCIE),
	ATI FireGL M22 GL 5464 (PCIE), ATI Radeon X800 (R423) UH (PCIE),
	ATI Radeon X800PRO (R423) UI (PCIE),
	ATI Radeon X800LE (R423) UJ (PCIE),
	ATI Radeon X800SE (R423) UK (PCIE),
	ATI Radeon X800 XTP (R430) (PCIE), ATI Radeon X800 XL (R430) (PCIE),
	ATI Radeon X800 SE (R430) (PCIE), ATI Radeon X800 (R430) (PCIE),
	ATI FireGL V7100 (R423) (PCIE), ATI FireGL V5100 (R423) UQ (PCIE),
	ATI FireGL unknown (R423) UR (PCIE),
	ATI FireGL unknown (R423) UT (PCIE),
	ATI Mobility FireGL V5000 (M26) (PCIE),
	ATI Mobility FireGL V5000 (M26) (PCIE),
	ATI Mobility Radeon X700 XL (M26) (PCIE),
	ATI Mobility Radeon X700 (M26) (PCIE),
	ATI Mobility Radeon X700 (M26) (PCIE),
	ATI Radeon X550XTX 5657 (PCIE), ATI Radeon 9100 IGP (A5) 5834,
	ATI Radeon Mobility 9100 IGP (U3) 5835,
	ATI Radeon XPRESS 200 5954 (PCIE),
	ATI Radeon XPRESS 200M 5955 (PCIE), ATI Radeon 9250 5960 (AGP),
	ATI Radeon 9200 5961 (AGP), ATI Radeon 9200 5962 (AGP),
	ATI Radeon 9200SE 5964 (AGP), ATI FireMV 2200 (PCI),
	ATI ES1000 5969 (PCI), ATI Radeon XPRESS 200 5974 (PCIE),
	ATI Radeon XPRESS 200M 5975 (PCIE),
	ATI Radeon XPRESS 200 5A41 (PCIE),
	ATI Radeon XPRESS 200M 5A42 (PCIE),
	ATI Radeon XPRESS 200 5A61 (PCIE),
	ATI Radeon XPRESS 200M 5A62 (PCIE),
	ATI Radeon X300 (RV370) 5B60 (PCIE),
	ATI Radeon X600 (RV370) 5B62 (PCIE),
	ATI Radeon X550 (RV370) 5B63 (PCIE),
	ATI FireGL V3100 (RV370) 5B64 (PCIE),
	ATI FireMV 2200 PCIE (RV370) 5B65 (PCIE),
	ATI Radeon Mobility 9200 (M9+) 5C61 (AGP),
	ATI Radeon Mobility 9200 (M9+) 5C63 (AGP),
	ATI Mobility Radeon X800 XT (M28) (PCIE),
	ATI Mobility FireGL V5100 (M28) (PCIE),
	ATI Mobility Radeon X800 (M28) (PCIE), ATI Radeon X850 5D4C (PCIE),
	ATI Radeon X850 XT PE (R480) (PCIE),
	ATI Radeon X850 SE (R480) (PCIE), ATI Radeon X850 PRO (R480) (PCIE),
	ATI unknown Radeon / FireGL (R480) 5D50 (PCIE),
	ATI Radeon X850 XT (R480) (PCIE),
	ATI Radeon X800XT (R423) 5D57 (PCIE),
	ATI FireGL V5000 (RV410) (PCIE), ATI Radeon X700 XT (RV410) (PCIE),
	ATI Radeon X700 PRO (RV410) (PCIE),
	ATI Radeon X700 SE (RV410) (PCIE), ATI Radeon X700 (RV410) (PCIE),
	ATI Radeon X700 SE (RV410) (PCIE), ATI Radeon X1800,
	ATI Mobility Radeon X1800 XT, ATI Mobility Radeon X1800,
	ATI Mobility FireGL V7200, ATI FireGL V7200, ATI FireGL V5300,
	ATI Mobility FireGL V7100, ATI Radeon X1800, ATI Radeon X1800,
	ATI Radeon X1800, ATI Radeon X1800, ATI Radeon X1800,
	ATI FireGL V7300, ATI FireGL V7350, ATI Radeon X1600, ATI RV505,
	ATI Radeon X1300/X1550, ATI Radeon X1550, ATI M54-GL,
	ATI Mobility Radeon X1400, ATI Radeon X1300/X1550,
	ATI Radeon X1550 64-bit, ATI Mobility Radeon X1300,
	ATI Mobility Radeon X1300, ATI Mobility Radeon X1300,
	ATI Mobility Radeon X1300, ATI Radeon X1300, ATI Radeon X1300,
	ATI RV505, ATI RV505, ATI FireGL V3300, ATI FireGL V3350,
	ATI Radeon X1300, ATI Radeon X1550 64-bit, ATI Radeon X1300/X1550,
	ATI Radeon X1600, ATI Radeon X1300/X1550, ATI Mobility Radeon X1450,
	ATI Radeon X1300/X1550, ATI Mobility Radeon X2300,
	ATI Mobility Radeon X2300, ATI Mobility Radeon X1350,
	ATI Mobility Radeon X1350, ATI Mobility Radeon X1450,
	ATI Radeon X1300, ATI Radeon X1550, ATI Mobility Radeon X1350,
	ATI FireMV 2250, ATI Radeon X1550 64-bit, ATI Radeon X1600,
	ATI Radeon X1650, ATI Radeon X1600, ATI Radeon X1600,
	ATI Mobility FireGL V5200, ATI Mobility Radeon X1600,
	ATI Radeon X1650, ATI Radeon X1650, ATI Radeon X1600,
	ATI Radeon X1300 XT/X1600 Pro, ATI FireGL V3400,
	ATI Mobility FireGL V5250, ATI Mobility Radeon X1700,
	ATI Mobility Radeon X1700 XT, ATI FireGL V5200,
	ATI Mobility Radeon X1700, ATI Radeon X2300HD,
	ATI Mobility Radeon HD 2300, ATI Mobility Radeon HD 2300,
	ATI Radeon X1950, ATI Radeon X1900, ATI Radeon X1950,
	ATI Radeon X1900, ATI Radeon X1900, ATI Radeon X1900,
	ATI Radeon X1900, ATI Radeon X1900, ATI Radeon X1900,
	ATI Radeon X1900, ATI Radeon X1900, ATI Radeon X1900,
	ATI AMD Stream Processor, ATI Radeon X1900, ATI Radeon X1950,
	ATI RV560, ATI RV560, ATI Mobility Radeon X1900, ATI RV560,
	ATI Radeon X1950 GT, ATI RV570, ATI RV570, ATI FireGL V7400,
	ATI RV560, ATI Radeon X1650, ATI Radeon X1650, ATI RV560,
	ATI Radeon 9100 PRO IGP 7834, ATI Radeon Mobility 9200 IGP 7835,
	ATI Radeon X1200, ATI Radeon X1200, ATI Radeon X1200,
	ATI Radeon X1200, ATI Radeon X1200, ATI RS740, ATI RS740M, ATI RS740,
	ATI RS740M, ATI Radeon HD 2900 XT, ATI Radeon HD 2900 XT,
	ATI Radeon HD 2900 XT, ATI Radeon HD 2900 Pro, ATI Radeon HD 2900 GT,
	ATI FireGL V8650, ATI FireGL V8600, ATI FireGL V7600,
	ATI Radeon 4800 Series, ATI Radeon HD 4870 x2,
	ATI Radeon 4800 Series, ATI FirePro V8750 (FireGL),
	ATI FirePro V7760 (FireGL), ATI Mobility RADEON HD 4850,
	ATI Mobility RADEON HD 4850 X2, ATI Radeon 4800 Series,
	ATI FirePro RV770, AMD FireStream 9270, AMD FireStream 9250,
	ATI FirePro V8700 (FireGL), ATI Mobility RADEON HD 4870,
	ATI Mobility RADEON M98, ATI Radeon RV730 (AGP),
	ATI Radeon RV730 (AGP), ATI RV730XT [Radeon HD 4670],
	ATI RV730 PRO [Radeon HD 4650], ATI FirePro V7750 (FireGL),
	ATI FirePro V5700 (FireGL), ATI FirePro V3750 (FireGL), ATI RV610,
	ATI Radeon HD 2400 XT, ATI Radeon HD 2400 Pro,
	ATI Radeon HD 2400 PRO AGP, ATI FireGL V4000, ATI RV610,
	ATI Radeon HD 2350, ATI Mobility Radeon HD 2400 XT,
	ATI Mobility Radeon HD 2400, ATI RADEON E2400, ATI RV610, ATI RV670,
	ATI Radeon HD3870, ATI Radeon HD3850, ATI RV670,
	ATI Radeon HD3870 X2, ATI FireGL V7700, ATI Radeon HD3850,
	ATI Radeon HD 4550, ATI Radeon RV710, ATI Radeon RV710,
	ATI Radeon HD 4350, ATI Mobility Radeon 4300 Series,
	ATI Mobility Radeon 4500 Series, ATI RV630,
	ATI Mobility Radeon HD 2600, ATI Mobility Radeon HD 2600 XT,
	ATI Radeon HD 2600 XT AGP, ATI Radeon HD 2600 Pro AGP,
	ATI Radeon HD 2600 XT, ATI Radeon HD 2600 Pro, ATI Gemini RV630,
	ATI Gemini Mobility Radeon HD 2600 XT, ATI FireGL V5600,
	ATI FireGL V3600, ATI Radeon HD 2600 LE, ATI Radeon RV710,
	ATI Radeon HD 3470, ATI Mobility Radeon HD 3430,
	ATI Mobility Radeon HD 3400 Series, ATI Radeon HD 3450,
	ATI Radeon HD 3430, ATI FireMV 2450, ATI FireMV 2260,
	ATI FireMV 2260, ATI Radeon HD 3600 Series, ATI Radeon HD 3650 AGP,
	ATI Radeon HD 3600 PRO, ATI Radeon HD 3600 XT,
	ATI Radeon HD 3600 PRO, ATI Mobility Radeon HD 3650,
	ATI Mobility Radeon HD 3670, ATI Radeon HD 3200 Graphics,
	ATI Radeon 3100 Graphics, ATI Radeon HD 3200 Graphics,
	ATI Radeon 3100 Graphics, ATI Radeon HD 3300 Graphics
(II) Primary Device is: PCI 01 at 00:05:0
(II) resource ranges after xf86ClaimFixedResources() call:
	[0] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[1] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[2] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[3] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[4] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[5] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[6] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[7] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[8] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[9] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[10] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[11] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[12] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[13] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[14] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[15] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[16] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[17] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[18] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[19] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[20] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[21] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[22] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[23] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[24] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[25] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[26] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[27] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[28] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[29] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
(II) resource ranges after probing:
	[0] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[1] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[2] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[3] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[4] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[5] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[6] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[7] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[8] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[9] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[10] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[11] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[12] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[13] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[14] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[15] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[16] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[17] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[18] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[19] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[20] 0	0	0x000a0000 - 0x000affff (0x10000) MS[B]
	[21] 0	0	0x000b0000 - 0x000b7fff (0x8000) MS[B]
	[22] 0	0	0x000b8000 - 0x000bffff (0x8000) MS[B]
	[23] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[24] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[25] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[26] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[27] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[28] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[29] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[30] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[31] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[32] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[33] 0	0	0x000003b0 - 0x000003bb (0xc) IS[B]
	[34] 0	0	0x000003c0 - 0x000003df (0x20) IS[B]
(II) Setting vga for screen 0.
(==) RADEON(0): Depth 24, (==) framebuffer bpp 32
(II) RADEON(0): Pixel depth = 24 bits stored in 4 bytes (32 bpp pixmaps)
(==) RADEON(0): Default visual is TrueColor
(==) RADEON(0): RGB weight 888
(II) RADEON(0): Using 8 bits per RGB (8 bit DAC)
(--) RADEON(0): Chipset: "ATI Radeon X1200" (ChipID = 0x791f)
(WW) RADEON(0): R500 support is under development. Please report any issues to xorg-driver-ati at lists.x.org
(II) RADEON(0): PCI card detected
drmOpenDevice: node name is /dev/dri/card0
drmOpenDevice: open result is 9, (OK)
drmOpenDevice: node name is /dev/dri/card0
drmOpenDevice: open result is 9, (OK)
drmOpenByBusid: Searching for BusID pci:0000:01:05.0
drmOpenDevice: node name is /dev/dri/card0
drmOpenDevice: open result is 9, (OK)
drmOpenByBusid: drmOpenMinor returns 9
drmOpenByBusid: drmGetBusid reports pci:0000:01:05.0
(II) [drm] DRM interface version 1.3
(II) [drm] DRM open master succeeded.
(II) RADEON(0): Output VGA-0 using monitor section Monitor0
(II) RADEON(0): Output LVDS has no monitor section
(II) RADEON(0): EDID for output VGA-0
(II) RADEON(0): EDID for output LVDS
(II) RADEON(0): Not using default mode "640x350" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "720x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1152x864" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x960" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (hsync out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1792x1344" (hsync out of range)
(II) RADEON(0): Not using default mode "1792x1344" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1856x1392" (hsync out of range)
(II) RADEON(0): Not using default mode "1856x1392" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1920x1440" (hsync out of range)
(II) RADEON(0): Not using default mode "1920x1440" (vrefresh out of range)
(II) RADEON(0): Not using default mode "832x624" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1400x1050" (hsync out of range)
(II) RADEON(0): Not using default mode "1400x1050" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1920x1440" (vrefresh out of range)
(II) RADEON(0): Not using default mode "2048x1536" (hsync out of range)
(II) RADEON(0): Not using default mode "2048x1536" (vrefresh out of range)
(II) RADEON(0): Not using default mode "2048x1536" (vrefresh out of range)
(II) RADEON(0): Printing probed modes for output LVDS
(II) RADEON(0): Modeline ""x60.1  122.00  1680 1712 1776 1904  1050 1051 1054 1066 (64.1 kHz)
(II) RADEON(0): Modeline "1280x1024"x60.0  108.00  1280 1328 1440 1688  1024 1025 1028 1066 +hsync +vsync (64.0 kHz)
(II) RADEON(0): Modeline "1280x960"x60.0  108.00  1280 1376 1488 1800  960 961 964 1000 +hsync +vsync (60.0 kHz)
(II) RADEON(0): Modeline "1024x768"x60.0   65.00  1024 1048 1184 1344  768 771 777 806 -hsync -vsync (48.4 kHz)
(II) RADEON(0): Modeline "800x600"x60.3   40.00  800 840 968 1056  600 601 605 628 +hsync +vsync (37.9 kHz)
(II) RADEON(0): Modeline "640x480"x59.9   25.18  640 656 752 800  480 490 492 525 -hsync -vsync (31.5 kHz)
(II) RADEON(0): Output VGA-0 disconnected
(II) RADEON(0): Output LVDS connected
(II) RADEON(0): Using exact sizes for initial modes
(II) RADEON(0): Output LVDS using initial mode 
initing 0 1fcff000 c0000000 8000000 78d4000
(==) RADEON(0): DPI set to (96, 96)
(II) Loading sub module "fb"
(II) LoadModule: "fb"

(II) Loading /usr/lib64/xorg/modules//libfb.so
(II) Module fb: vendor="X.Org Foundation"
	compiled for 1.5.3, module version = 1.0.0
	ABI class: X.Org ANSI C Emulation, version 0.4
(==) RADEON(0): Using gamma correction (1.0, 1.0, 1.0)
(II) Loading sub module "ramdac"
(II) LoadModule: "ramdac"
(II) Module "ramdac" already built-in
(==) RADEON(0): Using EXA acceleration architecture
(II) Loading sub module "exa"
(II) LoadModule: "exa"

(II) Loading /usr/lib64/xorg/modules//libexa.so
(II) Module exa: vendor="X.Org Foundation"
	compiled for 1.5.3, module version = 2.4.0
	ABI class: X.Org Video Driver, version 4.1
(!!) RADEON(0): For information on using the multimedia capabilities
	of this adapter, please see http://gatos.sf.net.
(!!) RADEON(0): MergedFB support has been removed and replaced with xrandr 1.2 support
(--) Depth 24 pixmap format is 32 bpp
(II) do I need RAC?  No, I don't.
(II) resource ranges after preInit:
	[0] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[1] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[2] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[3] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[4] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[5] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[6] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[7] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[8] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[9] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[10] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[11] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[12] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[13] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[14] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[15] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[16] -1	0	0xffffffff - 0xffffffff (0x1) MX[B]
	[17] -1	0	0x000f0000 - 0x000fffff (0x10000) MX[B]
	[18] -1	0	0x000c0000 - 0x000effff (0x30000) MX[B]
	[19] -1	0	0x00000000 - 0x0009ffff (0xa0000) MX[B]
	[20] 0	0	0x000a0000 - 0x000affff (0x10000) MS[B](OprU)
	[21] 0	0	0x000b0000 - 0x000b7fff (0x8000) MS[B](OprU)
	[22] 0	0	0x000b8000 - 0x000bffff (0x8000) MS[B](OprU)
	[23] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[24] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[25] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[26] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[27] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[28] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[29] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[30] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[31] -1	0	0x0000ffff - 0x0000ffff (0x1) IX[B]
	[32] -1	0	0x00000000 - 0x00000000 (0x1) IX[B]
	[33] 0	0	0x000003b0 - 0x000003bb (0xc) IS[B](OprU)
	[34] 0	0	0x000003c0 - 0x000003df (0x20) IS[B](OprU)
(II) RADEON(0): RADEONScreenInit c0000000 0 0
(==) RADEON(0): Using 24 bit depth buffer
(II) RADEON(0): Depth moves disabled by default
(==) RADEON(0): Not using accelerated EXA DownloadFromScreen hook
(II) RADEON(0): [drm] Using the DRM lock SAREA also for drawables.
(II) RADEON(0): [drm] framebuffer mapped by ddx driver
(II) RADEON(0): [drm] added 1 reserved context for kernel
(II) RADEON(0): X context handle = 0x1
(II) RADEON(0): [drm] installed DRM signal handler
1728 x 1680 x 4 = 11340K
texture size is 44840K, exa is 44836K
fb size is 11340K 34052K
Add fb id 11 1680 1680
(II) RADEON(0): Front buffer size: 11340K at 0x01d5a000
(II) RADEON(0): Back buffer size:  11340K at 0x00734000
(II) RADEON(0): Depth buffer size: 11340K at 0x01247000
(II) RADEON(0): Texture size:      44840K at 0x0286d000
(II) RADEON(0): Remaining VRAM size (used for pixmaps): 44836K
front handle is 1
(II) RADEON(0): [dri] Visual configs initialized
(==) RADEON(0): Backing store disabled
(II) RADEON(0): [DRI] installation complete
(II) RADEON(0): [drm] Initialized kernel GART heap manager, 8388608
adding fb map from c1d5a000 for b13000 ret 0 c1d5a000
front handle is 1
(II) RADEON(0): Direct rendering enabled
(II) RADEON(0): Render acceleration enabled for R300/R400/R500 type cards.
(II) RADEON(0): Setting EXA maxPitchBytes
(II) EXA(0): Driver allocated offscreen pixmaps
(II) EXA(0): Driver registered support for the following operations:
(II)         Solid
(II)         Copy
(II)         Composite (RENDER acceleration)
(II)         UploadToScreen
(II)         DownloadFromScreen
(II) RADEON(0): Acceleration enabled
(II) RADEON(0): DPMS enabled
(==) RADEON(0): Silken mouse enabled
(II) RADEON(0): Set up textured video
(II) RADEON(0): RandR 1.2 enabled, ignore the following RandR disabled message.
(--) RandR disabled
(II) Initializing built-in extension MIT-SHM
(II) Initializing built-in extension XInputExtension
(II) Initializing built-in extension XTEST
(II) Initializing built-in extension XKEYBOARD
(II) Initializing built-in extension XINERAMA
(II) Initializing built-in extension XFIXES
(II) Initializing built-in extension RENDER
(II) Initializing built-in extension RANDR
(II) Initializing built-in extension COMPOSITE
(II) Initializing built-in extension DAMAGE
(II) Initializing built-in extension XEVIE
drmOpenDevice: node name is /dev/dri/card0
drmOpenDevice: open result is 10, (OK)
drmOpenByBusid: Searching for BusID pci:0000:01:05.0
drmOpenDevice: node name is /dev/dri/card0
drmOpenDevice: open result is 10, (OK)
drmOpenByBusid: drmOpenMinor returns 10
drmOpenByBusid: drmGetBusid reports pci:0000:01:05.0
(II) AIGLX: enabled GLX_MESA_copy_sub_buffer
(II) AIGLX: enabled GLX_SGI_swap_control and GLX_MESA_swap_control
(II) AIGLX: Loaded and initialized /usr/lib64/dri/r300_dri.so
(II) GLX: Initialized DRI GL provider for screen 0
(II) RADEON(0): Setting screen physical size to 444 x 277
resize called 1680 1050
(II) config/hal: Adding input device Sleep Button (CM)
(II) LoadModule: "evdev"

(II) Loading /usr/lib64/xorg/modules/input//evdev_drv.so
(II) Module evdev: vendor="X.Org Foundation"
	compiled for 1.5.3, module version = 2.1.3
	Module class: X.Org XInput Driver
	ABI class: X.Org XInput driver, version 2.1
(**) Sleep Button (CM): always reports core events
(**) Sleep Button (CM): Device: "/dev/input/event1"
(II) Sleep Button (CM): Found keys
(II) Sleep Button (CM): Configuring as keyboard
(II) XINPUT: Adding extended input device "Sleep Button (CM)" (type: KEYBOARD)
(**) Option "xkb_rules" "evdev"
(**) Option "xkb_model" "pc105"
(**) Option "xkb_layout" "no"
(II) config/hal: Adding input device AT Translated Set 2 keyboard
(**) AT Translated Set 2 keyboard: always reports core events
(**) AT Translated Set 2 keyboard: Device: "/dev/input/event4"
(II) AT Translated Set 2 keyboard: Found keys
(II) AT Translated Set 2 keyboard: Configuring as keyboard
(II) XINPUT: Adding extended input device "AT Translated Set 2 keyboard" (type: KEYBOARD)
(**) Option "xkb_rules" "evdev"
(**) Option "xkb_model" "pc105"
(**) Option "xkb_layout" "no"
(II) config/hal: Adding input device Power Button (FF)
(**) Power Button (FF): always reports core events
(**) Power Button (FF): Device: "/dev/input/event0"
(II) Power Button (FF): Found keys
(II) Power Button (FF): Configuring as keyboard
(II) XINPUT: Adding extended input device "Power Button (FF)" (type: KEYBOARD)
(**) Option "xkb_rules" "evdev"
(**) Option "xkb_model" "pc105"
(**) Option "xkb_layout" "no"
(II) config/hal: Adding input device Video Bus
(**) Video Bus: always reports core events
(**) Video Bus: Device: "/dev/input/event6"
(II) Video Bus: Found keys
(II) Video Bus: Configuring as keyboard
(II) XINPUT: Adding extended input device "Video Bus" (type: KEYBOARD)
(**) Option "xkb_rules" "evdev"
(**) Option "xkb_model" "pc105"
(**) Option "xkb_layout" "no"
(II) config/hal: Adding input device Macintosh mouse button emulation
(**) Macintosh mouse button emulation: always reports core events
(**) Macintosh mouse button emulation: Device: "/dev/input/event3"
(II) Macintosh mouse button emulation: Found 3 mouse buttons
(II) Macintosh mouse button emulation: Found x and y relative axes
(II) Macintosh mouse button emulation: Configuring as mouse
(**) Macintosh mouse button emulation: YAxisMapping: buttons 4 and 5
(**) Macintosh mouse button emulation: EmulateWheelButton: 4, EmulateWheelInertia: 10, EmulateWheelTimeout: 200
(II) XINPUT: Adding extended input device "Macintosh mouse button emulation" (type: MOUSE)
(II) config/hal: Adding input device SynPS/2 Synaptics TouchPad
(II) LoadModule: "synaptics"

(II) Loading /usr/lib64/xorg/modules/input//synaptics_drv.so
(II) Module synaptics: vendor="X.Org Foundation"
	compiled for 1.5.3, module version = 0.15.2
	Module class: X.Org XInput Driver
	ABI class: X.Org XInput driver, version 2.1
(II) Synaptics touchpad driver version 0.15.2
(II) SynPS/2 Synaptics TouchPad: x-axis range 1472 - 5472
(II) SynPS/2 Synaptics TouchPad: y-axis range 1408 - 4448
(**) Option "Device" "/dev/input/event5"
(--) SynPS/2 Synaptics TouchPad touchpad found
(**) SynPS/2 Synaptics TouchPad: always reports core events
(II) XINPUT: Adding extended input device "SynPS/2 Synaptics TouchPad" (type: TOUCHPAD)
(II) SynPS/2 Synaptics TouchPad: x-axis range 1472 - 5472
(II) SynPS/2 Synaptics TouchPad: y-axis range 1408 - 4448
(--) SynPS/2 Synaptics TouchPad touchpad found
(II) RADEON(0): EDID for output VGA-0
(II) RADEON(0): EDID for output LVDS
(II) RADEON(0): Not using default mode "640x350" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "720x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1152x864" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x960" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (hsync out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "832x624" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1400x1050" (hsync out of range)
(II) RADEON(0): Not using default mode "1400x1050" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Printing probed modes for output LVDS
(II) RADEON(0): Modeline ""x60.1  122.00  1680 1712 1776 1904  1050 1051 1054 1066 (64.1 kHz)
(II) RADEON(0): Modeline "1280x1024"x60.0  108.00  1280 1328 1440 1688  1024 1025 1028 1066 +hsync +vsync (64.0 kHz)
(II) RADEON(0): Modeline "1280x960"x60.0  108.00  1280 1376 1488 1800  960 961 964 1000 +hsync +vsync (60.0 kHz)
(II) RADEON(0): Modeline "1024x768"x60.0   65.00  1024 1048 1184 1344  768 771 777 806 -hsync -vsync (48.4 kHz)
(II) RADEON(0): Modeline "800x600"x60.3   40.00  800 840 968 1056  600 601 605 628 +hsync +vsync (37.9 kHz)
(II) RADEON(0): Modeline "640x480"x59.9   25.18  640 656 752 800  480 490 492 525 -hsync -vsync (31.5 kHz)
(II) RADEON(0): EDID for output VGA-0
(II) RADEON(0): EDID for output LVDS
(II) RADEON(0): Not using default mode "640x350" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "720x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1152x864" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x960" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (hsync out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "832x624" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1400x1050" (hsync out of range)
(II) RADEON(0): Not using default mode "1400x1050" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Printing probed modes for output LVDS
(II) RADEON(0): Modeline ""x60.1  122.00  1680 1712 1776 1904  1050 1051 1054 1066 (64.1 kHz)
(II) RADEON(0): Modeline "1280x1024"x60.0  108.00  1280 1328 1440 1688  1024 1025 1028 1066 +hsync +vsync (64.0 kHz)
(II) RADEON(0): Modeline "1280x960"x60.0  108.00  1280 1376 1488 1800  960 961 964 1000 +hsync +vsync (60.0 kHz)
(II) RADEON(0): Modeline "1024x768"x60.0   65.00  1024 1048 1184 1344  768 771 777 806 -hsync -vsync (48.4 kHz)
(II) RADEON(0): Modeline "800x600"x60.3   40.00  800 840 968 1056  600 601 605 628 +hsync +vsync (37.9 kHz)
(II) RADEON(0): Modeline "640x480"x59.9   25.18  640 656 752 800  480 490 492 525 -hsync -vsync (31.5 kHz)
(II) RADEON(0): EDID for output VGA-0
(II) RADEON(0): EDID for output LVDS
(II) RADEON(0): Not using default mode "640x350" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "720x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1152x864" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x960" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (hsync out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "832x624" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1400x1050" (hsync out of range)
(II) RADEON(0): Not using default mode "1400x1050" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Printing probed modes for output LVDS
(II) RADEON(0): Modeline ""x60.1  122.00  1680 1712 1776 1904  1050 1051 1054 1066 (64.1 kHz)
(II) RADEON(0): Modeline "1280x1024"x60.0  108.00  1280 1328 1440 1688  1024 1025 1028 1066 +hsync +vsync (64.0 kHz)
(II) RADEON(0): Modeline "1280x960"x60.0  108.00  1280 1376 1488 1800  960 961 964 1000 +hsync +vsync (60.0 kHz)
(II) RADEON(0): Modeline "1024x768"x60.0   65.00  1024 1048 1184 1344  768 771 777 806 -hsync -vsync (48.4 kHz)
(II) RADEON(0): Modeline "800x600"x60.3   40.00  800 840 968 1056  600 601 605 628 +hsync +vsync (37.9 kHz)
(II) RADEON(0): Modeline "640x480"x59.9   25.18  640 656 752 800  480 490 492 525 -hsync -vsync (31.5 kHz)
(II) RADEON(0): EDID for output VGA-0
(II) RADEON(0): EDID for output LVDS
(II) RADEON(0): Not using default mode "640x350" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "720x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1152x864" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x960" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (hsync out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "832x624" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1400x1050" (hsync out of range)
(II) RADEON(0): Not using default mode "1400x1050" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Printing probed modes for output LVDS
(II) RADEON(0): Modeline ""x60.1  122.00  1680 1712 1776 1904  1050 1051 1054 1066 (64.1 kHz)
(II) RADEON(0): Modeline "1280x1024"x60.0  108.00  1280 1328 1440 1688  1024 1025 1028 1066 +hsync +vsync (64.0 kHz)
(II) RADEON(0): Modeline "1280x960"x60.0  108.00  1280 1376 1488 1800  960 961 964 1000 +hsync +vsync (60.0 kHz)
(II) RADEON(0): Modeline "1024x768"x60.0   65.00  1024 1048 1184 1344  768 771 777 806 -hsync -vsync (48.4 kHz)
(II) RADEON(0): Modeline "800x600"x60.3   40.00  800 840 968 1056  600 601 605 628 +hsync +vsync (37.9 kHz)
(II) RADEON(0): Modeline "640x480"x59.9   25.18  640 656 752 800  480 490 492 525 -hsync -vsync (31.5 kHz)
(II) RADEON(0): EDID for output VGA-0
(II) RADEON(0): EDID for output LVDS
(II) RADEON(0): Not using default mode "640x350" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "720x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1152x864" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x960" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (hsync out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "832x624" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1400x1050" (hsync out of range)
(II) RADEON(0): Not using default mode "1400x1050" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Printing probed modes for output LVDS
(II) RADEON(0): Modeline ""x60.1  122.00  1680 1712 1776 1904  1050 1051 1054 1066 (64.1 kHz)
(II) RADEON(0): Modeline "1280x1024"x60.0  108.00  1280 1328 1440 1688  1024 1025 1028 1066 +hsync +vsync (64.0 kHz)
(II) RADEON(0): Modeline "1280x960"x60.0  108.00  1280 1376 1488 1800  960 961 964 1000 +hsync +vsync (60.0 kHz)
(II) RADEON(0): Modeline "1024x768"x60.0   65.00  1024 1048 1184 1344  768 771 777 806 -hsync -vsync (48.4 kHz)
(II) RADEON(0): Modeline "800x600"x60.3   40.00  800 840 968 1056  600 601 605 628 +hsync +vsync (37.9 kHz)
(II) RADEON(0): Modeline "640x480"x59.9   25.18  640 656 752 800  480 490 492 525 -hsync -vsync (31.5 kHz)
(II) RADEON(0): EDID for output VGA-0
(II) RADEON(0): EDID for output LVDS
(II) RADEON(0): Not using default mode "640x350" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "720x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1152x864" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x960" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (hsync out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "832x624" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1400x1050" (hsync out of range)
(II) RADEON(0): Not using default mode "1400x1050" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Printing probed modes for output LVDS
(II) RADEON(0): Modeline ""x60.1  122.00  1680 1712 1776 1904  1050 1051 1054 1066 (64.1 kHz)
(II) RADEON(0): Modeline "1280x1024"x60.0  108.00  1280 1328 1440 1688  1024 1025 1028 1066 +hsync +vsync (64.0 kHz)
(II) RADEON(0): Modeline "1280x960"x60.0  108.00  1280 1376 1488 1800  960 961 964 1000 +hsync +vsync (60.0 kHz)
(II) RADEON(0): Modeline "1024x768"x60.0   65.00  1024 1048 1184 1344  768 771 777 806 -hsync -vsync (48.4 kHz)
(II) RADEON(0): Modeline "800x600"x60.3   40.00  800 840 968 1056  600 601 605 628 +hsync +vsync (37.9 kHz)
(II) RADEON(0): Modeline "640x480"x59.9   25.18  640 656 752 800  480 490 492 525 -hsync -vsync (31.5 kHz)
(II) RADEON(0): EDID for output VGA-0
(II) RADEON(0): EDID for output LVDS
(II) RADEON(0): Not using default mode "640x350" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "720x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1152x864" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x960" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (hsync out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "832x624" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1400x1050" (hsync out of range)
(II) RADEON(0): Not using default mode "1400x1050" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Printing probed modes for output LVDS
(II) RADEON(0): Modeline ""x60.1  122.00  1680 1712 1776 1904  1050 1051 1054 1066 (64.1 kHz)
(II) RADEON(0): Modeline "1280x1024"x60.0  108.00  1280 1328 1440 1688  1024 1025 1028 1066 +hsync +vsync (64.0 kHz)
(II) RADEON(0): Modeline "1280x960"x60.0  108.00  1280 1376 1488 1800  960 961 964 1000 +hsync +vsync (60.0 kHz)
(II) RADEON(0): Modeline "1024x768"x60.0   65.00  1024 1048 1184 1344  768 771 777 806 -hsync -vsync (48.4 kHz)
(II) RADEON(0): Modeline "800x600"x60.3   40.00  800 840 968 1056  600 601 605 628 +hsync +vsync (37.9 kHz)
(II) RADEON(0): Modeline "640x480"x59.9   25.18  640 656 752 800  480 490 492 525 -hsync -vsync (31.5 kHz)
(II) RADEON(0): EDID for output VGA-0
(II) RADEON(0): EDID for output LVDS
(II) RADEON(0): Not using default mode "640x350" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "720x400" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "640x480" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "800x600" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1024x768" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1152x864" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x960" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1280x1024" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (hsync out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1600x1200" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1792x1344" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1856x1392" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "832x624" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1400x1050" (hsync out of range)
(II) RADEON(0): Not using default mode "1400x1050" (vrefresh out of range)
(II) RADEON(0): Not using default mode "1920x1440" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Not using default mode "2048x1536" (width too large for virtual size)
(II) RADEON(0): Printing probed modes for output LVDS
(II) RADEON(0): Modeline ""x60.1  122.00  1680 1712 1776 1904  1050 1051 1054 1066 (64.1 kHz)
(II) RADEON(0): Modeline "1280x1024"x60.0  108.00  1280 1328 1440 1688  1024 1025 1028 1066 +hsync +vsync (64.0 kHz)
(II) RADEON(0): Modeline "1280x960"x60.0  108.00  1280 1376 1488 1800  960 961 964 1000 +hsync +vsync (60.0 kHz)
(II) RADEON(0): Modeline "1024x768"x60.0   65.00  1024 1048 1184 1344  768 771 777 806 -hsync -vsync (48.4 kHz)
(II) RADEON(0): Modeline "800x600"x60.3   40.00  800 840 968 1056  600 601 605 628 +hsync +vsync (37.9 kHz)
(II) RADEON(0): Modeline "640x480"x59.9   25.18  640 656 752 800  480 490 492 525 -hsync -vsync (31.5 kHz)
== END  ==================================================




From gavron at wetwork.net  Sat Apr 18 22:39:52 2009
From: gavron at wetwork.net (gavron at wetwork.net)
Date: Sat, 18 Apr 2009 13:39:52 -0700
Subject: Fedora-10 nighmare-dmidecode
In-Reply-To: <916841.10861.qm@web63701.mail.re1.yahoo.com>
References: <916841.10861.qm@web63701.mail.re1.yahoo.com>
Message-ID: <49EA3A98.4020307@wetwork.net>



Arne Chr. Jorgensen wrote:
> (CC: bcm43xx list, hope to be forgiven - it is working without cable now ;)
>   
...

Thank you for polluting the bcm43xx-dev list.  Your posting had nothing 
to do with anything covered on this list.

Have a nice day, and feel free to respond quickly trying to explain how 
you're not responsible, or how because you
asked to be forgiven it makes it okay, or how netiquette is for other 
people, or how illiteracy is really a problem with
the people who notice it.

Ehud


From achrisjo at yahoo.com  Sat Apr 18 23:19:07 2009
From: achrisjo at yahoo.com (Arne Chr. Jorgensen)
Date: Sat, 18 Apr 2009 14:19:07 -0700 (PDT)
Subject: sorry, had some question..
Message-ID: <221808.5731.qm@web63706.mail.re1.yahoo.com>


Nope, perhaps I used some bad judgement, but been in contact and a subscriber for some years. Had a question for, just an opinion, but I have
experienced a couple of things that I know you guys understand. There should
be something I could check, right ?

To tired to think now...

//ARNE



From mb at bu3sch.de  Sat Apr 18 23:31:47 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Sat, 18 Apr 2009 23:31:47 +0200
Subject: sorry, had some question..
In-Reply-To: <221808.5731.qm@web63706.mail.re1.yahoo.com>
References: <221808.5731.qm@web63706.mail.re1.yahoo.com>
Message-ID: <200904182331.47729.mb@bu3sch.de>

On Saturday 18 April 2009 23:19:07 Arne Chr. Jorgensen wrote:
> 
> Nope, perhaps I used some bad judgement, but been in contact and a subscriber for some years. Had a question for, just an opinion, but I have
> experienced a couple of things that I know you guys understand. There should
> be something I could check, right ?

If you have an actual _question_ about _b43_, please ask it here.
Otherwise please don't spam the list. Thanks.

I don't know why you spam the list with your X.org questions, but please don't.
Here's nobody who can help you with your X.org problems.

-- 
Greetings, Michael.


From kdronnqvist at gmail.com  Wed Apr 22 09:07:49 2009
From: kdronnqvist at gmail.com (=?ISO-8859-1?Q?Daniel_R=F6nnqvist?=)
Date: Wed, 22 Apr 2009 09:07:49 +0200
Subject: hostapd with nl80211 gives; Could not add multicast membership for 
	scan events
Message-ID: <65691fa00904220007x3b273612v3f69735f61ab487e@mail.gmail.com>

Hello,

I have a problem when trying to start hostapd (as root) using the
following command:

hostapd /etc/hostapd/hostapd.conf

I get the error message:
nl80211: Could not add multicast membership for scan events: -2 (No
such file or directory) nl80211 driver initialization failed. The
error seem to originate from the function nl_get_multicast_id in the
hostapd source file driver_nl80211.c.

My hostapd.conf:
interface=wlan0
driver=nl80211
ssid=test

I have compiled 0.7.0 version of hostapd with defconf adding only the
nl80211 support.

Hardware is an Apple PowerPC Mac Mini with B4306 (rev3).

OS is Debian lenny with linux kernel 2.6.26.

Does anyone have any idea why this is happening? Any pointers would be
greatly appreciated, maybe a short tutorial for the advanced user?

BR,
Daniel


From achrisjo at yahoo.com  Sun Apr 26 13:47:21 2009
From: achrisjo at yahoo.com (Arne Chr. Jorgensen)
Date: Sun, 26 Apr 2009 04:47:21 -0700 (PDT)
Subject: F10 nightmare under control
Message-ID: <245286.19965.qm@web63703.mail.re1.yahoo.com>


hi,

Finally got control by "rmmod wl" before connecting network cable.
If the crazy situation first appeared, ( not keeping a finger
on the touchpad, stopped processes running ), it does not go away
without rebooting. Possible to be online and read about the
new features introduced, start to make some sense of things.

//ARNE
  
PS: "rmmod tg3" may also work if you have a wireless connection.



From achrisjo at yahoo.com  Sun Apr 26 15:49:17 2009
From: achrisjo at yahoo.com (Arne Chr. Jorgensen)
Date: Sun, 26 Apr 2009 06:49:17 -0700 (PDT)
Subject: F10 nightmare under control
In-Reply-To: <49F44B06.5060906@wetwork.net>
Message-ID: <238576.32221.qm@web63705.mail.re1.yahoo.com>


hi,

Some  got upset by an earlier post I had about the Fedora-10 nightmare, as I sent ( much more than I was aware of ) some dmi-decode pages.

Different networks ( cable/wireless ) cause some conflicts with other IO,
because of some mode-setting in the kernel. The worst trouble came with
the ev-dev, where the network conflicts made a finger on the touchpad
stop/start processes running. 

The meaning of my post, was just to give a tip to others with similar
problems. Some have reported problems with PCI-express networking cards because of the kernel code ( my is 2.6.27.21-170.2.56.fc10.x86_64).

I installed under textmode, and everything went wild when I started X,
not knowing that X and kernel will tamper with the networks. If I am not
making sense, then forgive me. 

At the moment, some of the issue seem only to affect certain video cards,
but the plan seems to be to add more. So, networks and other I/O will be
placed under some new control. 

//ARNE
- hopefully this may clear up my input. 




From gavron at wetwork.net  Sun Apr 26 17:02:44 2009
From: gavron at wetwork.net (gavron at wetwork.net)
Date: Sun, 26 Apr 2009 08:02:44 -0700
Subject: F10 nightmare under control
In-Reply-To: <238576.32221.qm@web63705.mail.re1.yahoo.com>
References: <238576.32221.qm@web63705.mail.re1.yahoo.com>
Message-ID: <49F47794.10101@wetwork.net>

This has nothing to do with bcm43xx.  Stop polluting this list with your 
nonsense ramblings.

E


Arne Chr. Jorgensen wrote:
> hi,
>
> Some  got upset by an earlier post I had about the Fedora-10 nightmare, as I sent ( much more than I was aware of ) some dmi-decode pages.
>
> Different networks ( cable/wireless ) cause some conflicts with other IO,
> because of some mode-setting in the kernel. The worst trouble came with
> the ev-dev, where the network conflicts made a finger on the touchpad
> stop/start processes running. 
>
> The meaning of my post, was just to give a tip to others with similar
> problems. Some have reported problems with PCI-express networking cards because of the kernel code ( my is 2.6.27.21-170.2.56.fc10.x86_64).
>
> I installed under textmode, and everything went wild when I started X,
> not knowing that X and kernel will tamper with the networks. If I am not
> making sense, then forgive me. 
>
> At the moment, some of the issue seem only to affect certain video cards,
> but the plan seems to be to add more. So, networks and other I/O will be
> placed under some new control. 
>
> //ARNE
> - hopefully this may clear up my input. 
>
>
>   

-- 
Legal Disclaimer that you are now contractually bound to under all laws with no recourse:
http://attrition.org/security/rants/z/disclaimers.html



From hanbo00 at gmail.com  Wed Apr 29 17:50:25 2009
From: hanbo00 at gmail.com (Bo Han)
Date: Wed, 29 Apr 2009 08:50:25 -0700
Subject: Multi Rate Retry in b43
Message-ID: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>

Hi Michael,

I have the following question regarding the multi rate retry (MRR) in b43.

Based on my understanding, the b43 driver will get two bit rates from
rate control algorithm and thus, for a given packet, when retries are
needed, the firmware will use the first rate for the first 3
transmissions (the original transmission and following two retries)
and the second rate for the last 4 transmissions, assuming the retry
limit is 7.  As a result, in static int b43_wireless_init(struct
ssb_device *dev), hw->max_rates is set to be 2.  But for minstrel to
enable MRR, hw->max_rates should be at least 4.  Otherwise, minstrel
will only choose the best throughput bit rate.


From mb at bu3sch.de  Wed Apr 29 17:56:32 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Wed, 29 Apr 2009 17:56:32 +0200
Subject: Multi Rate Retry in b43
In-Reply-To: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>
References: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>
Message-ID: <200904291756.32224.mb@bu3sch.de>

On Wednesday 29 April 2009 17:50:25 Bo Han wrote:
> I have the following question regarding the multi rate retry (MRR) in b43.

The device does not support MRR in any way. There's only the transmission rate
and the fallback rate used for all retries (retry bit set in header).

-- 
Greetings, Michael.


From hanbo00 at gmail.com  Wed Apr 29 18:01:32 2009
From: hanbo00 at gmail.com (Bo Han)
Date: Wed, 29 Apr 2009 09:01:32 -0700
Subject: Multi Rate Retry in b43
In-Reply-To: <200904291756.32224.mb@bu3sch.de>
References: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>
	<200904291756.32224.mb@bu3sch.de>
Message-ID: <d0ad1e930904290901v4f8ecc16sa49ca5e26d31cf67@mail.gmail.com>

I see.  But I think it may not be reasonable to always use 1 Mbps as
the fallback rate, which will reduce the throughput...  Also, when MRR
is not supported, we should not get the fallback rate from rate
control algorithms (like minstrel) in the current way, right?

Thanks,
-Bo

On Wed, Apr 29, 2009 at 8:56 AM, Michael Buesch <mb at bu3sch.de> wrote:
> On Wednesday 29 April 2009 17:50:25 Bo Han wrote:
>> I have the following question regarding the multi rate retry (MRR) in b43.
>
> The device does not support MRR in any way. There's only the transmission rate
> and the fallback rate used for all retries (retry bit set in header).
>
> --
> Greetings, Michael.
>


From mb at bu3sch.de  Wed Apr 29 18:09:47 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Wed, 29 Apr 2009 18:09:47 +0200
Subject: Multi Rate Retry in b43
In-Reply-To: <d0ad1e930904290901v4f8ecc16sa49ca5e26d31cf67@mail.gmail.com>
References: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>
	<200904291756.32224.mb@bu3sch.de>
	<d0ad1e930904290901v4f8ecc16sa49ca5e26d31cf67@mail.gmail.com>
Message-ID: <200904291809.47619.mb@bu3sch.de>

On Wednesday 29 April 2009 18:01:32 Bo Han wrote:
> I see.  But I think it may not be reasonable to always use 1 Mbps as
> the fallback rate, which will reduce the throughput... 

Yeah. It's the job of the rate control to select a reasonable rate for fallback.

> Also, when MRR 
> is not supported, we should not get the fallback rate from rate
> control algorithms (like minstrel) in the current way, right?

Why not? It's called rate-control, because it controls rates. Including fallback.
One fallback is not different from multi-fallback. It's just only one rate instead of n rates.
It's still the job of the RC to find out which one is best. The driver certainly can't do this.

-- 
Greetings, Michael.


From hanbo00 at gmail.com  Wed Apr 29 19:09:33 2009
From: hanbo00 at gmail.com (Bo Han)
Date: Wed, 29 Apr 2009 13:09:33 -0400
Subject: Multi Rate Retry in b43
In-Reply-To: <200904291809.47619.mb@bu3sch.de>
References: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>
	<200904291756.32224.mb@bu3sch.de>
	<d0ad1e930904290901v4f8ecc16sa49ca5e26d31cf67@mail.gmail.com>
	<200904291809.47619.mb@bu3sch.de>
Message-ID: <d0ad1e930904291009vd3411dcwb28c106e195e21cf@mail.gmail.com>

Well, it depends on the interface betweent the device drivers and rate
control algorithms.  Minstrel in the default rate control algorithm in
the current Linux kernel.  It will either set all the 4 bit rates when
MRR is enabled or only set the best throughput bit rate otherwise.
That is, there will be either no fallback rate or 3 fallback rates.
To get 1 fallback rate for b43, I think we need to first enable MRR
and then select one from the 3 rates.  But for the current b43 driver
code, since MRR is disabled, minstrel will provide no fallback rate.
Is it clear now?  Please correct me if I am wrong.

Thanks,
-Bo

On Wed, Apr 29, 2009 at 12:09 PM, Michael Buesch <mb at bu3sch.de> wrote:
> On Wednesday 29 April 2009 18:01:32 Bo Han wrote:
>> I see.  But I think it may not be reasonable to always use 1 Mbps as
>> the fallback rate, which will reduce the throughput...
>
> Yeah. It's the job of the rate control to select a reasonable rate for fallback.
>
>> Also, when MRR
>> is not supported, we should not get the fallback rate from rate
>> control algorithms (like minstrel) in the current way, right?
>
> Why not? It's called rate-control, because it controls rates. Including fallback.
> One fallback is not different from multi-fallback. It's just only one rate instead of n rates.
> It's still the job of the RC to find out which one is best. The driver certainly can't do this.
>
> --
> Greetings, Michael.
>


From mb at bu3sch.de  Wed Apr 29 19:57:12 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Wed, 29 Apr 2009 19:57:12 +0200
Subject: Multi Rate Retry in b43
In-Reply-To: <d0ad1e930904291009vd3411dcwb28c106e195e21cf@mail.gmail.com>
References: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>
	<200904291809.47619.mb@bu3sch.de>
	<d0ad1e930904291009vd3411dcwb28c106e195e21cf@mail.gmail.com>
Message-ID: <200904291957.12945.mb@bu3sch.de>

On Wednesday 29 April 2009 19:09:33 Bo Han wrote:
> Well, it depends on the interface betweent the device drivers and rate
> control algorithms.  Minstrel in the default rate control algorithm in
> the current Linux kernel.  It will either set all the 4 bit rates when
> MRR is enabled or only set the best throughput bit rate otherwise.
> That is, there will be either no fallback rate or 3 fallback rates.
> To get 1 fallback rate for b43, I think we need to first enable MRR
> and then select one from the 3 rates.  But for the current b43 driver
> code, since MRR is disabled, minstrel will provide no fallback rate.
> Is it clear now?  Please correct me if I am wrong.

Nono, that's not the case.
If it's really the case that mistrel ignores the one-fallback-rate-only special
case of MRR and doesn't supply a fallback, it's horribly broken and needs to be fixed.
_Nothing_ needs to be done in the driver in any case. The driver only supports one
fallback rate. That's written in stone and can't be changed. The RC has to adapt to that.
Please bug the minstrel maintainer (Felix Fietkau).

-- 
Greetings, Michael.


From hanbo00 at gmail.com  Wed Apr 29 21:29:02 2009
From: hanbo00 at gmail.com (Bo Han)
Date: Wed, 29 Apr 2009 12:29:02 -0700
Subject: Multi Rate Retry in b43
In-Reply-To: <200904291957.12945.mb@bu3sch.de>
References: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>
	<200904291809.47619.mb@bu3sch.de>
	<d0ad1e930904291009vd3411dcwb28c106e195e21cf@mail.gmail.com>
	<200904291957.12945.mb@bu3sch.de>
Message-ID: <d0ad1e930904291229t77ca876brf076517a475c1806@mail.gmail.com>

Hi Felix,

I just want to confirm that when b43 driver set max_rates of
ieee80211_hw to be 2, minstrel will think that MRR is not enabled and
thus will only provide the best throughput bit rate.  There is NO
fallback bit rate calculate in this special case.

Also, is it possible to modify the code to support just
one-fallback-rate-only case for drivers like b43?  I think minstrel
should be flexible and provide the fallback rates based on the value
of max_rates. Currently, there will be either no fallback rates or 3
fallback rates, right?

Feel free to correct me if I am wrong.

Thanks,
-Bo

On Wed, Apr 29, 2009 at 10:57 AM, Michael Buesch <mb at bu3sch.de> wrote:
> On Wednesday 29 April 2009 19:09:33 Bo Han wrote:
>> Well, it depends on the interface betweent the device drivers and rate
>> control algorithms.  Minstrel in the default rate control algorithm in
>> the current Linux kernel.  It will either set all the 4 bit rates when
>> MRR is enabled or only set the best throughput bit rate otherwise.
>> That is, there will be either no fallback rate or 3 fallback rates.
>> To get 1 fallback rate for b43, I think we need to first enable MRR
>> and then select one from the 3 rates.  But for the current b43 driver
>> code, since MRR is disabled, minstrel will provide no fallback rate.
>> Is it clear now?  Please correct me if I am wrong.
>
> Nono, that's not the case.
> If it's really the case that mistrel ignores the one-fallback-rate-only special
> case of MRR and doesn't supply a fallback, it's horribly broken and needs to be fixed.
> _Nothing_ needs to be done in the driver in any case. The driver only supports one
> fallback rate. That's written in stone and can't be changed. The RC has to adapt to that.
> Please bug the minstrel maintainer (Felix Fietkau).
>
> --
> Greetings, Michael.
>


From mb at bu3sch.de  Wed Apr 29 22:19:31 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Wed, 29 Apr 2009 22:19:31 +0200
Subject: Multi Rate Retry in b43
In-Reply-To: <49F8B502.9030206@openwrt.org>
References: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>
	<d0ad1e930904291229t77ca876brf076517a475c1806@mail.gmail.com>
	<49F8B502.9030206@openwrt.org>
Message-ID: <200904292219.31954.mb@bu3sch.de>

On Wednesday 29 April 2009 22:13:54 Felix Fietkau wrote:
> Bo Han wrote:
> > Hi Felix,
> > 
> > I just want to confirm that when b43 driver set max_rates of
> > ieee80211_hw to be 2, minstrel will think that MRR is not enabled and
> > thus will only provide the best throughput bit rate.  There is NO
> > fallback bit rate calculate in this special case.
> > 
> > Also, is it possible to modify the code to support just
> > one-fallback-rate-only case for drivers like b43?  I think minstrel
> > should be flexible and provide the fallback rates based on the value
> > of max_rates. Currently, there will be either no fallback rates or 3
> > fallback rates, right?
> > 
> > Feel free to correct me if I am wrong.
> Minstrel will only start properly using fallback rates if it has
> 4 rates. Using 3 rates would be workable too, but there's not that
> much that can be done with 2 rates. The reason for that is that
> it makes sense to have one rate always use the lowest rate, to
> make sure that when the radio environment changes, it does not
> produce high packet loss during the time that minstrel takes to
> readjust the rate statistics.
> 
> If the driver does not announce 4 rates, minstrel defaults to 
> always specifying the lowest rate as fallback rate, regardless
> of whether a fallback rate was actually announced by the driver or
> not.

Ok that makes sense. I understood Bo Han in a way that minstrel would not
define a fallback at all, so the variable was dangling. That wouldn't be
acceptable, of course. 1M is OK, of course.

-- 
Greetings, Michael.


From hanbo00 at gmail.com  Wed Apr 29 22:39:45 2009
From: hanbo00 at gmail.com (Bo Han)
Date: Wed, 29 Apr 2009 13:39:45 -0700
Subject: Multi Rate Retry in b43
In-Reply-To: <200904292219.31954.mb@bu3sch.de>
References: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>
	<d0ad1e930904291229t77ca876brf076517a475c1806@mail.gmail.com>
	<49F8B502.9030206@openwrt.org> <200904292219.31954.mb@bu3sch.de>
Message-ID: <d0ad1e930904291339k6dad6c63t546aed52797e04d2@mail.gmail.com>

What I said was when MRR is not enabled, b43 will always use 1 Mbps as
fallback rate, which will significantly reduce the throughput for some
cases.  For a channel with good quality, 54 Mbps may be the best
throughput bit rate.  After two retries fail with 54 Mbps, the bit
rate will drop to 1 Mbps.  But in fact, 48 or 36 Mbps may work well as
fallback rate...

Anyway, I just want to confirm it is what you are doing in the b43
driver and minstrel and I got the correct answers.  Thank you!

-Bo

On Wed, Apr 29, 2009 at 1:19 PM, Michael Buesch <mb at bu3sch.de> wrote:
> On Wednesday 29 April 2009 22:13:54 Felix Fietkau wrote:
>> Bo Han wrote:
>> > Hi Felix,
>> >
>> > I just want to confirm that when b43 driver set max_rates of
>> > ieee80211_hw to be 2, minstrel will think that MRR is not enabled and
>> > thus will only provide the best throughput bit rate.  There is NO
>> > fallback bit rate calculate in this special case.
>> >
>> > Also, is it possible to modify the code to support just
>> > one-fallback-rate-only case for drivers like b43?  I think minstrel
>> > should be flexible and provide the fallback rates based on the value
>> > of max_rates. Currently, there will be either no fallback rates or 3
>> > fallback rates, right?
>> >
>> > Feel free to correct me if I am wrong.
>> Minstrel will only start properly using fallback rates if it has
>> 4 rates. Using 3 rates would be workable too, but there's not that
>> much that can be done with 2 rates. The reason for that is that
>> it makes sense to have one rate always use the lowest rate, to
>> make sure that when the radio environment changes, it does not
>> produce high packet loss during the time that minstrel takes to
>> readjust the rate statistics.
>>
>> If the driver does not announce 4 rates, minstrel defaults to
>> always specifying the lowest rate as fallback rate, regardless
>> of whether a fallback rate was actually announced by the driver or
>> not.
>
> Ok that makes sense. I understood Bo Han in a way that minstrel would not
> define a fallback at all, so the variable was dangling. That wouldn't be
> acceptable, of course. 1M is OK, of course.
>
> --
> Greetings, Michael.
>


From mb at bu3sch.de  Wed Apr 29 22:48:53 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Wed, 29 Apr 2009 22:48:53 +0200
Subject: Multi Rate Retry in b43
In-Reply-To: <d0ad1e930904291339k6dad6c63t546aed52797e04d2@mail.gmail.com>
References: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>
	<200904292219.31954.mb@bu3sch.de>
	<d0ad1e930904291339k6dad6c63t546aed52797e04d2@mail.gmail.com>
Message-ID: <200904292248.53530.mb@bu3sch.de>

On Wednesday 29 April 2009 22:39:45 Bo Han wrote:
> What I said was when MRR is not enabled, b43 will always use 1 Mbps as
> fallback rate, which will significantly reduce the throughput for some
> cases.

No it won't. Fallbacks will only be used if the main rate wasn't correctly
adjusted by the RC. That will only happen while it's scaling/probing the rates.
If the RC correctly adjusted the rate to your network, only a very tiny number
of packets will be retried. (Real world numbers are an average of 1.01-1.02 tries per packet).

> For a channel with good quality, 54 Mbps may be the best 
> throughput bit rate.  After two retries fail with 54 Mbps, the bit
> rate will drop to 1 Mbps.  But in fact, 48 or 36 Mbps may work well as
> fallback rate...

No they won't. Starting with 54M as fallback is absolutely horrible
and it will cause horrible stalls. It will cause packets to be completely
lost that otherwise will get through on the second attempt with 1M. That will trigger
retries and delays on the upper layers, such as TCP. The TCP frame loss mechanism
will kick in, which will just reduce throughput even more.
The fact that high rates don't work at all on some b43 devices only helps this fact.

-- 
Greetings, Michael.


From hanbo00 at gmail.com  Wed Apr 29 23:03:14 2009
From: hanbo00 at gmail.com (Bo Han)
Date: Wed, 29 Apr 2009 17:03:14 -0400
Subject: Multi Rate Retry in b43
In-Reply-To: <200904292248.53530.mb@bu3sch.de>
References: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>
	<200904292219.31954.mb@bu3sch.de>
	<d0ad1e930904291339k6dad6c63t546aed52797e04d2@mail.gmail.com>
	<200904292248.53530.mb@bu3sch.de>
Message-ID: <d0ad1e930904291403l3192c2eaod5751addd007fa5e@mail.gmail.com>

By default, minstrel will adjust the best throughput bit rate every
100ms.  If 48 Mbps should be used for the channel, but for some reason
minstrel selects 54 Mbps at the very beginning of the update interval,
1 Mbps will be always used during that interval as fallback rate.
Even if the bit rate is reduced to 48 Mbps, after the first two
retries fail, 1 Mbps is again used as fallback rate.  Of course, I
know it is caused by the fact that there are only 2 rates for b43 and
this may be the best we can do now.

Yes, packet loss will make trouble for TCP.  But for UDP, we have a
trade-off between the maximum throughput we can get and the overall
packet loss rate.  For video streaming applications, I really don't
want a packet to be sent at 1 Mbps as fallback rate when the channel
quality is not that bad.  Anyway, thank you for the explanations.

Thanks,
-Bo

On Wed, Apr 29, 2009 at 4:48 PM, Michael Buesch <mb at bu3sch.de> wrote:
> On Wednesday 29 April 2009 22:39:45 Bo Han wrote:
>> What I said was when MRR is not enabled, b43 will always use 1 Mbps as
>> fallback rate, which will significantly reduce the throughput for some
>> cases.
>
> No it won't. Fallbacks will only be used if the main rate wasn't correctly
> adjusted by the RC. That will only happen while it's scaling/probing the rates.
> If the RC correctly adjusted the rate to your network, only a very tiny number
> of packets will be retried. (Real world numbers are an average of 1.01-1.02 tries per packet).
>
>> For a channel with good quality, 54 Mbps may be the best
>> throughput bit rate.  After two retries fail with 54 Mbps, the bit
>> rate will drop to 1 Mbps.  But in fact, 48 or 36 Mbps may work well as
>> fallback rate...
>
> No they won't. Starting with 54M as fallback is absolutely horrible
> and it will cause horrible stalls. It will cause packets to be completely
> lost that otherwise will get through on the second attempt with 1M. That will trigger
> retries and delays on the upper layers, such as TCP. The TCP frame loss mechanism
> will kick in, which will just reduce throughput even more.
> The fact that high rates don't work at all on some b43 devices only helps this fact.
>
> --
> Greetings, Michael.
>


From mb at bu3sch.de  Wed Apr 29 23:18:31 2009
From: mb at bu3sch.de (Michael Buesch)
Date: Wed, 29 Apr 2009 23:18:31 +0200
Subject: Multi Rate Retry in b43
In-Reply-To: <d0ad1e930904291403l3192c2eaod5751addd007fa5e@mail.gmail.com>
References: <d0ad1e930904290850s1c915e32hc3739105e4058701@mail.gmail.com>
	<200904292248.53530.mb@bu3sch.de>
	<d0ad1e930904291403l3192c2eaod5751addd007fa5e@mail.gmail.com>
Message-ID: <200904292318.31412.mb@bu3sch.de>

On Wednesday 29 April 2009 23:03:14 Bo Han wrote:
> By default, minstrel will adjust the best throughput bit rate every
> 100ms.  If 48 Mbps should be used for the channel, but for some reason
> minstrel selects 54 Mbps at the very beginning of the update interval,
> 1 Mbps will be always used during that interval as fallback rate.
> Even if the bit rate is reduced to 48 Mbps, after the first two
> retries fail, 1 Mbps is again used as fallback rate.  Of course, I
> know it is caused by the fact that there are only 2 rates for b43 and
> this may be the best we can do now.

Correct. So you'll get slow traffic for a duration of 100ms.
That's even well below the event recognition borderline of humans, which is about 300ms.
So you won't even notice it. You can only measure it with special benchmark
tools, perhaps.

> Yes, packet loss will make trouble for TCP.  But for UDP, we have a
> trade-off between the maximum throughput we can get and the overall
> packet loss rate.  For video streaming applications, I really don't
> want a packet to be sent at 1 Mbps as fallback rate when the channel
> quality is not that bad.  Anyway, thank you for the explanations.

Then wait for another 100ms, if you can spare that time, and you'll get
the full throughput of your shiny quality connection.

To say it once again. Fallback is really what the name says: A fallback.
It's a fallback for error conditions. So if we already have an error condition
(that is the first attempt failed), we should try our best to get the freaking
frame out there. Our best guess with one-rate-retry is 1M. (For MRR
we'd start with a higher rate before we try 1M, of course).

It simply is a limitation of some devices. But I think it's not that bad.
Throughput may just be worse for the first 1/2second or something like this
after the environment conditions changed, because lots of retransmissions hit.

-- 
Greetings, Michael.


